function initSideModalWrapper(t){var e=$('<div class="side-modal-overlay"><div class="side-modal '+t+'"><a href="#" class="side-modal-close" data-side-modal-close></a><div class="side-modal-overflow"></div></div></div>'),i=$("body").children(".side-modal-overlay");return i.length&&i.remove(),$("body").append(e),$("body").children(".side-modal-overlay")}function initSideModal(t,e,i,n){var s=initSideModalWrapper(e);s.find(".side-modal-overflow").html(t),s.find("[data-masked-input]").maskedinput(),s.find("[data-validate]").formValidation(),s.find("[data-form-ajax]").formAjax(),setTimeout(function(){s.addClass("active"),s.find("input").first().focus(),i||$(document).on("click","body",o),n||$(document).on("keyup",o)},200);var o=function(t){($(t.target).closest(".side-modal").length||$(t.target).is("input, label")||$(t.target).is("body"))&&27!==t.which||(s.removeClass("active"),$(document).off("click","body",o),n||$(document).off("keyup",o))};s.find("[data-side-modal-close]").click(function(){return i||$(document).off("click","body",o),n||$(document).off("keyup",o),s.removeClass("active"),!1})}function Swipe(t,e){function i(t){n.touchHandler(t)}var n=this;this.callback=e,t.addEventListener("touchstart",i,!1),t.addEventListener("touchmove",i,!1),t.addEventListener("touchend",i,!1)}function initMaps(t){for(var e=document.querySelectorAll("[data-maps]"),i=0;i<e.length;i++)!function(){var n=function(){try{return JSON.parse(e[i].dataset.maps)}catch(t){console.log(t)}}();if(n){var s=new t.Map(e[i],{center:n.center.split(","),zoom:n.zoom,controls:["smallMapDefaultSet"]});if(s.behaviors.disable("scrollZoom"),n.placemark){var o=new t.GeoObject({geometry:{type:"Point",coordinates:n.placemark.center.split(",")},properties:{iconContent:n.placemark.name}},{preset:"islands#blackStretchyIcon"});s.geoObjects.add(o)}}}()}!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){"use strict";function i(t,e){var i=(e=e||G).createElement("script");i.text=t,e.head.appendChild(i).parentNode.removeChild(i)}function n(t){var e=!!t&&"length"in t&&t.length,i=at.type(t);return"function"!==i&&!at.isWindow(t)&&("array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t)}function s(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}function o(t,e,i){return at.isFunction(e)?at.grep(t,function(t,n){return!!e.call(t,n,t)!==i}):e.nodeType?at.grep(t,function(t){return t===e!==i}):"string"!=typeof e?at.grep(t,function(t){return tt.call(e,t)>-1!==i}):vt.test(e)?at.filter(e,t,i):(e=at.filter(e,t),at.grep(t,function(t){return tt.call(e,t)>-1!==i&&1===t.nodeType}))}function r(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function a(t){return t}function l(t){throw t}function c(t,e,i,n){var s;try{t&&at.isFunction(s=t.promise)?s.call(t).done(e).fail(i):t&&at.isFunction(s=t.then)?s.call(t,e,i):e.apply(void 0,[t].slice(n))}catch(t){i.apply(void 0,[t])}}function d(){G.removeEventListener("DOMContentLoaded",d),t.removeEventListener("load",d),at.ready()}function u(){this.expando=at.expando+u.uid++}function h(t,e,i){var n;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(Lt,"-$&").toLowerCase(),"string"==typeof(i=t.getAttribute(n))){try{i=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:jt.test(t)?JSON.parse(t):t)}(i)}catch(t){}Et.set(t,e,i)}else i=void 0;return i}function p(t,e,i,n){var s,o=1,r=20,a=n?function(){return n.cur()}:function(){return at.css(t,e,"")},l=a(),c=i&&i[3]||(at.cssNumber[e]?"":"px"),d=(at.cssNumber[e]||"px"!==c&&+l)&&Ot.exec(at.css(t,e));if(d&&d[3]!==c){c=c||d[3],i=i||[],d=+l||1;do{d/=o=o||".5",at.style(t,e,d+c)}while(o!==(o=a()/l)&&1!==o&&--r)}return i&&(d=+d||+l||0,s=i[1]?d+(i[1]+1)*i[2]:+i[2],n&&(n.unit=c,n.start=d,n.end=s)),s}function f(t){var e,i=t.ownerDocument,n=t.nodeName,s=Ht[n];return s||(e=i.body.appendChild(i.createElement(n)),s=at.css(e,"display"),e.parentNode.removeChild(e),"none"===s&&(s="block"),Ht[n]=s,s)}function m(t,e){for(var i,n,s=[],o=0,r=t.length;o<r;o++)(n=t[o]).style&&(i=n.style.display,e?("none"===i&&(s[o]=At.get(n,"display")||null,s[o]||(n.style.display="")),""===n.style.display&&Nt(n)&&(s[o]=f(n))):"none"!==i&&(s[o]="none",At.set(n,"display",i)));for(o=0;o<r;o++)null!=s[o]&&(t[o].style.display=s[o]);return t}function g(t,e){var i;return i=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&s(t,e)?at.merge([t],i):i}function v(t,e){for(var i=0,n=t.length;i<n;i++)At.set(t[i],"globalEval",!e||At.get(e[i],"globalEval"))}function y(t,e,i,n,s){for(var o,r,a,l,c,d,u=e.createDocumentFragment(),h=[],p=0,f=t.length;p<f;p++)if((o=t[p])||0===o)if("object"===at.type(o))at.merge(h,o.nodeType?[o]:o);else if(Rt.test(o)){for(r=r||u.appendChild(e.createElement("div")),a=(zt.exec(o)||["",""])[1].toLowerCase(),l=It[a]||It._default,r.innerHTML=l[1]+at.htmlPrefilter(o)+l[2],d=l[0];d--;)r=r.lastChild;at.merge(h,r.childNodes),(r=u.firstChild).textContent=""}else h.push(e.createTextNode(o));for(u.textContent="",p=0;o=h[p++];)if(n&&at.inArray(o,n)>-1)s&&s.push(o);else if(c=at.contains(o.ownerDocument,o),r=g(u.appendChild(o),"script"),c&&v(r),i)for(d=0;o=r[d++];)Ft.test(o.type||"")&&i.push(o);return u}function w(){return!0}function b(){return!1}function k(){try{return G.activeElement}catch(t){}}function x(t,e,i,n,s,o){var r,a;if("object"==typeof e){"string"!=typeof i&&(n=n||i,i=void 0);for(a in e)x(t,a,i,n,e[a],o);return t}if(null==n&&null==s?(s=i,n=i=void 0):null==s&&("string"==typeof i?(s=n,n=void 0):(s=n,n=i,i=void 0)),!1===s)s=b;else if(!s)return t;return 1===o&&(r=s,(s=function(t){return at().off(t),r.apply(this,arguments)}).guid=r.guid||(r.guid=at.guid++)),t.each(function(){at.event.add(this,e,s,n,i)})}function T(t,e){return s(t,"table")&&s(11!==e.nodeType?e:e.firstChild,"tr")?at(">tbody",t)[0]||t:t}function S(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function C(t){var e=Gt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function $(t,e){var i,n,s,o,r,a,l,c;if(1===e.nodeType){if(At.hasData(t)&&(o=At.access(t),r=At.set(e,o),c=o.events)){delete r.handle,r.events={};for(s in c)for(i=0,n=c[s].length;i<n;i++)at.event.add(e,s,c[s][i])}Et.hasData(t)&&(a=Et.access(t),l=at.extend({},a),Et.set(e,l))}}function A(t,e){var i=e.nodeName.toLowerCase();"input"===i&&qt.test(t.type)?e.checked=t.checked:"input"!==i&&"textarea"!==i||(e.defaultValue=t.defaultValue)}function E(t,e,n,s){e=J.apply([],e);var o,r,a,l,c,d,u=0,h=t.length,p=h-1,f=e[0],m=at.isFunction(f);if(m||h>1&&"string"==typeof f&&!rt.checkClone&&Vt.test(f))return t.each(function(i){var o=t.eq(i);m&&(e[0]=f.call(this,i,o.html())),E(o,e,n,s)});if(h&&(o=y(e,t[0].ownerDocument,!1,t,s),r=o.firstChild,1===o.childNodes.length&&(o=r),r||s)){for(l=(a=at.map(g(o,"script"),S)).length;u<h;u++)c=o,u!==p&&(c=at.clone(c,!0,!0),l&&at.merge(a,g(c,"script"))),n.call(t[u],c,u);if(l)for(d=a[a.length-1].ownerDocument,at.map(a,C),u=0;u<l;u++)c=a[u],Ft.test(c.type||"")&&!At.access(c,"globalEval")&&at.contains(d,c)&&(c.src?at._evalUrl&&at._evalUrl(c.src):i(c.textContent.replace(Qt,""),d))}return t}function j(t,e,i){for(var n,s=e?at.filter(e,t):t,o=0;null!=(n=s[o]);o++)i||1!==n.nodeType||at.cleanData(g(n)),n.parentNode&&(i&&at.contains(n.ownerDocument,n)&&v(g(n,"script")),n.parentNode.removeChild(n));return t}function L(t,e,i){var n,s,o,r,a=t.style;return(i=i||Zt(t))&&(""!==(r=i.getPropertyValue(e)||i[e])||at.contains(t.ownerDocument,t)||(r=at.style(t,e)),!rt.pixelMarginRight()&&Jt.test(r)&&Kt.test(e)&&(n=a.width,s=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=i.width,a.width=n,a.minWidth=s,a.maxWidth=o)),void 0!==r?r+"":r}function M(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}function O(t){var e=at.cssProps[t];return e||(e=at.cssProps[t]=function(t){if(t in oe)return t;for(var e=t[0].toUpperCase()+t.slice(1),i=se.length;i--;)if((t=se[i]+e)in oe)return t}(t)||t),e}function D(t,e,i){var n=Ot.exec(e);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):e}function N(t,e,i,n,s){var o,r=0;for(o=i===(n?"border":"content")?4:"width"===e?1:0;o<4;o+=2)"margin"===i&&(r+=at.css(t,i+Dt[o],!0,s)),n?("content"===i&&(r-=at.css(t,"padding"+Dt[o],!0,s)),"margin"!==i&&(r-=at.css(t,"border"+Dt[o]+"Width",!0,s))):(r+=at.css(t,"padding"+Dt[o],!0,s),"padding"!==i&&(r+=at.css(t,"border"+Dt[o]+"Width",!0,s)));return r}function P(t,e,i){var n,s=Zt(t),o=L(t,e,s),r="border-box"===at.css(t,"boxSizing",!1,s);return Jt.test(o)?o:(n=r&&(rt.boxSizingReliable()||o===t.style[e]),"auto"===o&&(o=t["offset"+e[0].toUpperCase()+e.slice(1)]),(o=parseFloat(o)||0)+N(t,e,i||(r?"border":"content"),n,s)+"px")}function H(t,e,i,n,s){return new H.prototype.init(t,e,i,n,s)}function q(){ae&&(!1===G.hidden&&t.requestAnimationFrame?t.requestAnimationFrame(q):t.setTimeout(q,at.fx.interval),at.fx.tick())}function z(){return t.setTimeout(function(){re=void 0}),re=at.now()}function F(t,e){var i,n=0,s={height:t};for(e=e?1:0;n<4;n+=2-e)s["margin"+(i=Dt[n])]=s["padding"+i]=t;return e&&(s.opacity=s.width=t),s}function I(t,e,i){for(var n,s=(R.tweeners[e]||[]).concat(R.tweeners["*"]),o=0,r=s.length;o<r;o++)if(n=s[o].call(i,e,t))return n}function R(t,e,i){var n,s,o=0,r=R.prefilters.length,a=at.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var e=re||z(),i=Math.max(0,c.startTime+c.duration-e),n=1-(i/c.duration||0),o=0,r=c.tweens.length;o<r;o++)c.tweens[o].run(n);return a.notifyWith(t,[c,n,i]),n<1&&r?i:(r||a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:at.extend({},e),opts:at.extend(!0,{specialEasing:{},easing:at.easing._default},i),originalProperties:e,originalOptions:i,startTime:re||z(),duration:i.duration,tweens:[],createTween:function(e,i){var n=at.Tween(t,c.opts,e,i,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(n),n},stop:function(e){var i=0,n=e?c.tweens.length:0;if(s)return this;for(s=!0;i<n;i++)c.tweens[i].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),d=c.props;for(function(t,e){var i,n,s,o,r;for(i in t)if(n=at.camelCase(i),s=e[n],o=t[i],Array.isArray(o)&&(s=o[1],o=t[i]=o[0]),i!==n&&(t[n]=o,delete t[i]),(r=at.cssHooks[n])&&"expand"in r){o=r.expand(o),delete t[n];for(i in o)i in t||(t[i]=o[i],e[i]=s)}else e[n]=s}(d,c.opts.specialEasing);o<r;o++)if(n=R.prefilters[o].call(c,t,d,c.opts))return at.isFunction(n.stop)&&(at._queueHooks(c.elem,c.opts.queue).stop=at.proxy(n.stop,n)),n;return at.map(d,I,c),at.isFunction(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),at.fx.timer(at.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c}function W(t){return(t.match(xt)||[]).join(" ")}function B(t){return t.getAttribute&&t.getAttribute("class")||""}function _(t,e,i,n){var s;if(Array.isArray(e))at.each(e,function(e,s){i||we.test(t)?n(t,s):_(t+"["+("object"==typeof s&&null!=s?e:"")+"]",s,i,n)});else if(i||"object"!==at.type(e))n(t,e);else for(s in e)_(t+"["+s+"]",e[s],i,n)}function X(t){return function(e,i){"string"!=typeof e&&(i=e,e="*");var n,s=0,o=e.toLowerCase().match(xt)||[];if(at.isFunction(i))for(;n=o[s++];)"+"===n[0]?(n=n.slice(1)||"*",(t[n]=t[n]||[]).unshift(i)):(t[n]=t[n]||[]).push(i)}}function U(t,e,i,n){function s(a){var l;return o[a]=!0,at.each(t[a]||[],function(t,a){var c=a(e,i,n);return"string"!=typeof c||r||o[c]?r?!(l=c):void 0:(e.dataTypes.unshift(c),s(c),!1)}),l}var o={},r=t===Le;return s(e.dataTypes[0])||!o["*"]&&s("*")}function Y(t,e){var i,n,s=at.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((s[i]?t:n||(n={}))[i]=e[i]);return n&&at.extend(!0,t,n),t}var V=[],G=t.document,Q=Object.getPrototypeOf,K=V.slice,J=V.concat,Z=V.push,tt=V.indexOf,et={},it=et.toString,nt=et.hasOwnProperty,st=nt.toString,ot=st.call(Object),rt={},at=function(t,e){return new at.fn.init(t,e)},lt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ct=/^-ms-/,dt=/-([a-z])/g,ut=function(t,e){return e.toUpperCase()};at.fn=at.prototype={jquery:"3.2.1",constructor:at,length:0,toArray:function(){return K.call(this)},get:function(t){return null==t?K.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=at.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return at.each(this,t)},map:function(t){return this.pushStack(at.map(this,function(e,i){return t.call(e,i,e)}))},slice:function(){return this.pushStack(K.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(i>=0&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:Z,sort:V.sort,splice:V.splice},at.extend=at.fn.extend=function(){var t,e,i,n,s,o,r=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[a]||{},a++),"object"==typeof r||at.isFunction(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)i=r[e],r!==(n=t[e])&&(c&&n&&(at.isPlainObject(n)||(s=Array.isArray(n)))?(s?(s=!1,o=i&&Array.isArray(i)?i:[]):o=i&&at.isPlainObject(i)?i:{},r[e]=at.extend(c,o,n)):void 0!==n&&(r[e]=n));return r},at.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===at.type(t)},isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=at.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==it.call(t))&&(!(e=Q(t))||"function"==typeof(i=nt.call(e,"constructor")&&e.constructor)&&st.call(i)===ot)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?et[it.call(t)]||"object":typeof t},globalEval:function(t){i(t)},camelCase:function(t){return t.replace(ct,"ms-").replace(dt,ut)},each:function(t,e){var i,s=0;if(n(t))for(i=t.length;s<i&&!1!==e.call(t[s],s,t[s]);s++);else for(s in t)if(!1===e.call(t[s],s,t[s]))break;return t},trim:function(t){return null==t?"":(t+"").replace(lt,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?at.merge(i,"string"==typeof t?[t]:t):Z.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:tt.call(e,t,i)},merge:function(t,e){for(var i=+e.length,n=0,s=t.length;n<i;n++)t[s++]=e[n];return t.length=s,t},grep:function(t,e,i){for(var n=[],s=0,o=t.length,r=!i;s<o;s++)!e(t[s],s)!==r&&n.push(t[s]);return n},map:function(t,e,i){var s,o,r=0,a=[];if(n(t))for(s=t.length;r<s;r++)null!=(o=e(t[r],r,i))&&a.push(o);else for(r in t)null!=(o=e(t[r],r,i))&&a.push(o);return J.apply([],a)},guid:1,proxy:function(t,e){var i,n,s;if("string"==typeof e&&(i=t[e],e=t,t=i),at.isFunction(t))return n=K.call(arguments,2),s=function(){return t.apply(e||this,n.concat(K.call(arguments)))},s.guid=t.guid=t.guid||at.guid++,s},now:Date.now,support:rt}),"function"==typeof Symbol&&(at.fn[Symbol.iterator]=V[Symbol.iterator]),at.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){et["[object "+e+"]"]=e.toLowerCase()});var ht=function(t){function e(t,e,i,n){var s,o,r,a,l,c,d,h=e&&e.ownerDocument,f=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==f&&9!==f&&11!==f)return i;if(!n&&((e?e.ownerDocument||e:F)!==M&&L(e),e=e||M,D)){if(11!==f&&(l=mt.exec(t)))if(s=l[1]){if(9===f){if(!(r=e.getElementById(s)))return i;if(r.id===s)return i.push(r),i}else if(h&&(r=h.getElementById(s))&&q(e,r)&&r.id===s)return i.push(r),i}else{if(l[2])return Q.apply(i,e.getElementsByTagName(t)),i;if((s=l[3])&&b.getElementsByClassName&&e.getElementsByClassName)return Q.apply(i,e.getElementsByClassName(s)),i}if(b.qsa&&!_[t+" "]&&(!N||!N.test(t))){if(1!==f)h=e,d=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(wt,bt):e.setAttribute("id",a=z),o=(c=S(t)).length;o--;)c[o]="#"+a+" "+p(c[o]);d=c.join(","),h=gt.test(t)&&u(e.parentNode)||e}if(d)try{return Q.apply(i,h.querySelectorAll(d)),i}catch(t){}finally{a===z&&e.removeAttribute("id")}}}return $(t.replace(ot,"$1"),e,i,n)}function i(){function t(i,n){return e.push(i+" ")>k.cacheLength&&delete t[e.shift()],t[i+" "]=n}var e=[];return t}function n(t){return t[z]=!0,t}function s(t){var e=M.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var i=t.split("|"),n=i.length;n--;)k.attrHandle[i[n]]=e}function r(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function a(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function l(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}function c(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&xt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function d(t){return n(function(e){return e=+e,n(function(i,n){for(var s,o=t([],i.length,e),r=o.length;r--;)i[s=o[r]]&&(i[s]=!(n[s]=i[s]))})})}function u(t){return t&&void 0!==t.getElementsByTagName&&t}function h(){}function p(t){for(var e=0,i=t.length,n="";e<i;e++)n+=t[e].value;return n}function f(t,e,i){var n=e.dir,s=e.next,o=s||n,r=i&&"parentNode"===o,a=R++;return e.first?function(e,i,s){for(;e=e[n];)if(1===e.nodeType||r)return t(e,i,s);return!1}:function(e,i,l){var c,d,u,h=[I,a];if(l){for(;e=e[n];)if((1===e.nodeType||r)&&t(e,i,l))return!0}else for(;e=e[n];)if(1===e.nodeType||r)if(u=e[z]||(e[z]={}),d=u[e.uniqueID]||(u[e.uniqueID]={}),s&&s===e.nodeName.toLowerCase())e=e[n]||e;else{if((c=d[o])&&c[0]===I&&c[1]===a)return h[2]=c[2];if(d[o]=h,h[2]=t(e,i,l))return!0}return!1}}function m(t){return t.length>1?function(e,i,n){for(var s=t.length;s--;)if(!t[s](e,i,n))return!1;return!0}:t[0]}function g(t,e,i,n,s){for(var o,r=[],a=0,l=t.length,c=null!=e;a<l;a++)(o=t[a])&&(i&&!i(o,n,s)||(r.push(o),c&&e.push(a)));return r}function v(t,i,s,o,r,a){return o&&!o[z]&&(o=v(o)),r&&!r[z]&&(r=v(r,a)),n(function(n,a,l,c){var d,u,h,p=[],f=[],m=a.length,v=n||function(t,i,n){for(var s=0,o=i.length;s<o;s++)e(t,i[s],n);return n}(i||"*",l.nodeType?[l]:l,[]),y=!t||!n&&i?v:g(v,p,t,l,c),w=s?r||(n?t:m||o)?[]:a:y;if(s&&s(y,w,l,c),o)for(d=g(w,f),o(d,[],l,c),u=d.length;u--;)(h=d[u])&&(w[f[u]]=!(y[f[u]]=h));if(n){if(r||t){if(r){for(d=[],u=w.length;u--;)(h=w[u])&&d.push(y[u]=h);r(null,w=[],d,c)}for(u=w.length;u--;)(h=w[u])&&(d=r?J(n,h):p[u])>-1&&(n[d]=!(a[d]=h))}}else w=g(w===a?w.splice(m,w.length):w),r?r(null,a,w,c):Q.apply(a,w)})}function y(t){for(var e,i,n,s=t.length,o=k.relative[t[0].type],r=o||k.relative[" "],a=o?1:0,l=f(function(t){return t===e},r,!0),c=f(function(t){return J(e,t)>-1},r,!0),d=[function(t,i,n){var s=!o&&(n||i!==A)||((e=i).nodeType?l(t,i,n):c(t,i,n));return e=null,s}];a<s;a++)if(i=k.relative[t[a].type])d=[f(m(d),i)];else{if((i=k.filter[t[a].type].apply(null,t[a].matches))[z]){for(n=++a;n<s&&!k.relative[t[n].type];n++);return v(a>1&&m(d),a>1&&p(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(ot,"$1"),i,a<n&&y(t.slice(a,n)),n<s&&y(t=t.slice(n)),n<s&&p(t))}d.push(i)}return m(d)}var w,b,k,x,T,S,C,$,A,E,j,L,M,O,D,N,P,H,q,z="sizzle"+1*new Date,F=t.document,I=0,R=0,W=i(),B=i(),_=i(),X=function(t,e){return t===e&&(j=!0),0},U={}.hasOwnProperty,Y=[],V=Y.pop,G=Y.push,Q=Y.push,K=Y.slice,J=function(t,e){for(var i=0,n=t.length;i<n;i++)if(t[i]===e)return i;return-1},Z="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",tt="[\\x20\\t\\r\\n\\f]",et="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",it="\\["+tt+"*("+et+")(?:"+tt+"*([*^$|!~]?=)"+tt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+et+"))|)"+tt+"*\\]",nt=":("+et+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+it+")*)|.*)\\)|)",st=new RegExp(tt+"+","g"),ot=new RegExp("^"+tt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+tt+"+$","g"),rt=new RegExp("^"+tt+"*,"+tt+"*"),at=new RegExp("^"+tt+"*([>+~]|"+tt+")"+tt+"*"),lt=new RegExp("="+tt+"*([^\\]'\"]*?)"+tt+"*\\]","g"),ct=new RegExp(nt),dt=new RegExp("^"+et+"$"),ut={ID:new RegExp("^#("+et+")"),CLASS:new RegExp("^\\.("+et+")"),TAG:new RegExp("^("+et+"|[*])"),ATTR:new RegExp("^"+it),PSEUDO:new RegExp("^"+nt),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+tt+"*(even|odd|(([+-]|)(\\d*)n|)"+tt+"*(?:([+-]|)"+tt+"*(\\d+)|))"+tt+"*\\)|)","i"),bool:new RegExp("^(?:"+Z+")$","i"),needsContext:new RegExp("^"+tt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+tt+"*((?:-\\d)?\\d*)"+tt+"*\\)|)(?=[^-]|$)","i")},ht=/^(?:input|select|textarea|button)$/i,pt=/^h\d$/i,ft=/^[^{]+\{\s*\[native \w/,mt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,gt=/[+~]/,vt=new RegExp("\\\\([\\da-f]{1,6}"+tt+"?|("+tt+")|.)","ig"),yt=function(t,e,i){var n="0x"+e-65536;return n!=n||i?e:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},wt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,bt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},kt=function(){L()},xt=f(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{Q.apply(Y=K.call(F.childNodes),F.childNodes),Y[F.childNodes.length].nodeType}catch(t){Q={apply:Y.length?function(t,e){G.apply(t,K.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}b=e.support={},T=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},L=e.setDocument=function(t){var e,i,n=t?t.ownerDocument||t:F;return n!==M&&9===n.nodeType&&n.documentElement?(M=n,O=M.documentElement,D=!T(M),F!==M&&(i=M.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",kt,!1):i.attachEvent&&i.attachEvent("onunload",kt)),b.attributes=s(function(t){return t.className="i",!t.getAttribute("className")}),b.getElementsByTagName=s(function(t){return t.appendChild(M.createComment("")),!t.getElementsByTagName("*").length}),b.getElementsByClassName=ft.test(M.getElementsByClassName),b.getById=s(function(t){return O.appendChild(t).id=z,!M.getElementsByName||!M.getElementsByName(z).length}),b.getById?(k.filter.ID=function(t){var e=t.replace(vt,yt);return function(t){return t.getAttribute("id")===e}},k.find.ID=function(t,e){if(void 0!==e.getElementById&&D){var i=e.getElementById(t);return i?[i]:[]}}):(k.filter.ID=function(t){var e=t.replace(vt,yt);return function(t){var i=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}},k.find.ID=function(t,e){if(void 0!==e.getElementById&&D){var i,n,s,o=e.getElementById(t);if(o){if((i=o.getAttributeNode("id"))&&i.value===t)return[o];for(s=e.getElementsByName(t),n=0;o=s[n++];)if((i=o.getAttributeNode("id"))&&i.value===t)return[o]}return[]}}),k.find.TAG=b.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):b.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,n=[],s=0,o=e.getElementsByTagName(t);if("*"===t){for(;i=o[s++];)1===i.nodeType&&n.push(i);return n}return o},k.find.CLASS=b.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&D)return e.getElementsByClassName(t)},P=[],N=[],(b.qsa=ft.test(M.querySelectorAll))&&(s(function(t){O.appendChild(t).innerHTML="<a id='"+z+"'></a><select id='"+z+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&N.push("[*^$]="+tt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||N.push("\\["+tt+"*(?:value|"+Z+")"),t.querySelectorAll("[id~="+z+"-]").length||N.push("~="),t.querySelectorAll(":checked").length||N.push(":checked"),t.querySelectorAll("a#"+z+"+*").length||N.push(".#.+[+~]")}),s(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=M.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&N.push("name"+tt+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&N.push(":enabled",":disabled"),O.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&N.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),N.push(",.*:")})),(b.matchesSelector=ft.test(H=O.matches||O.webkitMatchesSelector||O.mozMatchesSelector||O.oMatchesSelector||O.msMatchesSelector))&&s(function(t){b.disconnectedMatch=H.call(t,"*"),H.call(t,"[s!='']:x"),P.push("!=",nt)}),N=N.length&&new RegExp(N.join("|")),P=P.length&&new RegExp(P.join("|")),e=ft.test(O.compareDocumentPosition),q=e||ft.test(O.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},X=e?function(t,e){if(t===e)return j=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!b.sortDetached&&e.compareDocumentPosition(t)===i?t===M||t.ownerDocument===F&&q(F,t)?-1:e===M||e.ownerDocument===F&&q(F,e)?1:E?J(E,t)-J(E,e):0:4&i?-1:1)}:function(t,e){if(t===e)return j=!0,0;var i,n=0,s=t.parentNode,o=e.parentNode,a=[t],l=[e];if(!s||!o)return t===M?-1:e===M?1:s?-1:o?1:E?J(E,t)-J(E,e):0;if(s===o)return r(t,e);for(i=t;i=i.parentNode;)a.unshift(i);for(i=e;i=i.parentNode;)l.unshift(i);for(;a[n]===l[n];)n++;return n?r(a[n],l[n]):a[n]===F?-1:l[n]===F?1:0},M):M},e.matches=function(t,i){return e(t,null,null,i)},e.matchesSelector=function(t,i){if((t.ownerDocument||t)!==M&&L(t),i=i.replace(lt,"='$1']"),b.matchesSelector&&D&&!_[i+" "]&&(!P||!P.test(i))&&(!N||!N.test(i)))try{var n=H.call(t,i);if(n||b.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){}return e(i,M,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==M&&L(t),q(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==M&&L(t);var i=k.attrHandle[e.toLowerCase()],n=i&&U.call(k.attrHandle,e.toLowerCase())?i(t,e,!D):void 0;return void 0!==n?n:b.attributes||!D?t.getAttribute(e):(n=t.getAttributeNode(e))&&n.specified?n.value:null},e.escape=function(t){return(t+"").replace(wt,bt)},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,i=[],n=0,s=0;if(j=!b.detectDuplicates,E=!b.sortStable&&t.slice(0),t.sort(X),j){for(;e=t[s++];)e===t[s]&&(n=i.push(s));for(;n--;)t.splice(i[n],1)}return E=null,t},x=e.getText=function(t){var e,i="",n=0,s=t.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=x(t)}else if(3===s||4===s)return t.nodeValue}else for(;e=t[n++];)i+=x(e);return i},(k=e.selectors={cacheLength:50,createPseudo:n,match:ut,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(vt,yt),t[3]=(t[3]||t[4]||t[5]||"").replace(vt,yt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return ut.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&ct.test(i)&&(e=S(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(vt,yt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=W[t+" "];return e||(e=new RegExp("(^|"+tt+")"+t+"("+tt+"|$)"))&&W(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,i,n){return function(s){var o=e.attr(s,t);return null==o?"!="===i:!i||(o+="","="===i?o===n:"!="===i?o!==n:"^="===i?n&&0===o.indexOf(n):"*="===i?n&&o.indexOf(n)>-1:"$="===i?n&&o.slice(-n.length)===n:"~="===i?(" "+o.replace(st," ")+" ").indexOf(n)>-1:"|="===i&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,i,n,s){var o="nth"!==t.slice(0,3),r="last"!==t.slice(-4),a="of-type"===e;return 1===n&&0===s?function(t){return!!t.parentNode}:function(e,i,l){var c,d,u,h,p,f,m=o!==r?"nextSibling":"previousSibling",g=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a,w=!1;if(g){if(o){for(;m;){for(h=e;h=h[m];)if(a?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;f=m="only"===t&&!f&&"nextSibling"}return!0}if(f=[r?g.firstChild:g.lastChild],r&&y){for(w=(p=(c=(d=(u=(h=g)[z]||(h[z]={}))[h.uniqueID]||(u[h.uniqueID]={}))[t]||[])[0]===I&&c[1])&&c[2],h=p&&g.childNodes[p];h=++p&&h&&h[m]||(w=p=0)||f.pop();)if(1===h.nodeType&&++w&&h===e){d[t]=[I,p,w];break}}else if(y&&(w=p=(c=(d=(u=(h=e)[z]||(h[z]={}))[h.uniqueID]||(u[h.uniqueID]={}))[t]||[])[0]===I&&c[1]),!1===w)for(;(h=++p&&h&&h[m]||(w=p=0)||f.pop())&&((a?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++w||(y&&((d=(u=h[z]||(h[z]={}))[h.uniqueID]||(u[h.uniqueID]={}))[t]=[I,w]),h!==e)););return(w-=s)===n||w%n==0&&w/n>=0}}},PSEUDO:function(t,i){var s,o=k.pseudos[t]||k.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[z]?o(i):o.length>1?(s=[t,t,"",i],k.setFilters.hasOwnProperty(t.toLowerCase())?n(function(t,e){for(var n,s=o(t,i),r=s.length;r--;)t[n=J(t,s[r])]=!(e[n]=s[r])}):function(t){return o(t,0,s)}):o}},pseudos:{not:n(function(t){var e=[],i=[],s=C(t.replace(ot,"$1"));return s[z]?n(function(t,e,i,n){for(var o,r=s(t,null,n,[]),a=t.length;a--;)(o=r[a])&&(t[a]=!(e[a]=o))}):function(t,n,o){return e[0]=t,s(e,null,o,i),e[0]=null,!i.pop()}}),has:n(function(t){return function(i){return e(t,i).length>0}}),contains:n(function(t){return t=t.replace(vt,yt),function(e){return(e.textContent||e.innerText||x(e)).indexOf(t)>-1}}),lang:n(function(t){return dt.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(vt,yt).toLowerCase(),function(e){var i;do{if(i=D?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(i=i.toLowerCase())===t||0===i.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===O},focus:function(t){return t===M.activeElement&&(!M.hasFocus||M.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:c(!1),disabled:c(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!k.pseudos.empty(t)},header:function(t){return pt.test(t.nodeName)},input:function(t){return ht.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:d(function(){return[0]}),last:d(function(t,e){return[e-1]}),eq:d(function(t,e,i){return[i<0?i+e:i]}),even:d(function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t}),odd:d(function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t}),lt:d(function(t,e,i){for(var n=i<0?i+e:i;--n>=0;)t.push(n);return t}),gt:d(function(t,e,i){for(var n=i<0?i+e:i;++n<e;)t.push(n);return t})}}).pseudos.nth=k.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})k.pseudos[w]=a(w);for(w in{submit:!0,reset:!0})k.pseudos[w]=l(w);return h.prototype=k.filters=k.pseudos,k.setFilters=new h,S=e.tokenize=function(t,i){var n,s,o,r,a,l,c,d=B[t+" "];if(d)return i?0:d.slice(0);for(a=t,l=[],c=k.preFilter;a;){n&&!(s=rt.exec(a))||(s&&(a=a.slice(s[0].length)||a),l.push(o=[])),n=!1,(s=at.exec(a))&&(n=s.shift(),o.push({value:n,type:s[0].replace(ot," ")}),a=a.slice(n.length));for(r in k.filter)!(s=ut[r].exec(a))||c[r]&&!(s=c[r](s))||(n=s.shift(),o.push({value:n,type:r,matches:s}),a=a.slice(n.length));if(!n)break}return i?a.length:a?e.error(t):B(t,l).slice(0)},C=e.compile=function(t,i){var s,o=[],r=[],a=_[t+" "];if(!a){for(i||(i=S(t)),s=i.length;s--;)(a=y(i[s]))[z]?o.push(a):r.push(a);(a=_(t,function(t,i){var s=i.length>0,o=t.length>0,r=function(n,r,a,l,c){var d,u,h,p=0,f="0",m=n&&[],v=[],y=A,w=n||o&&k.find.TAG("*",c),b=I+=null==y?1:Math.random()||.1,x=w.length;for(c&&(A=r===M||r||c);f!==x&&null!=(d=w[f]);f++){if(o&&d){for(u=0,r||d.ownerDocument===M||(L(d),a=!D);h=t[u++];)if(h(d,r||M,a)){l.push(d);break}c&&(I=b)}s&&((d=!h&&d)&&p--,n&&m.push(d))}if(p+=f,s&&f!==p){for(u=0;h=i[u++];)h(m,v,r,a);if(n){if(p>0)for(;f--;)m[f]||v[f]||(v[f]=V.call(l));v=g(v)}Q.apply(l,v),c&&!n&&v.length>0&&p+i.length>1&&e.uniqueSort(l)}return c&&(I=b,A=y),m};return s?n(r):r}(r,o))).selector=t}return a},$=e.select=function(t,e,i,n){var s,o,r,a,l,c="function"==typeof t&&t,d=!n&&S(t=c.selector||t);if(i=i||[],1===d.length){if((o=d[0]=d[0].slice(0)).length>2&&"ID"===(r=o[0]).type&&9===e.nodeType&&D&&k.relative[o[1].type]){if(!(e=(k.find.ID(r.matches[0].replace(vt,yt),e)||[])[0]))return i;c&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(s=ut.needsContext.test(t)?0:o.length;s--&&(r=o[s],!k.relative[a=r.type]);)if((l=k.find[a])&&(n=l(r.matches[0].replace(vt,yt),gt.test(o[0].type)&&u(e.parentNode)||e))){if(o.splice(s,1),!(t=n.length&&p(o)))return Q.apply(i,n),i;break}}return(c||C(t,d))(n,e,!D,i,!e||gt.test(t)&&u(e.parentNode)||e),i},b.sortStable=z.split("").sort(X).join("")===z,b.detectDuplicates=!!j,L(),b.sortDetached=s(function(t){return 1&t.compareDocumentPosition(M.createElement("fieldset"))}),s(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),b.attributes&&s(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),s(function(t){return null==t.getAttribute("disabled")})||o(Z,function(t,e,i){var n;if(!i)return!0===t[e]?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null}),e}(t);at.find=ht,at.expr=ht.selectors,at.expr[":"]=at.expr.pseudos,at.uniqueSort=at.unique=ht.uniqueSort,at.text=ht.getText,at.isXMLDoc=ht.isXML,at.contains=ht.contains,at.escapeSelector=ht.escape;var pt=function(t,e,i){for(var n=[],s=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(s&&at(t).is(i))break;n.push(t)}return n},ft=function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i},mt=at.expr.match.needsContext,gt=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,vt=/^.[^:#\[\.,]*$/;at.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?at.find.matchesSelector(n,t)?[n]:[]:at.find.matches(t,at.grep(e,function(t){return 1===t.nodeType}))},at.fn.extend({find:function(t){var e,i,n=this.length,s=this;if("string"!=typeof t)return this.pushStack(at(t).filter(function(){for(e=0;e<n;e++)if(at.contains(s[e],this))return!0}));for(i=this.pushStack([]),e=0;e<n;e++)at.find(t,s[e],i);return n>1?at.uniqueSort(i):i},filter:function(t){return this.pushStack(o(this,t||[],!1))},not:function(t){return this.pushStack(o(this,t||[],!0))},is:function(t){return!!o(this,"string"==typeof t&&mt.test(t)?at(t):t||[],!1).length}});var yt,wt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(at.fn.init=function(t,e,i){var n,s;if(!t)return this;if(i=i||yt,"string"==typeof t){if(!(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:wt.exec(t))||!n[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof at?e[0]:e,at.merge(this,at.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:G,!0)),gt.test(n[1])&&at.isPlainObject(e))for(n in e)at.isFunction(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return(s=G.getElementById(n[2]))&&(this[0]=s,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):at.isFunction(t)?void 0!==i.ready?i.ready(t):t(at):at.makeArray(t,this)}).prototype=at.fn,yt=at(G);var bt=/^(?:parents|prev(?:Until|All))/,kt={children:!0,contents:!0,next:!0,prev:!0};at.fn.extend({has:function(t){var e=at(t,this),i=e.length;return this.filter(function(){for(var t=0;t<i;t++)if(at.contains(this,e[t]))return!0})},closest:function(t,e){var i,n=0,s=this.length,o=[],r="string"!=typeof t&&at(t);if(!mt.test(t))for(;n<s;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(r?r.index(i)>-1:1===i.nodeType&&at.find.matchesSelector(i,t))){o.push(i);break}return this.pushStack(o.length>1?at.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?tt.call(at(t),this[0]):tt.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(at.uniqueSort(at.merge(this.get(),at(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),at.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return pt(t,"parentNode")},parentsUntil:function(t,e,i){return pt(t,"parentNode",i)},next:function(t){return r(t,"nextSibling")},prev:function(t){return r(t,"previousSibling")},nextAll:function(t){return pt(t,"nextSibling")},prevAll:function(t){return pt(t,"previousSibling")},nextUntil:function(t,e,i){return pt(t,"nextSibling",i)},prevUntil:function(t,e,i){return pt(t,"previousSibling",i)},siblings:function(t){return ft((t.parentNode||{}).firstChild,t)},children:function(t){return ft(t.firstChild)},contents:function(t){return s(t,"iframe")?t.contentDocument:(s(t,"template")&&(t=t.content||t),at.merge([],t.childNodes))}},function(t,e){at.fn[t]=function(i,n){var s=at.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(s=at.filter(n,s)),this.length>1&&(kt[t]||at.uniqueSort(s),bt.test(t)&&s.reverse()),this.pushStack(s)}});var xt=/[^\x20\t\r\n\f]+/g;at.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return at.each(t.match(xt)||[],function(t,i){e[i]=!0}),e}(t):at.extend({},t);var e,i,n,s,o=[],r=[],a=-1,l=function(){for(s=s||t.once,n=e=!0;r.length;a=-1)for(i=r.shift();++a<o.length;)!1===o[a].apply(i[0],i[1])&&t.stopOnFalse&&(a=o.length,i=!1);t.memory||(i=!1),e=!1,s&&(o=i?[]:"")},c={add:function(){return o&&(i&&!e&&(a=o.length-1,r.push(i)),function e(i){at.each(i,function(i,n){at.isFunction(n)?t.unique&&c.has(n)||o.push(n):n&&n.length&&"string"!==at.type(n)&&e(n)})}(arguments),i&&!e&&l()),this},remove:function(){return at.each(arguments,function(t,e){for(var i;(i=at.inArray(e,o,i))>-1;)o.splice(i,1),i<=a&&a--}),this},has:function(t){return t?at.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return s=r=[],o=i="",this},disabled:function(){return!o},lock:function(){return s=r=[],i||e||(o=i=""),this},locked:function(){return!!s},fireWith:function(t,i){return s||(i=[t,(i=i||[]).slice?i.slice():i],r.push(i),e||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!n}};return c},at.extend({Deferred:function(e){var i=[["notify","progress",at.Callbacks("memory"),at.Callbacks("memory"),2],["resolve","done",at.Callbacks("once memory"),at.Callbacks("once memory"),0,"resolved"],["reject","fail",at.Callbacks("once memory"),at.Callbacks("once memory"),1,"rejected"]],n="pending",s={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return s.then(null,t)},pipe:function(){var t=arguments;return at.Deferred(function(e){at.each(i,function(i,n){var s=at.isFunction(t[n[4]])&&t[n[4]];o[n[1]](function(){var t=s&&s.apply(this,arguments);t&&at.isFunction(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[n[0]+"With"](this,s?[t]:arguments)})}),t=null}).promise()},then:function(e,n,s){function o(e,i,n,s){return function(){var c=this,d=arguments,u=function(){var t,u;if(!(e<r)){if((t=n.apply(c,d))===i.promise())throw new TypeError("Thenable self-resolution");u=t&&("object"==typeof t||"function"==typeof t)&&t.then,at.isFunction(u)?s?u.call(t,o(r,i,a,s),o(r,i,l,s)):(r++,u.call(t,o(r,i,a,s),o(r,i,l,s),o(r,i,a,i.notifyWith))):(n!==a&&(c=void 0,d=[t]),(s||i.resolveWith)(c,d))}},h=s?u:function(){try{u()}catch(t){at.Deferred.exceptionHook&&at.Deferred.exceptionHook(t,h.stackTrace),e+1>=r&&(n!==l&&(c=void 0,d=[t]),i.rejectWith(c,d))}};e?h():(at.Deferred.getStackHook&&(h.stackTrace=at.Deferred.getStackHook()),t.setTimeout(h))}}var r=0;return at.Deferred(function(t){i[0][3].add(o(0,t,at.isFunction(s)?s:a,t.notifyWith)),i[1][3].add(o(0,t,at.isFunction(e)?e:a)),i[2][3].add(o(0,t,at.isFunction(n)?n:l))}).promise()},promise:function(t){return null!=t?at.extend(t,s):s}},o={};return at.each(i,function(t,e){var r=e[2],a=e[5];s[e[1]]=r.add,a&&r.add(function(){n=a},i[3-t][2].disable,i[0][2].lock),r.add(e[3].fire),o[e[0]]=function(){return o[e[0]+"With"](this===o?void 0:this,arguments),this},o[e[0]+"With"]=r.fireWith}),s.promise(o),e&&e.call(o,o),o},when:function(t){var e=arguments.length,i=e,n=Array(i),s=K.call(arguments),o=at.Deferred(),r=function(t){return function(i){n[t]=this,s[t]=arguments.length>1?K.call(arguments):i,--e||o.resolveWith(n,s)}};if(e<=1&&(c(t,o.done(r(i)).resolve,o.reject,!e),"pending"===o.state()||at.isFunction(s[i]&&s[i].then)))return o.then();for(;i--;)c(s[i],r(i),o.reject);return o.promise()}});var Tt=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;at.Deferred.exceptionHook=function(e,i){t.console&&t.console.warn&&e&&Tt.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,i)},at.readyException=function(e){t.setTimeout(function(){throw e})};var St=at.Deferred();at.fn.ready=function(t){return St.then(t).catch(function(t){at.readyException(t)}),this},at.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--at.readyWait:at.isReady)||(at.isReady=!0,!0!==t&&--at.readyWait>0||St.resolveWith(G,[at]))}}),at.ready.then=St.then,"complete"===G.readyState||"loading"!==G.readyState&&!G.documentElement.doScroll?t.setTimeout(at.ready):(G.addEventListener("DOMContentLoaded",d),t.addEventListener("load",d));var Ct=function(t,e,i,n,s,o,r){var a=0,l=t.length,c=null==i;if("object"===at.type(i)){s=!0;for(a in i)Ct(t,e,a,i[a],!0,o,r)}else if(void 0!==n&&(s=!0,at.isFunction(n)||(r=!0),c&&(r?(e.call(t,n),e=null):(c=e,e=function(t,e,i){return c.call(at(t),i)})),e))for(;a<l;a++)e(t[a],i,r?n:n.call(t[a],a,e(t[a],i)));return s?t:c?e.call(t):l?e(t[0],i):o},$t=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};u.uid=1,u.prototype={cache:function(t){var e=t[this.expando];return e||(e={},$t(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var n,s=this.cache(t);if("string"==typeof e)s[at.camelCase(e)]=i;else for(n in e)s[at.camelCase(n)]=e[n];return s},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][at.camelCase(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n=t[this.expando];if(void 0!==n){if(void 0!==e){i=(e=Array.isArray(e)?e.map(at.camelCase):(e=at.camelCase(e))in n?[e]:e.match(xt)||[]).length;for(;i--;)delete n[e[i]]}(void 0===e||at.isEmptyObject(n))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!at.isEmptyObject(e)}};var At=new u,Et=new u,jt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Lt=/[A-Z]/g;at.extend({hasData:function(t){return Et.hasData(t)||At.hasData(t)},data:function(t,e,i){return Et.access(t,e,i)},removeData:function(t,e){Et.remove(t,e)},_data:function(t,e,i){return At.access(t,e,i)},_removeData:function(t,e){At.remove(t,e)}}),at.fn.extend({data:function(t,e){var i,n,s,o=this[0],r=o&&o.attributes;if(void 0===t){if(this.length&&(s=Et.get(o),1===o.nodeType&&!At.get(o,"hasDataAttrs"))){for(i=r.length;i--;)r[i]&&0===(n=r[i].name).indexOf("data-")&&(n=at.camelCase(n.slice(5)),h(o,n,s[n]));At.set(o,"hasDataAttrs",!0)}return s}return"object"==typeof t?this.each(function(){Et.set(this,t)}):Ct(this,function(e){var i;if(o&&void 0===e){if(void 0!==(i=Et.get(o,t)))return i;if(void 0!==(i=h(o,t)))return i}else this.each(function(){Et.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Et.remove(this,t)})}}),at.extend({queue:function(t,e,i){var n;if(t)return e=(e||"fx")+"queue",n=At.get(t,e),i&&(!n||Array.isArray(i)?n=At.access(t,e,at.makeArray(i)):n.push(i)),n||[]},dequeue:function(t,e){e=e||"fx";var i=at.queue(t,e),n=i.length,s=i.shift(),o=at._queueHooks(t,e);"inprogress"===s&&(s=i.shift(),n--),s&&("fx"===e&&i.unshift("inprogress"),delete o.stop,s.call(t,function(){at.dequeue(t,e)},o)),!n&&o&&o.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return At.get(t,i)||At.access(t,i,{empty:at.Callbacks("once memory").add(function(){At.remove(t,[e+"queue",i])})})}}),at.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?at.queue(this[0],t):void 0===e?this:this.each(function(){var i=at.queue(this,t,e);at._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&at.dequeue(this,t)})},dequeue:function(t){return this.each(function(){at.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,n=1,s=at.Deferred(),o=this,r=this.length,a=function(){--n||s.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";r--;)(i=At.get(o[r],t+"queueHooks"))&&i.empty&&(n++,i.empty.add(a));return a(),s.promise(e)}});var Mt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ot=new RegExp("^(?:([+-])=|)("+Mt+")([a-z%]*)$","i"),Dt=["Top","Right","Bottom","Left"],Nt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&at.contains(t.ownerDocument,t)&&"none"===at.css(t,"display")},Pt=function(t,e,i,n){var s,o,r={};for(o in e)r[o]=t.style[o],t.style[o]=e[o];s=i.apply(t,n||[]);for(o in e)t.style[o]=r[o];return s},Ht={};at.fn.extend({show:function(){return m(this,!0)},hide:function(){return m(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Nt(this)?at(this).show():at(this).hide()})}});var qt=/^(?:checkbox|radio)$/i,zt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ft=/^$|\/(?:java|ecma)script/i,It={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};It.optgroup=It.option,It.tbody=It.tfoot=It.colgroup=It.caption=It.thead,It.th=It.td;var Rt=/<|&#?\w+;/;!function(){var t=G.createDocumentFragment().appendChild(G.createElement("div")),e=G.createElement("input");e.setAttribute("type","radio"),e.setAttribute("checked","checked"),e.setAttribute("name","t"),t.appendChild(e),rt.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",rt.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Wt=G.documentElement,Bt=/^key/,_t=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Xt=/^([^.]*)(?:\.(.+)|)/;at.event={global:{},add:function(t,e,i,n,s){var o,r,a,l,c,d,u,h,p,f,m,g=At.get(t);if(g)for(i.handler&&(i=(o=i).handler,s=o.selector),s&&at.find.matchesSelector(Wt,s),i.guid||(i.guid=at.guid++),(l=g.events)||(l=g.events={}),(r=g.handle)||(r=g.handle=function(e){return void 0!==at&&at.event.triggered!==e.type?at.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(xt)||[""]).length;c--;)p=m=(a=Xt.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),p&&(u=at.event.special[p]||{},p=(s?u.delegateType:u.bindType)||p,u=at.event.special[p]||{},d=at.extend({type:p,origType:m,data:n,handler:i,guid:i.guid,selector:s,needsContext:s&&at.expr.match.needsContext.test(s),namespace:f.join(".")},o),(h=l[p])||((h=l[p]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(t,n,f,r)||t.addEventListener&&t.addEventListener(p,r)),u.add&&(u.add.call(t,d),d.handler.guid||(d.handler.guid=i.guid)),s?h.splice(h.delegateCount++,0,d):h.push(d),at.event.global[p]=!0)},remove:function(t,e,i,n,s){var o,r,a,l,c,d,u,h,p,f,m,g=At.hasData(t)&&At.get(t);if(g&&(l=g.events)){for(c=(e=(e||"").match(xt)||[""]).length;c--;)if(a=Xt.exec(e[c])||[],p=m=a[1],f=(a[2]||"").split(".").sort(),p){for(u=at.event.special[p]||{},h=l[p=(n?u.delegateType:u.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=o=h.length;o--;)d=h[o],!s&&m!==d.origType||i&&i.guid!==d.guid||a&&!a.test(d.namespace)||n&&n!==d.selector&&("**"!==n||!d.selector)||(h.splice(o,1),d.selector&&h.delegateCount--,u.remove&&u.remove.call(t,d));r&&!h.length&&(u.teardown&&!1!==u.teardown.call(t,f,g.handle)||at.removeEvent(t,p,g.handle),delete l[p])}else for(p in l)at.event.remove(t,p+e[c],i,n,!0);at.isEmptyObject(l)&&At.remove(t,"handle events")}},dispatch:function(t){var e,i,n,s,o,r,a=at.event.fix(t),l=new Array(arguments.length),c=(At.get(this,"events")||{})[a.type]||[],d=at.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,a)){for(r=at.event.handlers.call(this,a,c),e=0;(s=r[e++])&&!a.isPropagationStopped();)for(a.currentTarget=s.elem,i=0;(o=s.handlers[i++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(n=((at.event.special[o.origType]||{}).handle||o.handler).apply(s.elem,l))&&!1===(a.result=n)&&(a.preventDefault(),a.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,a),a.result}},handlers:function(t,e){var i,n,s,o,r,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(o=[],r={},i=0;i<l;i++)void 0===r[s=(n=e[i]).selector+" "]&&(r[s]=n.needsContext?at(s,this).index(c)>-1:at.find(s,this,null,[c]).length),r[s]&&o.push(n);o.length&&a.push({elem:c,handlers:o})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(at.Event.prototype,t,{enumerable:!0,configurable:!0,get:at.isFunction(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[at.expando]?t:new at.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==k()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===k()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&s(this,"input"))return this.click(),!1},_default:function(t){return s(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},at.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},at.Event=function(t,e){if(!(this instanceof at.Event))return new at.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?w:b,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&at.extend(this,e),this.timeStamp=t&&t.timeStamp||at.now(),this[at.expando]=!0},at.Event.prototype={constructor:at.Event,isDefaultPrevented:b,isPropagationStopped:b,isImmediatePropagationStopped:b,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=w,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=w,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=w,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},at.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Bt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&_t.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},at.event.addProp),at.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){at.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=t.relatedTarget,s=t.handleObj;return n&&(n===this||at.contains(this,n))||(t.type=s.origType,i=s.handler.apply(this,arguments),t.type=e),i}}}),at.fn.extend({on:function(t,e,i,n){return x(this,t,e,i,n)},one:function(t,e,i,n){return x(this,t,e,i,n,1)},off:function(t,e,i){var n,s;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,at(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(s in t)this.off(s,e,t[s]);return this}return!1!==e&&"function"!=typeof e||(i=e,e=void 0),!1===i&&(i=b),this.each(function(){at.event.remove(this,t,i,e)})}});var Ut=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Yt=/<script|<style|<link/i,Vt=/checked\s*(?:[^=]|=\s*.checked.)/i,Gt=/^true\/(.*)/,Qt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;at.extend({htmlPrefilter:function(t){return t.replace(Ut,"<$1></$2>")},clone:function(t,e,i){var n,s,o,r,a=t.cloneNode(!0),l=at.contains(t.ownerDocument,t);if(!(rt.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||at.isXMLDoc(t)))for(r=g(a),n=0,s=(o=g(t)).length;n<s;n++)A(o[n],r[n]);if(e)if(i)for(o=o||g(t),r=r||g(a),n=0,s=o.length;n<s;n++)$(o[n],r[n]);else $(t,a);return(r=g(a,"script")).length>0&&v(r,!l&&g(t,"script")),a},cleanData:function(t){for(var e,i,n,s=at.event.special,o=0;void 0!==(i=t[o]);o++)if($t(i)){if(e=i[At.expando]){if(e.events)for(n in e.events)s[n]?at.event.remove(i,n):at.removeEvent(i,n,e.handle);i[At.expando]=void 0}i[Et.expando]&&(i[Et.expando]=void 0)}}}),at.fn.extend({detach:function(t){return j(this,t,!0)},remove:function(t){return j(this,t)},text:function(t){return Ct(this,function(t){return void 0===t?at.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return E(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){T(this,t).appendChild(t)}})},prepend:function(){return E(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=T(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return E(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return E(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(at.cleanData(g(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return at.clone(this,t,e)})},html:function(t){return Ct(this,function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Yt.test(t)&&!It[(zt.exec(t)||["",""])[1].toLowerCase()]){t=at.htmlPrefilter(t);try{for(;i<n;i++)1===(e=this[i]||{}).nodeType&&(at.cleanData(g(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return E(this,arguments,function(e){var i=this.parentNode;at.inArray(this,t)<0&&(at.cleanData(g(this)),i&&i.replaceChild(e,this))},t)}}),at.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){at.fn[t]=function(t){for(var i,n=[],s=at(t),o=s.length-1,r=0;r<=o;r++)i=r===o?this:this.clone(!0),at(s[r])[e](i),Z.apply(n,i.get());return this.pushStack(n)}});var Kt=/^margin/,Jt=new RegExp("^("+Mt+")(?!px)[a-z%]+$","i"),Zt=function(e){var i=e.ownerDocument.defaultView;return i&&i.opener||(i=t),i.getComputedStyle(e)};!function(){function e(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Wt.appendChild(r);var e=t.getComputedStyle(a);i="1%"!==e.top,o="2px"===e.marginLeft,n="4px"===e.width,a.style.marginRight="50%",s="4px"===e.marginRight,Wt.removeChild(r),a=null}}var i,n,s,o,r=G.createElement("div"),a=G.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",rt.clearCloneStyle="content-box"===a.style.backgroundClip,r.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",r.appendChild(a),at.extend(rt,{pixelPosition:function(){return e(),i},boxSizingReliable:function(){return e(),n},pixelMarginRight:function(){return e(),s},reliableMarginLeft:function(){return e(),o}}))}();var te=/^(none|table(?!-c[ea]).+)/,ee=/^--/,ie={position:"absolute",visibility:"hidden",display:"block"},ne={letterSpacing:"0",fontWeight:"400"},se=["Webkit","Moz","ms"],oe=G.createElement("div").style;at.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=L(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var s,o,r,a=at.camelCase(e),l=ee.test(e),c=t.style;if(l||(e=O(a)),r=at.cssHooks[e]||at.cssHooks[a],void 0===i)return r&&"get"in r&&void 0!==(s=r.get(t,!1,n))?s:c[e];"string"==(o=typeof i)&&(s=Ot.exec(i))&&s[1]&&(i=p(t,e,s),o="number"),null!=i&&i==i&&("number"===o&&(i+=s&&s[3]||(at.cssNumber[a]?"":"px")),rt.clearCloneStyle||""!==i||0!==e.indexOf("background")||(c[e]="inherit"),r&&"set"in r&&void 0===(i=r.set(t,i,n))||(l?c.setProperty(e,i):c[e]=i))}},css:function(t,e,i,n){var s,o,r,a=at.camelCase(e);return ee.test(e)||(e=O(a)),(r=at.cssHooks[e]||at.cssHooks[a])&&"get"in r&&(s=r.get(t,!0,i)),void 0===s&&(s=L(t,e,n)),"normal"===s&&e in ne&&(s=ne[e]),""===i||i?(o=parseFloat(s),!0===i||isFinite(o)?o||0:s):s}}),at.each(["height","width"],function(t,e){at.cssHooks[e]={get:function(t,i,n){if(i)return!te.test(at.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?P(t,e,n):Pt(t,ie,function(){return P(t,e,n)})},set:function(t,i,n){var s,o=n&&Zt(t),r=n&&N(t,e,n,"border-box"===at.css(t,"boxSizing",!1,o),o);return r&&(s=Ot.exec(i))&&"px"!==(s[3]||"px")&&(t.style[e]=i,i=at.css(t,e)),D(0,i,r)}}}),at.cssHooks.marginLeft=M(rt.reliableMarginLeft,function(t,e){if(e)return(parseFloat(L(t,"marginLeft"))||t.getBoundingClientRect().left-Pt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),at.each({margin:"",padding:"",border:"Width"},function(t,e){at.cssHooks[t+e]={expand:function(i){for(var n=0,s={},o="string"==typeof i?i.split(" "):[i];n<4;n++)s[t+Dt[n]+e]=o[n]||o[n-2]||o[0];return s}},Kt.test(t)||(at.cssHooks[t+e].set=D)}),at.fn.extend({css:function(t,e){return Ct(this,function(t,e,i){var n,s,o={},r=0;if(Array.isArray(e)){for(n=Zt(t),s=e.length;r<s;r++)o[e[r]]=at.css(t,e[r],!1,n);return o}return void 0!==i?at.style(t,e,i):at.css(t,e)},t,e,arguments.length>1)}}),at.Tween=H,(H.prototype={constructor:H,init:function(t,e,i,n,s,o){this.elem=t,this.prop=i,this.easing=s||at.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=o||(at.cssNumber[i]?"":"px")},cur:function(){var t=H.propHooks[this.prop];return t&&t.get?t.get(this):H.propHooks._default.get(this)},run:function(t){var e,i=H.propHooks[this.prop];return this.options.duration?this.pos=e=at.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):H.propHooks._default.set(this),this}}).init.prototype=H.prototype,(H.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=at.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){at.fx.step[t.prop]?at.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[at.cssProps[t.prop]]&&!at.cssHooks[t.prop]?t.elem[t.prop]=t.now:at.style(t.elem,t.prop,t.now+t.unit)}}}).scrollTop=H.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},at.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},at.fx=H.prototype.init,at.fx.step={};var re,ae,le=/^(?:toggle|show|hide)$/,ce=/queueHooks$/;at.Animation=at.extend(R,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return p(i.elem,t,Ot.exec(e),i),i}]},tweener:function(t,e){at.isFunction(t)?(e=t,t=["*"]):t=t.match(xt);for(var i,n=0,s=t.length;n<s;n++)i=t[n],R.tweeners[i]=R.tweeners[i]||[],R.tweeners[i].unshift(e)},prefilters:[function(t,e,i){var n,s,o,r,a,l,c,d,u="width"in e||"height"in e,h=this,p={},f=t.style,g=t.nodeType&&Nt(t),v=At.get(t,"fxshow");i.queue||(null==(r=at._queueHooks(t,"fx")).unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,h.always(function(){h.always(function(){r.unqueued--,at.queue(t,"fx").length||r.empty.fire()})}));for(n in e)if(s=e[n],le.test(s)){if(delete e[n],o=o||"toggle"===s,s===(g?"hide":"show")){if("show"!==s||!v||void 0===v[n])continue;g=!0}p[n]=v&&v[n]||at.style(t,n)}if((l=!at.isEmptyObject(e))||!at.isEmptyObject(p)){u&&1===t.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=v&&v.display)&&(c=At.get(t,"display")),"none"===(d=at.css(t,"display"))&&(c?d=c:(m([t],!0),c=t.style.display||c,d=at.css(t,"display"),m([t]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===at.css(t,"float")&&(l||(h.done(function(){f.display=c}),null==c&&(d=f.display,c="none"===d?"":d)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",h.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]})),l=!1;for(n in p)l||(v?"hidden"in v&&(g=v.hidden):v=At.access(t,"fxshow",{display:c}),o&&(v.hidden=!g),g&&m([t],!0),h.done(function(){g||m([t]),At.remove(t,"fxshow");for(n in p)at.style(t,n,p[n])})),l=I(g?v[n]:0,n,h),n in v||(v[n]=l.start,g&&(l.end=l.start,l.start=0))}}],prefilter:function(t,e){e?R.prefilters.unshift(t):R.prefilters.push(t)}}),at.speed=function(t,e,i){var n=t&&"object"==typeof t?at.extend({},t):{complete:i||!i&&e||at.isFunction(t)&&t,duration:t,easing:i&&e||e&&!at.isFunction(e)&&e};return at.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in at.fx.speeds?n.duration=at.fx.speeds[n.duration]:n.duration=at.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){at.isFunction(n.old)&&n.old.call(this),n.queue&&at.dequeue(this,n.queue)},n},at.fn.extend({fadeTo:function(t,e,i,n){return this.filter(Nt).css("opacity",0).show().end().animate({opacity:e},t,i,n)},animate:function(t,e,i,n){var s=at.isEmptyObject(t),o=at.speed(e,i,n),r=function(){var e=R(this,at.extend({},t),o);(s||At.get(this,"finish"))&&e.stop(!0)};return r.finish=r,s||!1===o.queue?this.each(r):this.queue(o.queue,r)},stop:function(t,e,i){var n=function(t){var e=t.stop;delete t.stop,e(i)};return"string"!=typeof t&&(i=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,s=null!=t&&t+"queueHooks",o=at.timers,r=At.get(this);if(s)r[s]&&r[s].stop&&n(r[s]);else for(s in r)r[s]&&r[s].stop&&ce.test(s)&&n(r[s]);for(s=o.length;s--;)o[s].elem!==this||null!=t&&o[s].queue!==t||(o[s].anim.stop(i),e=!1,o.splice(s,1));!e&&i||at.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,i=At.get(this),n=i[t+"queue"],s=i[t+"queueHooks"],o=at.timers,r=n?n.length:0;for(i.finish=!0,at.queue(this,t,[]),s&&s.stop&&s.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<r;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete i.finish})}}),at.each(["toggle","show","hide"],function(t,e){var i=at.fn[e];at.fn[e]=function(t,n,s){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(F(e,!0),t,n,s)}}),at.each({slideDown:F("show"),slideUp:F("hide"),slideToggle:F("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){at.fn[t]=function(t,i,n){return this.animate(e,t,i,n)}}),at.timers=[],at.fx.tick=function(){var t,e=0,i=at.timers;for(re=at.now();e<i.length;e++)(t=i[e])()||i[e]!==t||i.splice(e--,1);i.length||at.fx.stop(),re=void 0},at.fx.timer=function(t){at.timers.push(t),at.fx.start()},at.fx.interval=13,at.fx.start=function(){ae||(ae=!0,q())},at.fx.stop=function(){ae=null},at.fx.speeds={slow:600,fast:200,_default:400},at.fn.delay=function(e,i){return e=at.fx?at.fx.speeds[e]||e:e,i=i||"fx",this.queue(i,function(i,n){var s=t.setTimeout(i,e);n.stop=function(){t.clearTimeout(s)}})},function(){var t=G.createElement("input"),e=G.createElement("select").appendChild(G.createElement("option"));t.type="checkbox",rt.checkOn=""!==t.value,rt.optSelected=e.selected,(t=G.createElement("input")).value="t",t.type="radio",rt.radioValue="t"===t.value}();var de,ue=at.expr.attrHandle;at.fn.extend({attr:function(t,e){return Ct(this,at.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){at.removeAttr(this,t)})}}),at.extend({attr:function(t,e,i){var n,s,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?at.prop(t,e,i):(1===o&&at.isXMLDoc(t)||(s=at.attrHooks[e.toLowerCase()]||(at.expr.match.bool.test(e)?de:void 0)),void 0!==i?null===i?void at.removeAttr(t,e):s&&"set"in s&&void 0!==(n=s.set(t,i,e))?n:(t.setAttribute(e,i+""),i):s&&"get"in s&&null!==(n=s.get(t,e))?n:null==(n=at.find.attr(t,e))?void 0:n)},attrHooks:{type:{set:function(t,e){if(!rt.radioValue&&"radio"===e&&s(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,n=0,s=e&&e.match(xt);if(s&&1===t.nodeType)for(;i=s[n++];)t.removeAttribute(i)}}),de={set:function(t,e,i){return!1===e?at.removeAttr(t,i):t.setAttribute(i,i),i}},at.each(at.expr.match.bool.source.match(/\w+/g),function(t,e){var i=ue[e]||at.find.attr;ue[e]=function(t,e,n){var s,o,r=e.toLowerCase();return n||(o=ue[r],ue[r]=s,s=null!=i(t,e,n)?r:null,ue[r]=o),s}});var he=/^(?:input|select|textarea|button)$/i,pe=/^(?:a|area)$/i;at.fn.extend({prop:function(t,e){return Ct(this,at.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[at.propFix[t]||t]})}}),at.extend({prop:function(t,e,i){var n,s,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&at.isXMLDoc(t)||(e=at.propFix[e]||e,s=at.propHooks[e]),void 0!==i?s&&"set"in s&&void 0!==(n=s.set(t,i,e))?n:t[e]=i:s&&"get"in s&&null!==(n=s.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=at.find.attr(t,"tabindex");return e?parseInt(e,10):he.test(t.nodeName)||pe.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),rt.optSelected||(at.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),at.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){at.propFix[this.toLowerCase()]=this}),at.fn.extend({addClass:function(t){var e,i,n,s,o,r,a,l=0;if(at.isFunction(t))return this.each(function(e){at(this).addClass(t.call(this,e,B(this)))});if("string"==typeof t&&t)for(e=t.match(xt)||[];i=this[l++];)if(s=B(i),n=1===i.nodeType&&" "+W(s)+" "){for(r=0;o=e[r++];)n.indexOf(" "+o+" ")<0&&(n+=o+" ");s!==(a=W(n))&&i.setAttribute("class",a)}return this},removeClass:function(t){var e,i,n,s,o,r,a,l=0;if(at.isFunction(t))return this.each(function(e){at(this).removeClass(t.call(this,e,B(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(xt)||[];i=this[l++];)if(s=B(i),n=1===i.nodeType&&" "+W(s)+" "){for(r=0;o=e[r++];)for(;n.indexOf(" "+o+" ")>-1;)n=n.replace(" "+o+" "," ");s!==(a=W(n))&&i.setAttribute("class",a)}return this},toggleClass:function(t,e){var i=typeof t;return"boolean"==typeof e&&"string"===i?e?this.addClass(t):this.removeClass(t):at.isFunction(t)?this.each(function(i){at(this).toggleClass(t.call(this,i,B(this),e),e)}):this.each(function(){var e,n,s,o;if("string"===i)for(n=0,s=at(this),o=t.match(xt)||[];e=o[n++];)s.hasClass(e)?s.removeClass(e):s.addClass(e);else void 0!==t&&"boolean"!==i||((e=B(this))&&At.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":At.get(this,"__className__")||""))})},hasClass:function(t){var e,i,n=0;for(e=" "+t+" ";i=this[n++];)if(1===i.nodeType&&(" "+W(B(i))+" ").indexOf(e)>-1)return!0;return!1}});var fe=/\r/g;at.fn.extend({val:function(t){var e,i,n,s=this[0];{if(arguments.length)return n=at.isFunction(t),this.each(function(i){var s;1===this.nodeType&&(null==(s=n?t.call(this,i,at(this).val()):t)?s="":"number"==typeof s?s+="":Array.isArray(s)&&(s=at.map(s,function(t){return null==t?"":t+""})),(e=at.valHooks[this.type]||at.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,s,"value")||(this.value=s))});if(s)return(e=at.valHooks[s.type]||at.valHooks[s.nodeName.toLowerCase()])&&"get"in e&&void 0!==(i=e.get(s,"value"))?i:"string"==typeof(i=s.value)?i.replace(fe,""):null==i?"":i}}}),at.extend({valHooks:{option:{get:function(t){var e=at.find.attr(t,"value");return null!=e?e:W(at.text(t))}},select:{get:function(t){var e,i,n,o=t.options,r=t.selectedIndex,a="select-one"===t.type,l=a?null:[],c=a?r+1:o.length;for(n=r<0?c:a?r:0;n<c;n++)if(((i=o[n]).selected||n===r)&&!i.disabled&&(!i.parentNode.disabled||!s(i.parentNode,"optgroup"))){if(e=at(i).val(),a)return e;l.push(e)}return l},set:function(t,e){for(var i,n,s=t.options,o=at.makeArray(e),r=s.length;r--;)((n=s[r]).selected=at.inArray(at.valHooks.option.get(n),o)>-1)&&(i=!0);return i||(t.selectedIndex=-1),o}}}}),at.each(["radio","checkbox"],function(){at.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=at.inArray(at(t).val(),e)>-1}},rt.checkOn||(at.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var me=/^(?:focusinfocus|focusoutblur)$/;at.extend(at.event,{trigger:function(e,i,n,s){var o,r,a,l,c,d,u,h=[n||G],p=nt.call(e,"type")?e.type:e,f=nt.call(e,"namespace")?e.namespace.split("."):[];if(r=a=n=n||G,3!==n.nodeType&&8!==n.nodeType&&!me.test(p+at.event.triggered)&&(p.indexOf(".")>-1&&(p=(f=p.split(".")).shift(),f.sort()),c=p.indexOf(":")<0&&"on"+p,e=e[at.expando]?e:new at.Event(p,"object"==typeof e&&e),e.isTrigger=s?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),i=null==i?[e]:at.makeArray(i,[e]),u=at.event.special[p]||{},s||!u.trigger||!1!==u.trigger.apply(n,i))){if(!s&&!u.noBubble&&!at.isWindow(n)){for(l=u.delegateType||p,me.test(l+p)||(r=r.parentNode);r;r=r.parentNode)h.push(r),a=r;a===(n.ownerDocument||G)&&h.push(a.defaultView||a.parentWindow||t)}for(o=0;(r=h[o++])&&!e.isPropagationStopped();)e.type=o>1?l:u.bindType||p,(d=(At.get(r,"events")||{})[e.type]&&At.get(r,"handle"))&&d.apply(r,i),(d=c&&r[c])&&d.apply&&$t(r)&&(e.result=d.apply(r,i),!1===e.result&&e.preventDefault());return e.type=p,s||e.isDefaultPrevented()||u._default&&!1!==u._default.apply(h.pop(),i)||!$t(n)||c&&at.isFunction(n[p])&&!at.isWindow(n)&&((a=n[c])&&(n[c]=null),at.event.triggered=p,n[p](),at.event.triggered=void 0,a&&(n[c]=a)),e.result}},simulate:function(t,e,i){var n=at.extend(new at.Event,i,{type:t,isSimulated:!0});at.event.trigger(n,null,e)}}),at.fn.extend({trigger:function(t,e){return this.each(function(){at.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];if(i)return at.event.trigger(t,e,i,!0)}}),at.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){at.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}),at.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),rt.focusin="onfocusin"in t,rt.focusin||at.each({focus:"focusin",blur:"focusout"},function(t,e){var i=function(t){at.event.simulate(e,t.target,at.event.fix(t))};at.event.special[e]={setup:function(){var n=this.ownerDocument||this,s=At.access(n,e);s||n.addEventListener(t,i,!0),At.access(n,e,(s||0)+1)},teardown:function(){var n=this.ownerDocument||this,s=At.access(n,e)-1;s?At.access(n,e,s):(n.removeEventListener(t,i,!0),At.remove(n,e))}}});var ge=t.location,ve=at.now(),ye=/\?/;at.parseXML=function(e){var i;if(!e||"string"!=typeof e)return null;try{i=(new t.DOMParser).parseFromString(e,"text/xml")}catch(t){i=void 0}return i&&!i.getElementsByTagName("parsererror").length||at.error("Invalid XML: "+e),i};var we=/\[\]$/,be=/\r?\n/g,ke=/^(?:submit|button|image|reset|file)$/i,xe=/^(?:input|select|textarea|keygen)/i;at.param=function(t,e){var i,n=[],s=function(t,e){var i=at.isFunction(e)?e():e;n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)};if(Array.isArray(t)||t.jquery&&!at.isPlainObject(t))at.each(t,function(){s(this.name,this.value)});else for(i in t)_(i,t[i],e,s);return n.join("&")},at.fn.extend({serialize:function(){return at.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=at.prop(this,"elements");return t?at.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!at(this).is(":disabled")&&xe.test(this.nodeName)&&!ke.test(t)&&(this.checked||!qt.test(t))}).map(function(t,e){var i=at(this).val();return null==i?null:Array.isArray(i)?at.map(i,function(t){return{name:e.name,value:t.replace(be,"\r\n")}}):{name:e.name,value:i.replace(be,"\r\n")}}).get()}});var Te=/%20/g,Se=/#.*$/,Ce=/([?&])_=[^&]*/,$e=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ae=/^(?:GET|HEAD)$/,Ee=/^\/\//,je={},Le={},Me="*/".concat("*"),Oe=G.createElement("a");Oe.href=ge.href,at.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ge.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(ge.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Me,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":at.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Y(Y(t,at.ajaxSettings),e):Y(at.ajaxSettings,t)},ajaxPrefilter:X(je),ajaxTransport:X(Le),ajax:function(e,i){function n(e,i,n,a){var c,h,p,b,k,x=i;d||(d=!0,l&&t.clearTimeout(l),s=void 0,r=a||"",T.readyState=e>0?4:0,c=e>=200&&e<300||304===e,n&&(b=function(t,e,i){for(var n,s,o,r,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=t.mimeType||e.getResponseHeader("Content-Type"));if(n)for(s in a)if(a[s]&&a[s].test(n)){l.unshift(s);break}if(l[0]in i)o=l[0];else{for(s in i){if(!l[0]||t.converters[s+" "+l[0]]){o=s;break}r||(r=s)}o=o||r}if(o)return o!==l[0]&&l.unshift(o),i[o]}(f,T,n)),b=function(t,e,i,n){var s,o,r,a,l,c={},d=t.dataTypes.slice();if(d[1])for(r in t.converters)c[r.toLowerCase()]=t.converters[r];for(o=d.shift();o;)if(t.responseFields[o]&&(i[t.responseFields[o]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=d.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(r=c[l+" "+o]||c["* "+o]))for(s in c)if((a=s.split(" "))[1]===o&&(r=c[l+" "+a[0]]||c["* "+a[0]])){!0===r?r=c[s]:!0!==c[s]&&(o=a[0],d.unshift(a[1]));break}if(!0!==r)if(r&&t.throws)e=r(e);else try{e=r(e)}catch(t){return{state:"parsererror",error:r?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}(f,b,T,c),c?(f.ifModified&&((k=T.getResponseHeader("Last-Modified"))&&(at.lastModified[o]=k),(k=T.getResponseHeader("etag"))&&(at.etag[o]=k)),204===e||"HEAD"===f.type?x="nocontent":304===e?x="notmodified":(x=b.state,h=b.data,c=!(p=b.error))):(p=x,!e&&x||(x="error",e<0&&(e=0))),T.status=e,T.statusText=(i||x)+"",c?v.resolveWith(m,[h,x,T]):v.rejectWith(m,[T,x,p]),T.statusCode(w),w=void 0,u&&g.trigger(c?"ajaxSuccess":"ajaxError",[T,f,c?h:p]),y.fireWith(m,[T,x]),u&&(g.trigger("ajaxComplete",[T,f]),--at.active||at.event.trigger("ajaxStop")))}"object"==typeof e&&(i=e,e=void 0),i=i||{};var s,o,r,a,l,c,d,u,h,p,f=at.ajaxSetup({},i),m=f.context||f,g=f.context&&(m.nodeType||m.jquery)?at(m):at.event,v=at.Deferred(),y=at.Callbacks("once memory"),w=f.statusCode||{},b={},k={},x="canceled",T={readyState:0,getResponseHeader:function(t){var e;if(d){if(!a)for(a={};e=$e.exec(r);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return d?r:null},setRequestHeader:function(t,e){return null==d&&(t=k[t.toLowerCase()]=k[t.toLowerCase()]||t,b[t]=e),this},overrideMimeType:function(t){return null==d&&(f.mimeType=t),this},statusCode:function(t){var e;if(t)if(d)T.always(t[T.status]);else for(e in t)w[e]=[w[e],t[e]];return this},abort:function(t){var e=t||x;return s&&s.abort(e),n(0,e),this}};if(v.promise(T),f.url=((e||f.url||ge.href)+"").replace(Ee,ge.protocol+"//"),f.type=i.method||i.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(xt)||[""],null==f.crossDomain){c=G.createElement("a");try{c.href=f.url,c.href=c.href,f.crossDomain=Oe.protocol+"//"+Oe.host!=c.protocol+"//"+c.host}catch(t){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=at.param(f.data,f.traditional)),U(je,f,i,T),d)return T;(u=at.event&&f.global)&&0==at.active++&&at.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Ae.test(f.type),o=f.url.replace(Se,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Te,"+")):(p=f.url.slice(o.length),f.data&&(o+=(ye.test(o)?"&":"?")+f.data,delete f.data),!1===f.cache&&(o=o.replace(Ce,"$1"),p=(ye.test(o)?"&":"?")+"_="+ve+++p),f.url=o+p),f.ifModified&&(at.lastModified[o]&&T.setRequestHeader("If-Modified-Since",at.lastModified[o]),at.etag[o]&&T.setRequestHeader("If-None-Match",at.etag[o])),(f.data&&f.hasContent&&!1!==f.contentType||i.contentType)&&T.setRequestHeader("Content-Type",f.contentType),T.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Me+"; q=0.01":""):f.accepts["*"]);for(h in f.headers)T.setRequestHeader(h,f.headers[h]);if(f.beforeSend&&(!1===f.beforeSend.call(m,T,f)||d))return T.abort();if(x="abort",y.add(f.complete),T.done(f.success),T.fail(f.error),s=U(Le,f,i,T)){if(T.readyState=1,u&&g.trigger("ajaxSend",[T,f]),d)return T;f.async&&f.timeout>0&&(l=t.setTimeout(function(){T.abort("timeout")},f.timeout));try{d=!1,s.send(b,n)}catch(t){if(d)throw t;n(-1,t)}}else n(-1,"No Transport");return T},getJSON:function(t,e,i){return at.get(t,e,i,"json")},getScript:function(t,e){return at.get(t,void 0,e,"script")}}),at.each(["get","post"],function(t,e){at[e]=function(t,i,n,s){return at.isFunction(i)&&(s=s||n,n=i,i=void 0),at.ajax(at.extend({url:t,type:e,dataType:s,data:i,success:n},at.isPlainObject(t)&&t))}}),at._evalUrl=function(t){return at.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},at.fn.extend({wrapAll:function(t){var e;return this[0]&&(at.isFunction(t)&&(t=t.call(this[0])),e=at(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return at.isFunction(t)?this.each(function(e){at(this).wrapInner(t.call(this,e))}):this.each(function(){var e=at(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)})},wrap:function(t){var e=at.isFunction(t);return this.each(function(i){at(this).wrapAll(e?t.call(this,i):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){at(this).replaceWith(this.childNodes)}),this}}),at.expr.pseudos.hidden=function(t){return!at.expr.pseudos.visible(t)},at.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},at.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(t){}};var De={0:200,1223:204},Ne=at.ajaxSettings.xhr();rt.cors=!!Ne&&"withCredentials"in Ne,rt.ajax=Ne=!!Ne,at.ajaxTransport(function(e){var i,n;if(rt.cors||Ne&&!e.crossDomain)return{send:function(s,o){var r,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(r in e.xhrFields)a[r]=e.xhrFields[r];e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||s["X-Requested-With"]||(s["X-Requested-With"]="XMLHttpRequest");for(r in s)a.setRequestHeader(r,s[r]);i=function(t){return function(){i&&(i=n=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(De[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=i(),n=a.onerror=i("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&t.setTimeout(function(){i&&n()})},i=i("abort");try{a.send(e.hasContent&&e.data||null)}catch(t){if(i)throw t}},abort:function(){i&&i()}}}),at.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),at.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return at.globalEval(t),t}}}),at.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),at.ajaxTransport("script",function(t){if(t.crossDomain){var e,i;return{send:function(n,s){e=at("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",i=function(t){e.remove(),i=null,t&&s("error"===t.type?404:200,t.type)}),G.head.appendChild(e[0])},abort:function(){i&&i()}}}});var Pe=[],He=/(=)\?(?=&|$)|\?\?/;at.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Pe.pop()||at.expando+"_"+ve++;return this[t]=!0,t}}),at.ajaxPrefilter("json jsonp",function(e,i,n){var s,o,r,a=!1!==e.jsonp&&(He.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&He.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return s=e.jsonpCallback=at.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(He,"$1"+s):!1!==e.jsonp&&(e.url+=(ye.test(e.url)?"&":"?")+e.jsonp+"="+s),e.converters["script json"]=function(){return r||at.error(s+" was not called"),r[0]},e.dataTypes[0]="json",o=t[s],t[s]=function(){r=arguments},n.always(function(){void 0===o?at(t).removeProp(s):t[s]=o,e[s]&&(e.jsonpCallback=i.jsonpCallback,Pe.push(s)),r&&at.isFunction(o)&&o(r[0]),r=o=void 0}),"script"}),rt.createHTMLDocument=function(){var t=G.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),at.parseHTML=function(t,e,i){if("string"!=typeof t)return[];"boolean"==typeof e&&(i=e,e=!1);var n,s,o;return e||(rt.createHTMLDocument?((n=(e=G.implementation.createHTMLDocument("")).createElement("base")).href=G.location.href,e.head.appendChild(n)):e=G),s=gt.exec(t),o=!i&&[],s?[e.createElement(s[1])]:(s=y([t],e,o),o&&o.length&&at(o).remove(),at.merge([],s.childNodes))},at.fn.load=function(t,e,i){var n,s,o,r=this,a=t.indexOf(" ");return a>-1&&(n=W(t.slice(a)),t=t.slice(0,a)),at.isFunction(e)?(i=e,e=void 0):e&&"object"==typeof e&&(s="POST"),r.length>0&&at.ajax({url:t,type:s||"GET",dataType:"html",data:e}).done(function(t){o=arguments,r.html(n?at("<div>").append(at.parseHTML(t)).find(n):t)}).always(i&&function(t,e){r.each(function(){i.apply(this,o||[t.responseText,e,t])})}),this},at.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){at.fn[e]=function(t){return this.on(e,t)}}),at.expr.pseudos.animated=function(t){return at.grep(at.timers,function(e){return t===e.elem}).length},at.offset={setOffset:function(t,e,i){var n,s,o,r,a,l,c=at.css(t,"position"),d=at(t),u={};"static"===c&&(t.style.position="relative"),a=d.offset(),o=at.css(t,"top"),l=at.css(t,"left"),("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1?(r=(n=d.position()).top,s=n.left):(r=parseFloat(o)||0,s=parseFloat(l)||0),at.isFunction(e)&&(e=e.call(t,i,at.extend({},a))),null!=e.top&&(u.top=e.top-a.top+r),null!=e.left&&(u.left=e.left-a.left+s),"using"in e?e.using.call(t,u):d.css(u)}},at.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){at.offset.setOffset(this,t,e)});var e,i,n,s,o=this[0];if(o)return o.getClientRects().length?(n=o.getBoundingClientRect(),e=o.ownerDocument,i=e.documentElement,s=e.defaultView,{top:n.top+s.pageYOffset-i.clientTop,left:n.left+s.pageXOffset-i.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var t,e,i=this[0],n={top:0,left:0};return"fixed"===at.css(i,"position")?e=i.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),s(t[0],"html")||(n=t.offset()),n={top:n.top+at.css(t[0],"borderTopWidth",!0),left:n.left+at.css(t[0],"borderLeftWidth",!0)}),{top:e.top-n.top-at.css(i,"marginTop",!0),left:e.left-n.left-at.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===at.css(t,"position");)t=t.offsetParent;return t||Wt})}}),at.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var i="pageYOffset"===e;at.fn[t]=function(n){return Ct(this,function(t,n,s){var o;if(at.isWindow(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===s)return o?o[e]:t[n];o?o.scrollTo(i?o.pageXOffset:s,i?s:o.pageYOffset):t[n]=s},t,n,arguments.length)}}),at.each(["top","left"],function(t,e){at.cssHooks[e]=M(rt.pixelPosition,function(t,i){if(i)return i=L(t,e),Jt.test(i)?at(t).position()[e]+"px":i})}),at.each({Height:"height",Width:"width"},function(t,e){at.each({padding:"inner"+t,content:e,"":"outer"+t},function(i,n){at.fn[n]=function(s,o){var r=arguments.length&&(i||"boolean"!=typeof s),a=i||(!0===s||!0===o?"margin":"border");return Ct(this,function(e,i,s){var o;return at.isWindow(e)?0===n.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===s?at.css(e,i,a):at.style(e,i,s,a)},e,r?s:void 0,r)}})}),at.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,n){return this.on(e,t,i,n)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)}}),at.holdReady=function(t){t?at.readyWait++:at.ready(!0)},at.isArray=Array.isArray,at.parseJSON=JSON.parse,at.nodeName=s,"function"==typeof define&&define.amd&&define("jquery",[],function(){return at});var qe=t.jQuery,ze=t.$;return at.noConflict=function(e){return t.$===at&&(t.$=ze),e&&t.jQuery===at&&(t.jQuery=qe),at},e||(t.jQuery=t.$=at),at}),function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("whatInput",[],e):"object"==typeof exports?exports.whatInput=e():t.whatInput=e()}(this,function(){return function(t){function e(n){if(i[n])return i[n].exports;var s=i[n]={exports:{},id:n,loaded:!1};return t[n].call(s.exports,s,s.exports,e),s.loaded=!0,s.exports}var i={};return e.m=t,e.c=i,e.p="",e(0)}([function(t,e){"use strict";t.exports=function(){var t=document.documentElement,e=null,i="initial",n=i,s=null,o=["input","select","textarea"],r=[],a=[16,17,18,91,93],l={keydown:"keyboard",keyup:"keyboard",mousedown:"mouse",mousemove:"mouse",MSPointerDown:"pointer",MSPointerMove:"pointer",pointerdown:"pointer",pointermove:"pointer",touchstart:"touch"},c=!1,d=!1,u={x:null,y:null},h={2:"touch",3:"touch",4:"mouse"},p=!1;try{var f=Object.defineProperty({},"passive",{get:function(){p=!0}});window.addEventListener("test",null,f)}catch(t){}var m=function(){var t=!!p&&{passive:!0};window.PointerEvent?(window.addEventListener("pointerdown",g),window.addEventListener("pointermove",y)):window.MSPointerEvent?(window.addEventListener("MSPointerDown",g),window.addEventListener("MSPointerMove",y)):(window.addEventListener("mousedown",g),window.addEventListener("mousemove",y),"ontouchstart"in window&&(window.addEventListener("touchstart",k,t),window.addEventListener("touchend",g))),window.addEventListener(T(),y,t),window.addEventListener("keydown",k),window.addEventListener("keyup",k),window.addEventListener("focusin",w),window.addEventListener("focusout",b)},g=function(t){if(!c){var e=t.which,s=l[t.type];"pointer"===s&&(s=x(t));var r="keyboard"===s&&e&&-1===a.indexOf(e)||"mouse"===s||"touch"===s;if(i!==s&&r&&(i=s,v("input")),n!==s&&r){var d=document.activeElement;d&&d.nodeName&&-1===o.indexOf(d.nodeName.toLowerCase())&&(n=s,v("intent"))}}},v=function(e){t.setAttribute("data-what"+e,"input"===e?i:n),S(e)},y=function(t){if(C(t),!c&&!d){var e=l[t.type];"pointer"===e&&(e=x(t)),n!==e&&(n=e,v("intent"))}},w=function(i){e=i.target.nodeName.toLowerCase(),t.setAttribute("data-whatelement",e),i.target.classList&&i.target.classList.length&&t.setAttribute("data-whatclasses",i.target.classList.toString().replace(" ",","))},b=function(){e=null,t.removeAttribute("data-whatelement"),t.removeAttribute("data-whatclasses")},k=function(t){g(t),window.clearTimeout(s),c=!0,s=window.setTimeout(function(){c=!1},100)},x=function(t){return"number"==typeof t.pointerType?h[t.pointerType]:"pen"===t.pointerType?"touch":t.pointerType},T=function(){return"onwheel"in document.createElement("div")?"wheel":void 0!==document.onmousewheel?"mousewheel":"DOMMouseScroll"},S=function(t){for(var e=0,s=r.length;e<s;e++)r[e].type===t&&r[e].fn.call(void 0,"input"===t?i:n)},C=function(t){u.x!==t.screenX||u.y!==t.screenY?(d=!1,u.x=t.screenX,u.y=t.screenY):d=!0};return"addEventListener"in window&&Array.prototype.indexOf&&(l[T()]="mouse",m(),v("input"),v("intent")),{ask:function(t){return"intent"===t?n:i},element:function(){return e},ignoreKeys:function(t){a=t},registerOnChange:function(t,e){r.push({fn:t,type:e||"input"})},unRegisterOnChange:function(t){var e=function(t){for(var e=0,i=r.length;e<i;e++)if(r[e].fn===t)return e}(t);e&&r.splice(e,1)}}}()}])}),function(t,e){"object"==typeof module&&module.exports?module.exports=e():"function"==typeof define&&define.amd?define(e):t.Spinner=e()}(this,function(){"use strict";function t(t,e){var i,n=document.createElement(t||"div");for(i in e)n[i]=e[i];return n}function e(t){for(var e=1,i=arguments.length;e<i;e++)t.appendChild(arguments[e]);return t}function i(t,e,i,n){var s=["opacity",e,~~(100*t),i,n].join("-"),o=.01+i/n*100,r=Math.max(1-(1-t)/e*(100-o),t),a=l.substring(0,l.indexOf("Animation")).toLowerCase(),d=a&&"-"+a+"-"||"";return u[s]||(c.insertRule("@"+d+"keyframes "+s+"{0%{opacity:"+r+"}"+o+"%{opacity:"+t+"}"+(o+.01)+"%{opacity:1}"+(o+e)%100+"%{opacity:"+t+"}100%{opacity:"+r+"}}",c.cssRules.length),u[s]=1),s}function n(t,e){var i,n,s=t.style;if(e=e.charAt(0).toUpperCase()+e.slice(1),void 0!==s[e])return e;for(n=0;n<d.length;n++)if(i=d[n]+e,void 0!==s[i])return i}function s(t,e){for(var i in e)t.style[n(t,i)||i]=e[i];return t}function o(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)void 0===t[n]&&(t[n]=i[n])}return t}function r(t,e){return"string"==typeof t?t:t[e%t.length]}function a(t){this.opts=o(t||{},a.defaults,h)}var l,c,d=["webkit","Moz","ms","O"],u={},h={lines:12,length:7,width:5,radius:10,scale:1,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:100,fps:20,zIndex:2e9,className:"spinner",top:"50%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};if(a.defaults={},o(a.prototype,{spin:function(e){this.stop();var i=this,n=i.opts,o=i.el=t(null,{className:n.className});if(s(o,{position:n.position,width:0,zIndex:n.zIndex,left:n.left,top:n.top}),e&&e.insertBefore(o,e.firstChild||null),o.setAttribute("role","progressbar"),i.lines(o,i.opts),!l){var r,a=0,c=(n.lines-1)*(1-n.direction)/2,d=n.fps,u=d/n.speed,h=(1-n.opacity)/(u*n.trail/100),p=u/n.lines;!function t(){a++;for(var e=0;e<n.lines;e++)r=Math.max(1-(a+(n.lines-e)*p)%u*h,n.opacity),i.opacity(o,e*n.direction+c,r,n);i.timeout=i.el&&setTimeout(t,~~(1e3/d))}()}return i},stop:function(){var t=this.el;return t&&(clearTimeout(this.timeout),t.parentNode&&t.parentNode.removeChild(t),this.el=void 0),this},lines:function(n,o){function a(e,i){return s(t(),{position:"absolute",width:o.scale*(o.length+o.width)+"px",height:o.scale*o.width+"px",background:e,boxShadow:i,transformOrigin:"left",transform:"rotate("+~~(360/o.lines*d+o.rotate)+"deg) translate("+o.scale*o.radius+"px,0)",borderRadius:(o.corners*o.scale*o.width>>1)+"px"})}for(var c,d=0,u=(o.lines-1)*(1-o.direction)/2;d<o.lines;d++)c=s(t(),{position:"absolute",top:1+~(o.scale*o.width/2)+"px",transform:o.hwaccel?"translate3d(0,0,0)":"",opacity:o.opacity,animation:l&&i(o.opacity,o.trail,u+d*o.direction,o.lines)+" "+1/o.speed+"s linear infinite"}),o.shadow&&e(c,s(a("#000","0 0 4px #000"),{top:"2px"})),e(n,e(c,a(r(o.color,d),"0 0 1px rgba(0,0,0,.1)")));return n},opacity:function(t,e,i){e<t.childNodes.length&&(t.childNodes[e].style.opacity=i)}}),"undefined"!=typeof document){c=function(){var i=t("style",{type:"text/css"});return e(document.getElementsByTagName("head")[0],i),i.sheet||i.styleSheet}();var p=s(t("group"),{behavior:"url(#default#VML)"});!n(p,"transform")&&p.adj?function(){function i(e,i){return t("<"+e+' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">',i)}c.addRule(".spin-vml","behavior:url(#default#VML)"),a.prototype.lines=function(t,n){function o(){return s(i("group",{coordsize:d+" "+d,coordorigin:-c+" "+-c}),{width:d,height:d})}function a(t,a,l){e(h,e(s(o(),{rotation:360/n.lines*t+"deg",left:~~a}),e(s(i("roundrect",{arcsize:n.corners}),{width:c,height:n.scale*n.width,left:n.scale*n.radius,top:-n.scale*n.width>>1,filter:l}),i("fill",{color:r(n.color,t),opacity:n.opacity}),i("stroke",{opacity:0}))))}var l,c=n.scale*(n.length+n.width),d=2*n.scale*c,u=-(n.width+n.length)*n.scale*2+"px",h=s(o(),{position:"absolute",top:u,left:u});if(n.shadow)for(l=1;l<=n.lines;l++)a(l,-2,"progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");for(l=1;l<=n.lines;l++)a(l);return e(t,h)},a.prototype.opacity=function(t,e,i,n){var s=t.firstChild;n=n.shadow&&n.lines||0,s&&e+n<s.childNodes.length&&(s=(s=(s=s.childNodes[e+n])&&s.firstChild)&&s.firstChild)&&(s.opacity=i)}}():l=n(p,"animation")}return a}),function(t){if("object"==typeof exports)t(require("jquery"),require("spin.js"));else if("function"==typeof define&&define.amd)define(["jquery","spin"],t);else{if(!window.Spinner)throw new Error("Spin.js not present");t(window.jQuery,window.Spinner)}}(function(t,e){t.fn.spin=function(i,n){return this.each(function(){var s=t(this),o=s.data();o.spinner&&(o.spinner.stop(),delete o.spinner),!1!==i&&(i=t.extend({color:n||s.css("color")},t.fn.spin.presets[i]||i),o.spinner=new e(i).spin(this))})},t.fn.spin.presets={tiny:{lines:8,length:2,width:2,radius:3},small:{lines:8,length:4,width:3,radius:5},large:{lines:10,length:8,width:4,radius:8}}}),function(t,e,i){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof exports?module.exports=t(require("jquery")):t(e||i)}(function(t){"use strict";var e=function(e,i,n){var s={invalid:[],getCaret:function(){try{var t,i=0,n=e.get(0),o=document.selection,r=n.selectionStart;return o&&-1===navigator.appVersion.indexOf("MSIE 10")?((t=o.createRange()).moveStart("character",-s.val().length),i=t.text.length):(r||"0"===r)&&(i=r),i}catch(t){}},setCaret:function(t){try{if(e.is(":focus")){var i,n=e.get(0);n.setSelectionRange?n.setSelectionRange(t,t):((i=n.createTextRange()).collapse(!0),i.moveEnd("character",t),i.moveStart("character",t),i.select())}}catch(t){}},events:function(){e.on("keydown.mask",function(t){e.data("mask-keycode",t.keyCode||t.which),e.data("mask-previus-value",e.val()),e.data("mask-previus-caret-pos",s.getCaret()),s.maskDigitPosMapOld=s.maskDigitPosMap}).on(t.jMaskGlobals.useInput?"input.mask":"keyup.mask",s.behaviour).on("paste.mask drop.mask",function(){setTimeout(function(){e.keydown().keyup()},100)}).on("change.mask",function(){e.data("changed",!0)}).on("blur.mask",function(){a===s.val()||e.data("changed")||e.trigger("change"),e.data("changed",!1)}).on("blur.mask",function(){a=s.val()}).on("focus.mask",function(e){!0===n.selectOnFocus&&t(e.target).select()}).on("focusout.mask",function(){n.clearIfNotMatch&&!o.test(s.val())&&s.val("")})},getRegexMask:function(){for(var t,e,n,s,o,a,l=[],c=0;c<i.length;c++)(t=r.translation[i.charAt(c)])?(e=t.pattern.toString().replace(/.{1}$|^.{1}/g,""),n=t.optional,(s=t.recursive)?(l.push(i.charAt(c)),o={digit:i.charAt(c),pattern:e}):l.push(n||s?e+"?":e)):l.push(i.charAt(c).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"));return a=l.join(""),o&&(a=a.replace(new RegExp("("+o.digit+"(.*"+o.digit+")?)"),"($1)?").replace(new RegExp(o.digit,"g"),o.pattern)),new RegExp(a)},destroyEvents:function(){e.off(["input","keydown","keyup","paste","drop","blur","focusout",""].join(".mask "))},val:function(t){var i,n=e.is("input")?"val":"text";return arguments.length>0?(e[n]()!==t&&e[n](t),i=e):i=e[n](),i},calculateCaretPosition:function(){var t=e.data("mask-previus-value")||"",i=s.getMasked(),n=s.getCaret();if(t!==i){var o=e.data("mask-previus-caret-pos")||0,r=i.length,a=t.length,l=0,c=0,d=0,u=0,h=0;for(h=n;h<r&&s.maskDigitPosMap[h];h++)c++;for(h=n-1;h>=0&&s.maskDigitPosMap[h];h--)l++;for(h=n-1;h>=0;h--)s.maskDigitPosMap[h]&&d++;for(h=o-1;h>=0;h--)s.maskDigitPosMapOld[h]&&u++;if(n>a)n=10*r;else if(o>=n&&o!==a){if(!s.maskDigitPosMapOld[n]){var p=n;n-=u-d,n-=l,s.maskDigitPosMap[n]&&(n=p)}}else n>o&&(n+=d-u,n+=c)}return n},behaviour:function(i){i=i||window.event,s.invalid=[];var n=e.data("mask-keycode");if(-1===t.inArray(n,r.byPassKeys)){var o=s.getMasked(),a=s.getCaret();return setTimeout(function(){s.setCaret(s.calculateCaretPosition())},10),s.val(o),s.setCaret(a),s.callbacks(i)}},getMasked:function(t,e){var o,a,l=[],c=void 0===e?s.val():e+"",d=0,u=i.length,h=0,p=c.length,f=1,m="push",g=-1,v=0,y=[];n.reverse?(m="unshift",f=-1,o=0,d=u-1,h=p-1,a=function(){return d>-1&&h>-1}):(o=u-1,a=function(){return d<u&&h<p});for(var w;a();){var b=i.charAt(d),k=c.charAt(h),x=r.translation[b];x?(k.match(x.pattern)?(l[m](k),x.recursive&&(-1===g?g=d:d===o&&d!==g&&(d=g-f),o===g&&(d-=f)),d+=f):k===w?(v--,w=void 0):x.optional?(d+=f,h-=f):x.fallback?(l[m](x.fallback),d+=f,h-=f):s.invalid.push({p:h,v:k,e:x.pattern}),h+=f):(t||l[m](b),k===b?(y.push(h),h+=f):(w=b,y.push(h+v),v++),d+=f)}var T=i.charAt(o);u!==p+1||r.translation[T]||l.push(T);var S=l.join("");return s.mapMaskdigitPositions(S,y,p),S},mapMaskdigitPositions:function(t,e,i){var o=n.reverse?t.length-i:0;s.maskDigitPosMap={};for(var r=0;r<e.length;r++)s.maskDigitPosMap[e[r]+o]=1},callbacks:function(t){var o=s.val(),r=o!==a,l=[o,t,e,n],c=function(t,e,i){"function"==typeof n[t]&&e&&n[t].apply(this,i)};c("onChange",!0===r,l),c("onKeyPress",!0===r,l),c("onComplete",o.length===i.length,l),c("onInvalid",s.invalid.length>0,[o,t,e,s.invalid,n])}};e=t(e);var o,r=this,a=s.val();i="function"==typeof i?i(s.val(),void 0,e,n):i,r.mask=i,r.options=n,r.remove=function(){var t=s.getCaret();return s.destroyEvents(),s.val(r.getCleanVal()),s.setCaret(t),e},r.getCleanVal=function(){return s.getMasked(!0)},r.getMaskedVal=function(t){return s.getMasked(!1,t)},r.init=function(a){if(a=a||!1,n=n||{},r.clearIfNotMatch=t.jMaskGlobals.clearIfNotMatch,r.byPassKeys=t.jMaskGlobals.byPassKeys,r.translation=t.extend({},t.jMaskGlobals.translation,n.translation),r=t.extend(!0,{},r,n),o=s.getRegexMask(),a)s.events(),s.val(s.getMasked());else{n.placeholder&&e.attr("placeholder",n.placeholder),e.data("mask")&&e.attr("autocomplete","off");for(var l=0,c=!0;l<i.length;l++){var d=r.translation[i.charAt(l)];if(d&&d.recursive){c=!1;break}}c&&e.attr("maxlength",i.length),s.destroyEvents(),s.events();var u=s.getCaret();s.val(s.getMasked()),s.setCaret(u)}},r.init(!e.is("input"))};t.maskWatchers={};var i=function(){var i=t(this),s={},o=i.attr("data-mask");if(i.attr("data-mask-reverse")&&(s.reverse=!0),i.attr("data-mask-clearifnotmatch")&&(s.clearIfNotMatch=!0),"true"===i.attr("data-mask-selectonfocus")&&(s.selectOnFocus=!0),n(i,o,s))return i.data("mask",new e(this,o,s))},n=function(e,i,n){n=n||{};var s=t(e).data("mask"),o=JSON.stringify,r=t(e).val()||t(e).text();try{return"function"==typeof i&&(i=i(r)),"object"!=typeof s||o(s.options)!==o(n)||s.mask!==i}catch(t){}};t.fn.mask=function(i,s){s=s||{};var o=this.selector,r=t.jMaskGlobals,a=r.watchInterval,l=s.watchInputs||r.watchInputs,c=function(){if(n(this,i,s))return t(this).data("mask",new e(this,i,s))};return t(this).each(c),o&&""!==o&&l&&(clearInterval(t.maskWatchers[o]),t.maskWatchers[o]=setInterval(function(){t(document).find(o).each(c)},a)),this},t.fn.masked=function(t){return this.data("mask").getMaskedVal(t)},t.fn.unmask=function(){return clearInterval(t.maskWatchers[this.selector]),delete t.maskWatchers[this.selector],this.each(function(){var e=t(this).data("mask");e&&e.remove().removeData("mask")})},t.fn.cleanVal=function(){return this.data("mask").getCleanVal()},t.applyDataMask=function(e){((e=e||t.jMaskGlobals.maskElements)instanceof t?e:t(e)).filter(t.jMaskGlobals.dataMaskAttr).each(i)};var s={maskElements:"input,td,span,div",dataMaskAttr:"*[data-mask]",dataMask:!0,watchInterval:300,watchInputs:!0,useInput:!/Chrome\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent)&&function(t){var e,i=document.createElement("div");return t="on"+t,(e=t in i)||(i.setAttribute(t,"return;"),e="function"==typeof i[t]),i=null,e}("input"),watchDataMask:!1,byPassKeys:[9,16,17,18,36,37,38,39,40,91],translation:{0:{pattern:/\d/},9:{pattern:/\d/,optional:!0},"#":{pattern:/\d/,recursive:!0},A:{pattern:/[a-zA-Z0-9]/},S:{pattern:/[a-zA-Z]/}}};t.jMaskGlobals=t.jMaskGlobals||{},(s=t.jMaskGlobals=t.extend(!0,{},s,t.jMaskGlobals)).dataMask&&t.applyDataMask(),setInterval(function(){t.jMaskGlobals.watchDataMask&&t.applyDataMask()},s.watchInterval)},window.jQuery,window.Zepto),function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],t):"undefined"!=typeof exports?module.exports=t(require("jquery")):t(jQuery)}(function(t){"use strict";var e=window.Slick||{};(e=function(){var e=0;return function(i,n){var s;this.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:t(i),appendDots:t(i),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(e,i){return t('<button type="button" />').text(i+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},this.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},t.extend(this,this.initials),this.activeBreakpoint=null,this.animType=null,this.animProp=null,this.breakpoints=[],this.breakpointSettings=[],this.cssTransitions=!1,this.focussed=!1,this.interrupted=!1,this.hidden="hidden",this.paused=!0,this.positionProp=null,this.respondTo=null,this.rowCount=1,this.shouldClick=!0,this.$slider=t(i),this.$slidesCache=null,this.transformType=null,this.transitionType=null,this.visibilityChange="visibilitychange",this.windowWidth=0,this.windowTimer=null,s=t(i).data("slick")||{},this.options=t.extend({},this.defaults,n,s),this.currentSlide=this.options.initialSlide,this.originalSettings=this.options,void 0!==document.mozHidden?(this.hidden="mozHidden",this.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(this.hidden="webkitHidden",this.visibilityChange="webkitvisibilitychange"),this.autoPlay=t.proxy(this.autoPlay,this),this.autoPlayClear=t.proxy(this.autoPlayClear,this),this.autoPlayIterator=t.proxy(this.autoPlayIterator,this),this.changeSlide=t.proxy(this.changeSlide,this),this.clickHandler=t.proxy(this.clickHandler,this),this.selectHandler=t.proxy(this.selectHandler,this),this.setPosition=t.proxy(this.setPosition,this),this.swipeHandler=t.proxy(this.swipeHandler,this),this.dragHandler=t.proxy(this.dragHandler,this),this.keyHandler=t.proxy(this.keyHandler,this),this.instanceUid=e++,this.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,this.registerBreakpoints(),this.init(!0)}}()).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},e.prototype.addSlide=e.prototype.slickAdd=function(e,i,n){if("boolean"==typeof i)n=i,i=null;else if(i<0||i>=this.slideCount)return!1;this.unload(),"number"==typeof i?0===i&&0===this.$slides.length?t(e).appendTo(this.$slideTrack):n?t(e).insertBefore(this.$slides.eq(i)):t(e).insertAfter(this.$slides.eq(i)):!0===n?t(e).prependTo(this.$slideTrack):t(e).appendTo(this.$slideTrack),this.$slides=this.$slideTrack.children(this.options.slide),this.$slideTrack.children(this.options.slide).detach(),this.$slideTrack.append(this.$slides),this.$slides.each(function(e,i){t(i).attr("data-slick-index",e)}),this.$slidesCache=this.$slides,this.reinit()},e.prototype.animateHeight=function(){if(1===this.options.slidesToShow&&!0===this.options.adaptiveHeight&&!1===this.options.vertical){var t=this.$slides.eq(this.currentSlide).outerHeight(!0);this.$list.animate({height:t},this.options.speed)}},e.prototype.animateSlide=function(e,i){var n={},s=this;s.animateHeight(),!0===s.options.rtl&&!1===s.options.vertical&&(e=-e),!1===s.transformsEnabled?!1===s.options.vertical?s.$slideTrack.animate({left:e},s.options.speed,s.options.easing,i):s.$slideTrack.animate({top:e},s.options.speed,s.options.easing,i):!1===s.cssTransitions?(!0===s.options.rtl&&(s.currentLeft=-s.currentLeft),t({animStart:s.currentLeft}).animate({animStart:e},{duration:s.options.speed,easing:s.options.easing,step:function(t){t=Math.ceil(t),!1===s.options.vertical?(n[s.animType]="translate("+t+"px, 0px)",s.$slideTrack.css(n)):(n[s.animType]="translate(0px,"+t+"px)",s.$slideTrack.css(n))},complete:function(){i&&i.call()}})):(s.applyTransition(),e=Math.ceil(e),!1===s.options.vertical?n[s.animType]="translate3d("+e+"px, 0px, 0px)":n[s.animType]="translate3d(0px,"+e+"px, 0px)",s.$slideTrack.css(n),i&&setTimeout(function(){s.disableTransition(),i.call()},s.options.speed))},e.prototype.getNavTarget=function(){var e=this.options.asNavFor;return e&&null!==e&&(e=t(e).not(this.$slider)),e},e.prototype.asNavFor=function(e){var i=this.getNavTarget();null!==i&&"object"==typeof i&&i.each(function(){var i=t(this).slick("getSlick");i.unslicked||i.slideHandler(e,!0)})},e.prototype.applyTransition=function(t){var e={};!1===this.options.fade?e[this.transitionType]=this.transformType+" "+this.options.speed+"ms "+this.options.cssEase:e[this.transitionType]="opacity "+this.options.speed+"ms "+this.options.cssEase,!1===this.options.fade?this.$slideTrack.css(e):this.$slides.eq(t).css(e)},e.prototype.autoPlay=function(){this.autoPlayClear(),this.slideCount>this.options.slidesToShow&&(this.autoPlayTimer=setInterval(this.autoPlayIterator,this.options.autoplaySpeed))},e.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},e.prototype.autoPlayIterator=function(){var t=this.currentSlide+this.options.slidesToScroll;this.paused||this.interrupted||this.focussed||(!1===this.options.infinite&&(1===this.direction&&this.currentSlide+1===this.slideCount-1?this.direction=0:0===this.direction&&(t=this.currentSlide-this.options.slidesToScroll,this.currentSlide-1==0&&(this.direction=1))),this.slideHandler(t))},e.prototype.buildArrows=function(){!0===this.options.arrows&&(this.$prevArrow=t(this.options.prevArrow).addClass("slick-arrow"),this.$nextArrow=t(this.options.nextArrow).addClass("slick-arrow"),this.slideCount>this.options.slidesToShow?(this.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),this.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),this.htmlExpr.test(this.options.prevArrow)&&this.$prevArrow.prependTo(this.options.appendArrows),this.htmlExpr.test(this.options.nextArrow)&&this.$nextArrow.appendTo(this.options.appendArrows),!0!==this.options.infinite&&this.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):this.$prevArrow.add(this.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},e.prototype.buildDots=function(){var e,i;if(!0===this.options.dots&&this.slideCount>this.options.slidesToShow){for(this.$slider.addClass("slick-dotted"),i=t("<ul />").addClass(this.options.dotsClass),e=0;e<=this.getDotCount();e+=1)i.append(t("<li />").append(this.options.customPaging.call(this,this,e)));this.$dots=i.appendTo(this.options.appendDots),this.$dots.find("li").first().addClass("slick-active")}},e.prototype.buildOut=function(){this.$slides=this.$slider.children(this.options.slide+":not(.slick-cloned)").addClass("slick-slide"),this.slideCount=this.$slides.length,this.$slides.each(function(e,i){t(i).attr("data-slick-index",e).data("originalStyling",t(i).attr("style")||"")}),this.$slider.addClass("slick-slider"),this.$slideTrack=0===this.slideCount?t('<div class="slick-track"/>').appendTo(this.$slider):this.$slides.wrapAll('<div class="slick-track"/>').parent(),this.$list=this.$slideTrack.wrap('<div class="slick-list"/>').parent(),this.$slideTrack.css("opacity",0),!0!==this.options.centerMode&&!0!==this.options.swipeToSlide||(this.options.slidesToScroll=1),t("img[data-lazy]",this.$slider).not("[src]").addClass("slick-loading"),this.setupInfinite(),this.buildArrows(),this.buildDots(),this.updateDots(),this.setSlideClasses("number"==typeof this.currentSlide?this.currentSlide:0),!0===this.options.draggable&&this.$list.addClass("draggable")},e.prototype.buildRows=function(){var t,e,i,n,s,o,r;if(n=document.createDocumentFragment(),o=this.$slider.children(),this.options.rows>0){for(r=this.options.slidesPerRow*this.options.rows,s=Math.ceil(o.length/r),t=0;t<s;t++){var a=document.createElement("div");for(e=0;e<this.options.rows;e++){var l=document.createElement("div");for(i=0;i<this.options.slidesPerRow;i++){var c=t*r+(e*this.options.slidesPerRow+i);o.get(c)&&l.appendChild(o.get(c))}a.appendChild(l)}n.appendChild(a)}this.$slider.empty().append(n),this.$slider.children().children().children().css({width:100/this.options.slidesPerRow+"%",display:"inline-block"})}},e.prototype.checkResponsive=function(e,i){var n,s,o,r=!1,a=this.$slider.width(),l=window.innerWidth||t(window).width();if("window"===this.respondTo?o=l:"slider"===this.respondTo?o=a:"min"===this.respondTo&&(o=Math.min(l,a)),this.options.responsive&&this.options.responsive.length&&null!==this.options.responsive){s=null;for(n in this.breakpoints)this.breakpoints.hasOwnProperty(n)&&(!1===this.originalSettings.mobileFirst?o<this.breakpoints[n]&&(s=this.breakpoints[n]):o>this.breakpoints[n]&&(s=this.breakpoints[n]));null!==s?null!==this.activeBreakpoint?(s!==this.activeBreakpoint||i)&&(this.activeBreakpoint=s,"unslick"===this.breakpointSettings[s]?this.unslick(s):(this.options=t.extend({},this.originalSettings,this.breakpointSettings[s]),!0===e&&(this.currentSlide=this.options.initialSlide),this.refresh(e)),r=s):(this.activeBreakpoint=s,"unslick"===this.breakpointSettings[s]?this.unslick(s):(this.options=t.extend({},this.originalSettings,this.breakpointSettings[s]),!0===e&&(this.currentSlide=this.options.initialSlide),this.refresh(e)),r=s):null!==this.activeBreakpoint&&(this.activeBreakpoint=null,this.options=this.originalSettings,!0===e&&(this.currentSlide=this.options.initialSlide),this.refresh(e),r=s),e||!1===r||this.$slider.trigger("breakpoint",[this,r])}},e.prototype.changeSlide=function(e,i){var n,s,o,r=t(e.currentTarget);switch(r.is("a")&&e.preventDefault(),r.is("li")||(r=r.closest("li")),o=this.slideCount%this.options.slidesToScroll!=0,n=o?0:(this.slideCount-this.currentSlide)%this.options.slidesToScroll,e.data.message){case"previous":s=0===n?this.options.slidesToScroll:this.options.slidesToShow-n,this.slideCount>this.options.slidesToShow&&this.slideHandler(this.currentSlide-s,!1,i);break;case"next":s=0===n?this.options.slidesToScroll:n,this.slideCount>this.options.slidesToShow&&this.slideHandler(this.currentSlide+s,!1,i);break;case"index":var a=0===e.data.index?0:e.data.index||r.index()*this.options.slidesToScroll;this.slideHandler(this.checkNavigable(a),!1,i),r.children().trigger("focus");break;default:return}},e.prototype.checkNavigable=function(t){var e,i;if(e=this.getNavigableIndexes(),i=0,t>e[e.length-1])t=e[e.length-1];else for(var n in e){if(t<e[n]){t=i;break}i=e[n]}return t},e.prototype.cleanUpEvents=function(){this.options.dots&&null!==this.$dots&&(t("li",this.$dots).off("click.slick",this.changeSlide).off("mouseenter.slick",t.proxy(this.interrupt,this,!0)).off("mouseleave.slick",t.proxy(this.interrupt,this,!1)),!0===this.options.accessibility&&this.$dots.off("keydown.slick",this.keyHandler)),this.$slider.off("focus.slick blur.slick"),!0===this.options.arrows&&this.slideCount>this.options.slidesToShow&&(this.$prevArrow&&this.$prevArrow.off("click.slick",this.changeSlide),this.$nextArrow&&this.$nextArrow.off("click.slick",this.changeSlide),!0===this.options.accessibility&&(this.$prevArrow&&this.$prevArrow.off("keydown.slick",this.keyHandler),this.$nextArrow&&this.$nextArrow.off("keydown.slick",this.keyHandler))),this.$list.off("touchstart.slick mousedown.slick",this.swipeHandler),this.$list.off("touchmove.slick mousemove.slick",this.swipeHandler),this.$list.off("touchend.slick mouseup.slick",this.swipeHandler),this.$list.off("touchcancel.slick mouseleave.slick",this.swipeHandler),this.$list.off("click.slick",this.clickHandler),t(document).off(this.visibilityChange,this.visibility),this.cleanUpSlideEvents(),!0===this.options.accessibility&&this.$list.off("keydown.slick",this.keyHandler),!0===this.options.focusOnSelect&&t(this.$slideTrack).children().off("click.slick",this.selectHandler),t(window).off("orientationchange.slick.slick-"+this.instanceUid,this.orientationChange),t(window).off("resize.slick.slick-"+this.instanceUid,this.resize),t("[draggable!=true]",this.$slideTrack).off("dragstart",this.preventDefault),t(window).off("load.slick.slick-"+this.instanceUid,this.setPosition)},e.prototype.cleanUpSlideEvents=function(){this.$list.off("mouseenter.slick",t.proxy(this.interrupt,this,!0)),this.$list.off("mouseleave.slick",t.proxy(this.interrupt,this,!1))},e.prototype.cleanUpRows=function(){var t;this.options.rows>0&&((t=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(t))},e.prototype.clickHandler=function(t){!1===this.shouldClick&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault())},e.prototype.destroy=function(e){this.autoPlayClear(),this.touchObject={},this.cleanUpEvents(),t(".slick-cloned",this.$slider).detach(),this.$dots&&this.$dots.remove(),this.$prevArrow&&this.$prevArrow.length&&(this.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),this.htmlExpr.test(this.options.prevArrow)&&this.$prevArrow.remove()),this.$nextArrow&&this.$nextArrow.length&&(this.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),this.htmlExpr.test(this.options.nextArrow)&&this.$nextArrow.remove()),this.$slides&&(this.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){t(this).attr("style",t(this).data("originalStyling"))}),this.$slideTrack.children(this.options.slide).detach(),this.$slideTrack.detach(),this.$list.detach(),this.$slider.append(this.$slides)),this.cleanUpRows(),this.$slider.removeClass("slick-slider"),this.$slider.removeClass("slick-initialized"),this.$slider.removeClass("slick-dotted"),this.unslicked=!0,e||this.$slider.trigger("destroy",[this])},e.prototype.disableTransition=function(t){var e={};e[this.transitionType]="",!1===this.options.fade?this.$slideTrack.css(e):this.$slides.eq(t).css(e)},e.prototype.fadeSlide=function(t,e){var i=this;!1===i.cssTransitions?(i.$slides.eq(t).css({zIndex:i.options.zIndex}),i.$slides.eq(t).animate({opacity:1},i.options.speed,i.options.easing,e)):(i.applyTransition(t),i.$slides.eq(t).css({opacity:1,zIndex:i.options.zIndex}),e&&setTimeout(function(){i.disableTransition(t),e.call()},i.options.speed))},e.prototype.fadeSlideOut=function(t){!1===this.cssTransitions?this.$slides.eq(t).animate({opacity:0,zIndex:this.options.zIndex-2},this.options.speed,this.options.easing):(this.applyTransition(t),this.$slides.eq(t).css({opacity:0,zIndex:this.options.zIndex-2}))},e.prototype.filterSlides=e.prototype.slickFilter=function(t){null!==t&&(this.$slidesCache=this.$slides,this.unload(),this.$slideTrack.children(this.options.slide).detach(),this.$slidesCache.filter(t).appendTo(this.$slideTrack),this.reinit())},e.prototype.focusHandler=function(){var e=this;e.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(i){i.stopImmediatePropagation();var n=t(this);setTimeout(function(){e.options.pauseOnFocus&&(e.focussed=n.is(":focus"),e.autoPlay())},0)})},e.prototype.getCurrent=e.prototype.slickCurrentSlide=function(){return this.currentSlide},e.prototype.getDotCount=function(){var t=0,e=0,i=0;if(!0===this.options.infinite)if(this.slideCount<=this.options.slidesToShow)++i;else for(;t<this.slideCount;)++i,t=e+this.options.slidesToScroll,e+=this.options.slidesToScroll<=this.options.slidesToShow?this.options.slidesToScroll:this.options.slidesToShow;else if(!0===this.options.centerMode)i=this.slideCount;else if(this.options.asNavFor)for(;t<this.slideCount;)++i,t=e+this.options.slidesToScroll,e+=this.options.slidesToScroll<=this.options.slidesToShow?this.options.slidesToScroll:this.options.slidesToShow;else i=1+Math.ceil((this.slideCount-this.options.slidesToShow)/this.options.slidesToScroll);return i-1},e.prototype.getLeft=function(t){var e,i,n,s,o=0;return this.slideOffset=0,i=this.$slides.first().outerHeight(!0),!0===this.options.infinite?(this.slideCount>this.options.slidesToShow&&(this.slideOffset=this.slideWidth*this.options.slidesToShow*-1,s=-1,!0===this.options.vertical&&!0===this.options.centerMode&&(2===this.options.slidesToShow?s=-1.5:1===this.options.slidesToShow&&(s=-2)),o=i*this.options.slidesToShow*s),this.slideCount%this.options.slidesToScroll!=0&&t+this.options.slidesToScroll>this.slideCount&&this.slideCount>this.options.slidesToShow&&(t>this.slideCount?(this.slideOffset=(this.options.slidesToShow-(t-this.slideCount))*this.slideWidth*-1,o=(this.options.slidesToShow-(t-this.slideCount))*i*-1):(this.slideOffset=this.slideCount%this.options.slidesToScroll*this.slideWidth*-1,o=this.slideCount%this.options.slidesToScroll*i*-1))):t+this.options.slidesToShow>this.slideCount&&(this.slideOffset=(t+this.options.slidesToShow-this.slideCount)*this.slideWidth,o=(t+this.options.slidesToShow-this.slideCount)*i),this.slideCount<=this.options.slidesToShow&&(this.slideOffset=0,o=0),!0===this.options.centerMode&&this.slideCount<=this.options.slidesToShow?this.slideOffset=this.slideWidth*Math.floor(this.options.slidesToShow)/2-this.slideWidth*this.slideCount/2:!0===this.options.centerMode&&!0===this.options.infinite?this.slideOffset+=this.slideWidth*Math.floor(this.options.slidesToShow/2)-this.slideWidth:!0===this.options.centerMode&&(this.slideOffset=0,this.slideOffset+=this.slideWidth*Math.floor(this.options.slidesToShow/2)),e=!1===this.options.vertical?t*this.slideWidth*-1+this.slideOffset:t*i*-1+o,!0===this.options.variableWidth&&(n=this.slideCount<=this.options.slidesToShow||!1===this.options.infinite?this.$slideTrack.children(".slick-slide").eq(t):this.$slideTrack.children(".slick-slide").eq(t+this.options.slidesToShow),e=!0===this.options.rtl?n[0]?-1*(this.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,!0===this.options.centerMode&&(n=this.slideCount<=this.options.slidesToShow||!1===this.options.infinite?this.$slideTrack.children(".slick-slide").eq(t):this.$slideTrack.children(".slick-slide").eq(t+this.options.slidesToShow+1),e=!0===this.options.rtl?n[0]?-1*(this.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,e+=(this.$list.width()-n.outerWidth())/2)),e},e.prototype.getOption=e.prototype.slickGetOption=function(t){return this.options[t]},e.prototype.getNavigableIndexes=function(){var t,e=0,i=0,n=[];for(!1===this.options.infinite?t=this.slideCount:(e=-1*this.options.slidesToScroll,i=-1*this.options.slidesToScroll,t=2*this.slideCount);e<t;)n.push(e),e=i+this.options.slidesToScroll,i+=this.options.slidesToScroll<=this.options.slidesToShow?this.options.slidesToScroll:this.options.slidesToShow;return n},e.prototype.getSlick=function(){return this},e.prototype.getSlideCount=function(){var e,i,n=this;return i=!0===n.options.centerMode?n.slideWidth*Math.floor(n.options.slidesToShow/2):0,!0===n.options.swipeToSlide?(n.$slideTrack.find(".slick-slide").each(function(s,o){if(o.offsetLeft-i+t(o).outerWidth()/2>-1*n.swipeLeft)return e=o,!1}),Math.abs(t(e).attr("data-slick-index")-n.currentSlide)||1):n.options.slidesToScroll},e.prototype.goTo=e.prototype.slickGoTo=function(t,e){this.changeSlide({data:{message:"index",index:parseInt(t)}},e)},e.prototype.init=function(e){t(this.$slider).hasClass("slick-initialized")||(t(this.$slider).addClass("slick-initialized"),this.buildRows(),this.buildOut(),this.setProps(),this.startLoad(),this.loadSlider(),this.initializeEvents(),this.updateArrows(),this.updateDots(),this.checkResponsive(!0),this.focusHandler()),e&&this.$slider.trigger("init",[this]),!0===this.options.accessibility&&this.initADA(),this.options.autoplay&&(this.paused=!1,this.autoPlay())},e.prototype.initADA=function(){var e=this,i=Math.ceil(e.slideCount/e.options.slidesToShow),n=e.getNavigableIndexes().filter(function(t){return t>=0&&t<e.slideCount});e.$slides.add(e.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==e.$dots&&(e.$slides.not(e.$slideTrack.find(".slick-cloned")).each(function(i){var s=n.indexOf(i);if(t(this).attr({role:"tabpanel",id:"slick-slide"+e.instanceUid+i,tabindex:-1}),-1!==s){var o="slick-slide-control"+e.instanceUid+s;t("#"+o).length&&t(this).attr({"aria-describedby":o})}}),e.$dots.attr("role","tablist").find("li").each(function(s){var o=n[s];t(this).attr({role:"presentation"}),t(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+e.instanceUid+s,"aria-controls":"slick-slide"+e.instanceUid+o,"aria-label":s+1+" of "+i,"aria-selected":null,tabindex:"-1"})}).eq(e.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var s=e.currentSlide,o=s+e.options.slidesToShow;s<o;s++)e.options.focusOnChange?e.$slides.eq(s).attr({tabindex:"0"}):e.$slides.eq(s).removeAttr("tabindex");e.activateADA()},e.prototype.initArrowEvents=function(){!0===this.options.arrows&&this.slideCount>this.options.slidesToShow&&(this.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},this.changeSlide),this.$nextArrow.off("click.slick").on("click.slick",{message:"next"},this.changeSlide),!0===this.options.accessibility&&(this.$prevArrow.on("keydown.slick",this.keyHandler),this.$nextArrow.on("keydown.slick",this.keyHandler)))},e.prototype.initDotEvents=function(){!0===this.options.dots&&this.slideCount>this.options.slidesToShow&&(t("li",this.$dots).on("click.slick",{message:"index"},this.changeSlide),!0===this.options.accessibility&&this.$dots.on("keydown.slick",this.keyHandler)),!0===this.options.dots&&!0===this.options.pauseOnDotsHover&&this.slideCount>this.options.slidesToShow&&t("li",this.$dots).on("mouseenter.slick",t.proxy(this.interrupt,this,!0)).on("mouseleave.slick",t.proxy(this.interrupt,this,!1))},e.prototype.initSlideEvents=function(){this.options.pauseOnHover&&(this.$list.on("mouseenter.slick",t.proxy(this.interrupt,this,!0)),this.$list.on("mouseleave.slick",t.proxy(this.interrupt,this,!1)))},e.prototype.initializeEvents=function(){this.initArrowEvents(),this.initDotEvents(),this.initSlideEvents(),this.$list.on("touchstart.slick mousedown.slick",{action:"start"},this.swipeHandler),this.$list.on("touchmove.slick mousemove.slick",{action:"move"},this.swipeHandler),this.$list.on("touchend.slick mouseup.slick",{action:"end"},this.swipeHandler),this.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},this.swipeHandler),this.$list.on("click.slick",this.clickHandler),t(document).on(this.visibilityChange,t.proxy(this.visibility,this)),!0===this.options.accessibility&&this.$list.on("keydown.slick",this.keyHandler),!0===this.options.focusOnSelect&&t(this.$slideTrack).children().on("click.slick",this.selectHandler),t(window).on("orientationchange.slick.slick-"+this.instanceUid,t.proxy(this.orientationChange,this)),t(window).on("resize.slick.slick-"+this.instanceUid,t.proxy(this.resize,this)),t("[draggable!=true]",this.$slideTrack).on("dragstart",this.preventDefault),t(window).on("load.slick.slick-"+this.instanceUid,this.setPosition),t(this.setPosition)},e.prototype.initUI=function(){!0===this.options.arrows&&this.slideCount>this.options.slidesToShow&&(this.$prevArrow.show(),this.$nextArrow.show()),!0===this.options.dots&&this.slideCount>this.options.slidesToShow&&this.$dots.show()},e.prototype.keyHandler=function(t){t.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===t.keyCode&&!0===this.options.accessibility?this.changeSlide({data:{message:!0===this.options.rtl?"next":"previous"}}):39===t.keyCode&&!0===this.options.accessibility&&this.changeSlide({data:{message:!0===this.options.rtl?"previous":"next"}}))},e.prototype.lazyLoad=function(){function e(e){t("img[data-lazy]",e).each(function(){var e=t(this),i=t(this).attr("data-lazy"),n=t(this).attr("data-srcset"),s=t(this).attr("data-sizes")||o.$slider.attr("data-sizes"),r=document.createElement("img");r.onload=function(){e.animate({opacity:0},100,function(){n&&(e.attr("srcset",n),s&&e.attr("sizes",s)),e.attr("src",i).animate({opacity:1},200,function(){e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),o.$slider.trigger("lazyLoaded",[o,e,i])})},r.onerror=function(){e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),o.$slider.trigger("lazyLoadError",[o,e,i])},r.src=i})}var i,n,s,o=this;if(!0===o.options.centerMode?!0===o.options.infinite?s=(n=o.currentSlide+(o.options.slidesToShow/2+1))+o.options.slidesToShow+2:(n=Math.max(0,o.currentSlide-(o.options.slidesToShow/2+1)),s=o.options.slidesToShow/2+1+2+o.currentSlide):(n=o.options.infinite?o.options.slidesToShow+o.currentSlide:o.currentSlide,s=Math.ceil(n+o.options.slidesToShow),!0===o.options.fade&&(n>0&&n--,s<=o.slideCount&&s++)),i=o.$slider.find(".slick-slide").slice(n,s),"anticipated"===o.options.lazyLoad)for(var r=n-1,a=s,l=o.$slider.find(".slick-slide"),c=0;c<o.options.slidesToScroll;c++)r<0&&(r=o.slideCount-1),i=(i=i.add(l.eq(r))).add(l.eq(a)),r--,a++;e(i),o.slideCount<=o.options.slidesToShow?e(o.$slider.find(".slick-slide")):o.currentSlide>=o.slideCount-o.options.slidesToShow?e(o.$slider.find(".slick-cloned").slice(0,o.options.slidesToShow)):0===o.currentSlide&&e(o.$slider.find(".slick-cloned").slice(-1*o.options.slidesToShow))},e.prototype.loadSlider=function(){this.setPosition(),this.$slideTrack.css({opacity:1}),this.$slider.removeClass("slick-loading"),this.initUI(),"progressive"===this.options.lazyLoad&&this.progressiveLazyLoad()},e.prototype.next=e.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},e.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},e.prototype.pause=e.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},e.prototype.play=e.prototype.slickPlay=function(){this.autoPlay(),this.options.autoplay=!0,this.paused=!1,this.focussed=!1,this.interrupted=!1},e.prototype.postSlide=function(e){if(!this.unslicked&&(this.$slider.trigger("afterChange",[this,e]),this.animating=!1,this.slideCount>this.options.slidesToShow&&this.setPosition(),this.swipeLeft=null,this.options.autoplay&&this.autoPlay(),!0===this.options.accessibility&&(this.initADA(),this.options.focusOnChange))){t(this.$slides.get(this.currentSlide)).attr("tabindex",0).focus()}},e.prototype.prev=e.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},e.prototype.preventDefault=function(t){t.preventDefault()},e.prototype.progressiveLazyLoad=function(e){e=e||1;var i,n,s,o,r,a=this,l=t("img[data-lazy]",a.$slider);l.length?(i=l.first(),n=i.attr("data-lazy"),s=i.attr("data-srcset"),o=i.attr("data-sizes")||a.$slider.attr("data-sizes"),(r=document.createElement("img")).onload=function(){s&&(i.attr("srcset",s),o&&i.attr("sizes",o)),i.attr("src",n).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===a.options.adaptiveHeight&&a.setPosition(),a.$slider.trigger("lazyLoaded",[a,i,n]),a.progressiveLazyLoad()},r.onerror=function(){e<3?setTimeout(function(){a.progressiveLazyLoad(e+1)},500):(i.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),a.$slider.trigger("lazyLoadError",[a,i,n]),a.progressiveLazyLoad())},r.src=n):a.$slider.trigger("allImagesLoaded",[a])},e.prototype.refresh=function(e){var i,n;n=this.slideCount-this.options.slidesToShow,!this.options.infinite&&this.currentSlide>n&&(this.currentSlide=n),this.slideCount<=this.options.slidesToShow&&(this.currentSlide=0),i=this.currentSlide,this.destroy(!0),t.extend(this,this.initials,{currentSlide:i}),this.init(),e||this.changeSlide({data:{message:"index",index:i}},!1)},e.prototype.registerBreakpoints=function(){var e,i,n,s=this,o=s.options.responsive||null;if("array"===t.type(o)&&o.length){s.respondTo=s.options.respondTo||"window";for(e in o)if(n=s.breakpoints.length-1,o.hasOwnProperty(e)){for(i=o[e].breakpoint;n>=0;)s.breakpoints[n]&&s.breakpoints[n]===i&&s.breakpoints.splice(n,1),n--;s.breakpoints.push(i),s.breakpointSettings[i]=o[e].settings}s.breakpoints.sort(function(t,e){return s.options.mobileFirst?t-e:e-t})}},e.prototype.reinit=function(){this.$slides=this.$slideTrack.children(this.options.slide).addClass("slick-slide"),this.slideCount=this.$slides.length,this.currentSlide>=this.slideCount&&0!==this.currentSlide&&(this.currentSlide=this.currentSlide-this.options.slidesToScroll),this.slideCount<=this.options.slidesToShow&&(this.currentSlide=0),this.registerBreakpoints(),this.setProps(),this.setupInfinite(),this.buildArrows(),this.updateArrows(),this.initArrowEvents(),this.buildDots(),this.updateDots(),this.initDotEvents(),this.cleanUpSlideEvents(),this.initSlideEvents(),this.checkResponsive(!1,!0),!0===this.options.focusOnSelect&&t(this.$slideTrack).children().on("click.slick",this.selectHandler),this.setSlideClasses("number"==typeof this.currentSlide?this.currentSlide:0),this.setPosition(),this.focusHandler(),this.paused=!this.options.autoplay,this.autoPlay(),this.$slider.trigger("reInit",[this])},e.prototype.resize=function(){var e=this;t(window).width()!==e.windowWidth&&(clearTimeout(e.windowDelay),e.windowDelay=window.setTimeout(function(){e.windowWidth=t(window).width(),e.checkResponsive(),e.unslicked||e.setPosition()},50))},e.prototype.removeSlide=e.prototype.slickRemove=function(t,e,i){if(t="boolean"==typeof t?!0===(e=t)?0:this.slideCount-1:!0===e?--t:t,this.slideCount<1||t<0||t>this.slideCount-1)return!1;this.unload(),!0===i?this.$slideTrack.children().remove():this.$slideTrack.children(this.options.slide).eq(t).remove(),this.$slides=this.$slideTrack.children(this.options.slide),this.$slideTrack.children(this.options.slide).detach(),this.$slideTrack.append(this.$slides),this.$slidesCache=this.$slides,this.reinit()},e.prototype.setCSS=function(t){var e,i,n={};!0===this.options.rtl&&(t=-t),e="left"==this.positionProp?Math.ceil(t)+"px":"0px",i="top"==this.positionProp?Math.ceil(t)+"px":"0px",n[this.positionProp]=t,!1===this.transformsEnabled?this.$slideTrack.css(n):(n={},!1===this.cssTransitions?(n[this.animType]="translate("+e+", "+i+")",this.$slideTrack.css(n)):(n[this.animType]="translate3d("+e+", "+i+", 0px)",this.$slideTrack.css(n)))},e.prototype.setDimensions=function(){!1===this.options.vertical?!0===this.options.centerMode&&this.$list.css({padding:"0px "+this.options.centerPadding}):(this.$list.height(this.$slides.first().outerHeight(!0)*this.options.slidesToShow),!0===this.options.centerMode&&this.$list.css({padding:this.options.centerPadding+" 0px"})),this.listWidth=this.$list.width(),this.listHeight=this.$list.height(),!1===this.options.vertical&&!1===this.options.variableWidth?(this.slideWidth=Math.ceil(this.listWidth/this.options.slidesToShow),this.$slideTrack.width(Math.ceil(this.slideWidth*this.$slideTrack.children(".slick-slide").length))):!0===this.options.variableWidth?this.$slideTrack.width(5e3*this.slideCount):(this.slideWidth=Math.ceil(this.listWidth),this.$slideTrack.height(Math.ceil(this.$slides.first().outerHeight(!0)*this.$slideTrack.children(".slick-slide").length)));var t=this.$slides.first().outerWidth(!0)-this.$slides.first().width();!1===this.options.variableWidth&&this.$slideTrack.children(".slick-slide").width(this.slideWidth-t)},e.prototype.setFade=function(){var e,i=this;i.$slides.each(function(n,s){e=i.slideWidth*n*-1,!0===i.options.rtl?t(s).css({position:"relative",right:e,top:0,zIndex:i.options.zIndex-2,opacity:0}):t(s).css({position:"relative",left:e,top:0,zIndex:i.options.zIndex-2,opacity:0})}),i.$slides.eq(i.currentSlide).css({zIndex:i.options.zIndex-1,opacity:1})},e.prototype.setHeight=function(){if(1===this.options.slidesToShow&&!0===this.options.adaptiveHeight&&!1===this.options.vertical){var t=this.$slides.eq(this.currentSlide).outerHeight(!0);this.$list.css("height",t)}},e.prototype.setOption=e.prototype.slickSetOption=function(){var e,i,n,s,o,r=this,a=!1;if("object"===t.type(arguments[0])?(n=arguments[0],a=arguments[1],o="multiple"):"string"===t.type(arguments[0])&&(n=arguments[0],s=arguments[1],a=arguments[2],"responsive"===arguments[0]&&"array"===t.type(arguments[1])?o="responsive":void 0!==arguments[1]&&(o="single")),"single"===o)r.options[n]=s;else if("multiple"===o)t.each(n,function(t,e){r.options[t]=e});else if("responsive"===o)for(i in s)if("array"!==t.type(r.options.responsive))r.options.responsive=[s[i]];else{for(e=r.options.responsive.length-1;e>=0;)r.options.responsive[e].breakpoint===s[i].breakpoint&&r.options.responsive.splice(e,1),e--;r.options.responsive.push(s[i])}a&&(r.unload(),r.reinit())},e.prototype.setPosition=function(){this.setDimensions(),this.setHeight(),!1===this.options.fade?this.setCSS(this.getLeft(this.currentSlide)):this.setFade(),this.$slider.trigger("setPosition",[this])},e.prototype.setProps=function(){var t=document.body.style;this.positionProp=!0===this.options.vertical?"top":"left","top"===this.positionProp?this.$slider.addClass("slick-vertical"):this.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===this.options.useCSS&&(this.cssTransitions=!0),this.options.fade&&("number"==typeof this.options.zIndex?this.options.zIndex<3&&(this.options.zIndex=3):this.options.zIndex=this.defaults.zIndex),void 0!==t.OTransform&&(this.animType="OTransform",this.transformType="-o-transform",this.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(this.animType=!1)),void 0!==t.MozTransform&&(this.animType="MozTransform",this.transformType="-moz-transform",this.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(this.animType=!1)),void 0!==t.webkitTransform&&(this.animType="webkitTransform",this.transformType="-webkit-transform",this.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(this.animType=!1)),void 0!==t.msTransform&&(this.animType="msTransform",this.transformType="-ms-transform",this.transitionType="msTransition",void 0===t.msTransform&&(this.animType=!1)),void 0!==t.transform&&!1!==this.animType&&(this.animType="transform",this.transformType="transform",this.transitionType="transition"),this.transformsEnabled=this.options.useTransform&&null!==this.animType&&!1!==this.animType},e.prototype.setSlideClasses=function(t){var e,i,n,s;if(i=this.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),this.$slides.eq(t).addClass("slick-current"),!0===this.options.centerMode){var o=this.options.slidesToShow%2==0?1:0;e=Math.floor(this.options.slidesToShow/2),!0===this.options.infinite&&(t>=e&&t<=this.slideCount-1-e?this.$slides.slice(t-e+o,t+e+1).addClass("slick-active").attr("aria-hidden","false"):(n=this.options.slidesToShow+t,i.slice(n-e+1+o,n+e+2).addClass("slick-active").attr("aria-hidden","false")),0===t?i.eq(i.length-1-this.options.slidesToShow).addClass("slick-center"):t===this.slideCount-1&&i.eq(this.options.slidesToShow).addClass("slick-center")),this.$slides.eq(t).addClass("slick-center")}else t>=0&&t<=this.slideCount-this.options.slidesToShow?this.$slides.slice(t,t+this.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):i.length<=this.options.slidesToShow?i.addClass("slick-active").attr("aria-hidden","false"):(s=this.slideCount%this.options.slidesToShow,n=!0===this.options.infinite?this.options.slidesToShow+t:t,this.options.slidesToShow==this.options.slidesToScroll&&this.slideCount-t<this.options.slidesToShow?i.slice(n-(this.options.slidesToShow-s),n+s).addClass("slick-active").attr("aria-hidden","false"):i.slice(n,n+this.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==this.options.lazyLoad&&"anticipated"!==this.options.lazyLoad||this.lazyLoad()},e.prototype.setupInfinite=function(){var e,i,n;if(!0===this.options.fade&&(this.options.centerMode=!1),!0===this.options.infinite&&!1===this.options.fade&&(i=null,this.slideCount>this.options.slidesToShow)){for(n=!0===this.options.centerMode?this.options.slidesToShow+1:this.options.slidesToShow,e=this.slideCount;e>this.slideCount-n;e-=1)i=e-1,t(this.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i-this.slideCount).prependTo(this.$slideTrack).addClass("slick-cloned");for(e=0;e<n+this.slideCount;e+=1)i=e,t(this.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i+this.slideCount).appendTo(this.$slideTrack).addClass("slick-cloned");this.$slideTrack.find(".slick-cloned").find("[id]").each(function(){t(this).attr("id","")})}},e.prototype.interrupt=function(t){t||this.autoPlay(),this.interrupted=t},e.prototype.selectHandler=function(e){var i=t(e.target).is(".slick-slide")?t(e.target):t(e.target).parents(".slick-slide"),n=parseInt(i.attr("data-slick-index"));n||(n=0),this.slideCount<=this.options.slidesToShow?this.slideHandler(n,!1,!0):this.slideHandler(n)},e.prototype.slideHandler=function(t,e,i){var n,s,o,r,a,l=null,c=this;if(e=e||!1,!(!0===c.animating&&!0===c.options.waitForAnimate||!0===c.options.fade&&c.currentSlide===t))if(!1===e&&c.asNavFor(t),n=t,l=c.getLeft(n),r=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?r:c.swipeLeft,!1===c.options.infinite&&!1===c.options.centerMode&&(t<0||t>c.getDotCount()*c.options.slidesToScroll))!1===c.options.fade&&(n=c.currentSlide,!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(r,function(){c.postSlide(n)}):c.postSlide(n));else if(!1===c.options.infinite&&!0===c.options.centerMode&&(t<0||t>c.slideCount-c.options.slidesToScroll))!1===c.options.fade&&(n=c.currentSlide,!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(r,function(){c.postSlide(n)}):c.postSlide(n));else{if(c.options.autoplay&&clearInterval(c.autoPlayTimer),s=n<0?c.slideCount%c.options.slidesToScroll!=0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+n:n>=c.slideCount?c.slideCount%c.options.slidesToScroll!=0?0:n-c.slideCount:n,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,s]),o=c.currentSlide,c.currentSlide=s,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&(a=(a=c.getNavTarget()).slick("getSlick")).slideCount<=a.options.slidesToShow&&a.setSlideClasses(c.currentSlide),c.updateDots(),c.updateArrows(),!0===c.options.fade)return!0!==i?(c.fadeSlideOut(o),c.fadeSlide(s,function(){c.postSlide(s)})):c.postSlide(s),void c.animateHeight();!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(l,function(){c.postSlide(s)}):c.postSlide(s)}},e.prototype.startLoad=function(){!0===this.options.arrows&&this.slideCount>this.options.slidesToShow&&(this.$prevArrow.hide(),this.$nextArrow.hide()),!0===this.options.dots&&this.slideCount>this.options.slidesToShow&&this.$dots.hide(),this.$slider.addClass("slick-loading")},e.prototype.swipeDirection=function(){var t,e,i,n;return t=this.touchObject.startX-this.touchObject.curX,e=this.touchObject.startY-this.touchObject.curY,i=Math.atan2(e,t),(n=Math.round(180*i/Math.PI))<0&&(n=360-Math.abs(n)),n<=45&&n>=0?!1===this.options.rtl?"left":"right":n<=360&&n>=315?!1===this.options.rtl?"left":"right":n>=135&&n<=225?!1===this.options.rtl?"right":"left":!0===this.options.verticalSwiping?n>=35&&n<=135?"down":"up":"vertical"},e.prototype.swipeEnd=function(t){var e,i;if(this.dragging=!1,this.swiping=!1,this.scrolling)return this.scrolling=!1,!1;if(this.interrupted=!1,this.shouldClick=!(this.touchObject.swipeLength>10),void 0===this.touchObject.curX)return!1;if(!0===this.touchObject.edgeHit&&this.$slider.trigger("edge",[this,this.swipeDirection()]),this.touchObject.swipeLength>=this.touchObject.minSwipe){switch(i=this.swipeDirection()){case"left":case"down":e=this.options.swipeToSlide?this.checkNavigable(this.currentSlide+this.getSlideCount()):this.currentSlide+this.getSlideCount(),this.currentDirection=0;break;case"right":case"up":e=this.options.swipeToSlide?this.checkNavigable(this.currentSlide-this.getSlideCount()):this.currentSlide-this.getSlideCount(),this.currentDirection=1}"vertical"!=i&&(this.slideHandler(e),this.touchObject={},this.$slider.trigger("swipe",[this,i]))}else this.touchObject.startX!==this.touchObject.curX&&(this.slideHandler(this.currentSlide),this.touchObject={})},e.prototype.swipeHandler=function(t){if(!(!1===this.options.swipe||"ontouchend"in document&&!1===this.options.swipe||!1===this.options.draggable&&-1!==t.type.indexOf("mouse")))switch(this.touchObject.fingerCount=t.originalEvent&&void 0!==t.originalEvent.touches?t.originalEvent.touches.length:1,this.touchObject.minSwipe=this.listWidth/this.options.touchThreshold,!0===this.options.verticalSwiping&&(this.touchObject.minSwipe=this.listHeight/this.options.touchThreshold),t.data.action){case"start":this.swipeStart(t);break;case"move":this.swipeMove(t);break;case"end":this.swipeEnd(t)}},e.prototype.swipeMove=function(t){var e,i,n,s,o,r;return o=void 0!==t.originalEvent?t.originalEvent.touches:null,!(!this.dragging||this.scrolling||o&&1!==o.length)&&(e=this.getLeft(this.currentSlide),this.touchObject.curX=void 0!==o?o[0].pageX:t.clientX,this.touchObject.curY=void 0!==o?o[0].pageY:t.clientY,this.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(this.touchObject.curX-this.touchObject.startX,2))),r=Math.round(Math.sqrt(Math.pow(this.touchObject.curY-this.touchObject.startY,2))),!this.options.verticalSwiping&&!this.swiping&&r>4?(this.scrolling=!0,!1):(!0===this.options.verticalSwiping&&(this.touchObject.swipeLength=r),i=this.swipeDirection(),void 0!==t.originalEvent&&this.touchObject.swipeLength>4&&(this.swiping=!0,t.preventDefault()),s=(!1===this.options.rtl?1:-1)*(this.touchObject.curX>this.touchObject.startX?1:-1),!0===this.options.verticalSwiping&&(s=this.touchObject.curY>this.touchObject.startY?1:-1),n=this.touchObject.swipeLength,this.touchObject.edgeHit=!1,!1===this.options.infinite&&(0===this.currentSlide&&"right"===i||this.currentSlide>=this.getDotCount()&&"left"===i)&&(n=this.touchObject.swipeLength*this.options.edgeFriction,this.touchObject.edgeHit=!0),!1===this.options.vertical?this.swipeLeft=e+n*s:this.swipeLeft=e+n*(this.$list.height()/this.listWidth)*s,!0===this.options.verticalSwiping&&(this.swipeLeft=e+n*s),!0!==this.options.fade&&!1!==this.options.touchMove&&(!0===this.animating?(this.swipeLeft=null,!1):void this.setCSS(this.swipeLeft))))},e.prototype.swipeStart=function(t){var e;if(this.interrupted=!0,1!==this.touchObject.fingerCount||this.slideCount<=this.options.slidesToShow)return this.touchObject={},!1;void 0!==t.originalEvent&&void 0!==t.originalEvent.touches&&(e=t.originalEvent.touches[0]),this.touchObject.startX=this.touchObject.curX=void 0!==e?e.pageX:t.clientX,this.touchObject.startY=this.touchObject.curY=void 0!==e?e.pageY:t.clientY,this.dragging=!0},e.prototype.unfilterSlides=e.prototype.slickUnfilter=function(){null!==this.$slidesCache&&(this.unload(),this.$slideTrack.children(this.options.slide).detach(),this.$slidesCache.appendTo(this.$slideTrack),this.reinit())},e.prototype.unload=function(){t(".slick-cloned",this.$slider).remove(),this.$dots&&this.$dots.remove(),this.$prevArrow&&this.htmlExpr.test(this.options.prevArrow)&&this.$prevArrow.remove(),this.$nextArrow&&this.htmlExpr.test(this.options.nextArrow)&&this.$nextArrow.remove(),this.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},e.prototype.unslick=function(t){this.$slider.trigger("unslick",[this,t]),this.destroy()},e.prototype.updateArrows=function(){Math.floor(this.options.slidesToShow/2),!0===this.options.arrows&&this.slideCount>this.options.slidesToShow&&!this.options.infinite&&(this.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),this.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===this.currentSlide?(this.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),this.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):this.currentSlide>=this.slideCount-this.options.slidesToShow&&!1===this.options.centerMode?(this.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),this.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):this.currentSlide>=this.slideCount-1&&!0===this.options.centerMode&&(this.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),this.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},e.prototype.updateDots=function(){null!==this.$dots&&(this.$dots.find("li").removeClass("slick-active").end(),this.$dots.find("li").eq(Math.floor(this.currentSlide/this.options.slidesToScroll)).addClass("slick-active"))},e.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},t.fn.slick=function(){var t,i,n=arguments[0],s=Array.prototype.slice.call(arguments,1),o=this.length;for(t=0;t<o;t++)if("object"==typeof n||void 0===n?this[t].slick=new e(this[t],n):i=this[t].slick[n].apply(this[t].slick,s),void 0!==i)return i;return this}}),function(t){"object"==typeof module&&"object"==typeof module.exports?t(require("jquery"),window,document):t(jQuery,window,document)}(function(t,e,i,n){var s=[],o=function(){return s.length?s[s.length-1]:null},r=function(){var t,e=!1;for(t=s.length-1;t>=0;t--)s[t].$blocker&&(s[t].$blocker.toggleClass("current",!e).toggleClass("behind",e),e=!0)};t.modal=function(e,i){var n,r;if(this.$body=t("body"),this.options=t.extend({},t.modal.defaults,i),this.options.doFade=!isNaN(parseInt(this.options.fadeDuration,10)),this.$blocker=null,this.options.closeExisting)for(;t.modal.isActive();)t.modal.close();if(s.push(this),e.is("a"))if(r=e.attr("href"),this.anchor=e,/^#/.test(r)){if(this.$elm=t(r),1!==this.$elm.length)return null;this.$body.append(this.$elm),this.open()}else this.$elm=t("<div>"),this.$body.append(this.$elm),n=function(t,e){e.elm.remove()},this.showSpinner(),e.trigger(t.modal.AJAX_SEND),t.get(r).done(function(i){if(t.modal.isActive()){e.trigger(t.modal.AJAX_SUCCESS);var s=o();s.$elm.empty().append(i).on(t.modal.CLOSE,n),s.hideSpinner(),s.open(),e.trigger(t.modal.AJAX_COMPLETE)}}).fail(function(){e.trigger(t.modal.AJAX_FAIL);o().hideSpinner(),s.pop(),e.trigger(t.modal.AJAX_COMPLETE)});else this.$elm=e,this.anchor=e,this.$body.append(this.$elm),this.open()},t.modal.prototype={constructor:t.modal,open:function(){var e=this;this.block(),this.anchor.blur(),this.options.doFade?setTimeout(function(){e.show()},this.options.fadeDuration*this.options.fadeDelay):this.show(),t(i).off("keydown.modal").on("keydown.modal",function(t){var e=o();27===t.which&&e.options.escapeClose&&e.close()}),this.options.clickClose&&this.$blocker.click(function(e){e.target===this&&t.modal.close()})},close:function(){s.pop(),this.unblock(),this.hide(),t.modal.isActive()||t(i).off("keydown.modal")},block:function(){this.$elm.trigger(t.modal.BEFORE_BLOCK,[this._ctx()]),this.$body.css("overflow","hidden"),this.$blocker=t('<div class="'+this.options.blockerClass+' blocker current"></div>').appendTo(this.$body),r(),this.options.doFade&&this.$blocker.css("opacity",0).animate({opacity:1},this.options.fadeDuration),this.$elm.trigger(t.modal.BLOCK,[this._ctx()])},unblock:function(e){!e&&this.options.doFade?this.$blocker.fadeOut(this.options.fadeDuration,this.unblock.bind(this,!0)):(this.$blocker.children().appendTo(this.$body),this.$blocker.remove(),this.$blocker=null,r(),t.modal.isActive()||this.$body.css("overflow",""))},show:function(){this.$elm.trigger(t.modal.BEFORE_OPEN,[this._ctx()]),this.options.showClose&&(this.closeButton=t('<a href="#close-modal" rel="modal:close" class="close-modal '+this.options.closeClass+'">'+this.options.closeText+"</a>"),this.$elm.append(this.closeButton)),this.$elm.addClass(this.options.modalClass).appendTo(this.$blocker),this.options.doFade?this.$elm.css({opacity:0,display:"inline-block"}).animate({opacity:1},this.options.fadeDuration):this.$elm.css("display","inline-block"),this.$elm.trigger(t.modal.OPEN,[this._ctx()])},hide:function(){this.$elm.trigger(t.modal.BEFORE_CLOSE,[this._ctx()]),this.closeButton&&this.closeButton.remove();var e=this;this.options.doFade?this.$elm.fadeOut(this.options.fadeDuration,function(){e.$elm.trigger(t.modal.AFTER_CLOSE,[e._ctx()])}):this.$elm.hide(0,function(){e.$elm.trigger(t.modal.AFTER_CLOSE,[e._ctx()])}),this.$elm.trigger(t.modal.CLOSE,[this._ctx()])},showSpinner:function(){this.options.showSpinner&&(this.spinner=this.spinner||t('<div class="'+this.options.modalClass+'-spinner"></div>').append(this.options.spinnerHtml),this.$body.append(this.spinner),this.spinner.show())},hideSpinner:function(){this.spinner&&this.spinner.remove()},_ctx:function(){return{elm:this.$elm,$elm:this.$elm,$blocker:this.$blocker,options:this.options}}},t.modal.close=function(e){if(t.modal.isActive()){e&&e.preventDefault();var i=o();return i.close(),i.$elm}},t.modal.isActive=function(){return s.length>0},t.modal.getCurrent=o,t.modal.defaults={closeExisting:!0,escapeClose:!0,clickClose:!0,closeText:"Close",closeClass:"",modalClass:"modal",blockerClass:"jquery-modal",spinnerHtml:'<div class="rect1"></div><div class="rect2"></div><div class="rect3"></div><div class="rect4"></div>',showSpinner:!0,showClose:!0,fadeDuration:null,fadeDelay:1},t.modal.BEFORE_BLOCK="modal:before-block",t.modal.BLOCK="modal:block",t.modal.BEFORE_OPEN="modal:before-open",t.modal.OPEN="modal:open",t.modal.BEFORE_CLOSE="modal:before-close",t.modal.CLOSE="modal:close",t.modal.AFTER_CLOSE="modal:after-close",t.modal.AJAX_SEND="modal:ajax:send",t.modal.AJAX_SUCCESS="modal:ajax:success",t.modal.AJAX_FAIL="modal:ajax:fail",t.modal.AJAX_COMPLETE="modal:ajax:complete",t.fn.modal=function(e){return 1===this.length&&new t.modal(this,e),this},t(i).on("click.modal",'a[rel~="modal:close"]',t.modal.close),t(i).on("click.modal",'a[rel~="modal:open"]',function(e){e.preventDefault(),t(this).modal()})}),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof module&&module.exports?module.exports=t(require("jquery")):t(jQuery)}(function(t){t.extend(t.fn,{validate:function(e){if(this.length){var i=t.data(this[0],"validator");return i||(this.attr("novalidate","novalidate"),i=new t.validator(e,this[0]),t.data(this[0],"validator",i),i.settings.onsubmit&&(this.on("click.validate",":submit",function(e){i.submitButton=e.currentTarget,t(this).hasClass("cancel")&&(i.cancelSubmit=!0),void 0!==t(this).attr("formnovalidate")&&(i.cancelSubmit=!0)}),this.on("submit.validate",function(e){function n(){var n,s;return i.submitButton&&(i.settings.submitHandler||i.formSubmitted)&&(n=t("<input type='hidden'/>").attr("name",i.submitButton.name).val(t(i.submitButton).val()).appendTo(i.currentForm)),!i.settings.submitHandler||(s=i.settings.submitHandler.call(i,i.currentForm,e),n&&n.remove(),void 0!==s&&s)}return i.settings.debug&&e.preventDefault(),i.cancelSubmit?(i.cancelSubmit=!1,n()):i.form()?i.pendingRequest?(i.formSubmitted=!0,!1):n():(i.focusInvalid(),!1)})),i)}e&&e.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing.")},valid:function(){var e,i,n;return t(this[0]).is("form")?e=this.validate().form():(n=[],e=!0,i=t(this[0].form).validate(),this.each(function(){(e=i.element(this)&&e)||(n=n.concat(i.errorList))}),i.errorList=n),e},rules:function(e,i){var n,s,o,r,a,l,c=this[0];if(null!=c&&(!c.form&&c.hasAttribute("contenteditable")&&(c.form=this.closest("form")[0],c.name=this.attr("name")),null!=c.form)){if(e)switch(n=t.data(c.form,"validator").settings,s=n.rules,o=t.validator.staticRules(c),e){case"add":t.extend(o,t.validator.normalizeRule(i)),delete o.messages,s[c.name]=o,i.messages&&(n.messages[c.name]=t.extend(n.messages[c.name],i.messages));break;case"remove":return i?(l={},t.each(i.split(/\s/),function(t,e){l[e]=o[e],delete o[e]}),l):(delete s[c.name],o)}return(r=t.validator.normalizeRules(t.extend({},t.validator.classRules(c),t.validator.attributeRules(c),t.validator.dataRules(c),t.validator.staticRules(c)),c)).required&&(a=r.required,delete r.required,r=t.extend({required:a},r)),r.remote&&(a=r.remote,delete r.remote,r=t.extend(r,{remote:a})),r}}}),t.extend(t.expr.pseudos||t.expr[":"],{blank:function(e){return!t.trim(""+t(e).val())},filled:function(e){var i=t(e).val();return null!==i&&!!t.trim(""+i)},unchecked:function(e){return!t(e).prop("checked")}}),t.validator=function(e,i){this.settings=t.extend(!0,{},t.validator.defaults,e),this.currentForm=i,this.init()},t.validator.format=function(e,i){return 1===arguments.length?function(){var i=t.makeArray(arguments);return i.unshift(e),t.validator.format.apply(this,i)}:void 0===i?e:(arguments.length>2&&i.constructor!==Array&&(i=t.makeArray(arguments).slice(1)),i.constructor!==Array&&(i=[i]),t.each(i,function(t,i){e=e.replace(new RegExp("\\{"+t+"\\}","g"),function(){return i})}),e)},t.extend(t.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",pendingClass:"pending",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:t([]),errorLabelContainer:t([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(t){this.lastActive=t,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,t,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(t)))},onfocusout:function(t){this.checkable(t)||!(t.name in this.submitted)&&this.optional(t)||this.element(t)},onkeyup:function(e,i){9===i.which&&""===this.elementValue(e)||-1!==t.inArray(i.keyCode,[16,17,18,20,35,36,37,38,39,40,45,144,225])||(e.name in this.submitted||e.name in this.invalid)&&this.element(e)},onclick:function(t){t.name in this.submitted?this.element(t):t.parentNode.name in this.submitted&&this.element(t.parentNode)},highlight:function(e,i,n){"radio"===e.type?this.findByName(e.name).addClass(i).removeClass(n):t(e).addClass(i).removeClass(n)},unhighlight:function(e,i,n){"radio"===e.type?this.findByName(e.name).removeClass(i).addClass(n):t(e).removeClass(i).addClass(n)}},setDefaults:function(e){t.extend(t.validator.defaults,e)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date (ISO).",number:"Please enter a valid number.",digits:"Please enter only digits.",equalTo:"Please enter the same value again.",maxlength:t.validator.format("Please enter no more than {0} characters."),minlength:t.validator.format("Please enter at least {0} characters."),rangelength:t.validator.format("Please enter a value between {0} and {1} characters long."),range:t.validator.format("Please enter a value between {0} and {1}."),max:t.validator.format("Please enter a value less than or equal to {0}."),min:t.validator.format("Please enter a value greater than or equal to {0}."),step:t.validator.format("Please enter a multiple of {0}.")},autoCreateRanges:!1,prototype:{init:function(){function e(e){!this.form&&this.hasAttribute("contenteditable")&&(this.form=t(this).closest("form")[0],this.name=t(this).attr("name"));var i=t.data(this.form,"validator"),n="on"+e.type.replace(/^validate/,""),s=i.settings;s[n]&&!t(this).is(s.ignore)&&s[n].call(i,this,e)}this.labelContainer=t(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||t(this.currentForm),this.containers=t(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var i,n=this.groups={};t.each(this.settings.groups,function(e,i){"string"==typeof i&&(i=i.split(/\s/)),t.each(i,function(t,i){n[i]=e})}),i=this.settings.rules,t.each(i,function(e,n){i[e]=t.validator.normalizeRule(n)}),t(this.currentForm).on("focusin.validate focusout.validate keyup.validate",":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable], [type='button']",e).on("click.validate","select, option, [type='radio'], [type='checkbox']",e),this.settings.invalidHandler&&t(this.currentForm).on("invalid-form.validate",this.settings.invalidHandler)},form:function(){return this.checkForm(),t.extend(this.submitted,this.errorMap),this.invalid=t.extend({},this.errorMap),this.valid()||t(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var t=0,e=this.currentElements=this.elements();e[t];t++)this.check(e[t]);return this.valid()},element:function(e){var i,n,s=this.clean(e),o=this.validationTargetFor(s),r=this,a=!0;return void 0===o?delete this.invalid[s.name]:(this.prepareElement(o),this.currentElements=t(o),(n=this.groups[o.name])&&t.each(this.groups,function(t,e){e===n&&t!==o.name&&(s=r.validationTargetFor(r.clean(r.findByName(t))))&&s.name in r.invalid&&(r.currentElements.push(s),a=r.check(s)&&a)}),i=!1!==this.check(o),a=a&&i,this.invalid[o.name]=!i,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),t(e).attr("aria-invalid",!i)),a},showErrors:function(e){if(e){var i=this;t.extend(this.errorMap,e),this.errorList=t.map(this.errorMap,function(t,e){return{message:t,element:i.findByName(e)[0]}}),this.successList=t.grep(this.successList,function(t){return!(t.name in e)})}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){t.fn.resetForm&&t(this.currentForm).resetForm(),this.invalid={},this.submitted={},this.prepareForm(),this.hideErrors();var e=this.elements().removeData("previousValue").removeAttr("aria-invalid");this.resetElements(e)},resetElements:function(t){var e;if(this.settings.unhighlight)for(e=0;t[e];e++)this.settings.unhighlight.call(this,t[e],this.settings.errorClass,""),this.findByName(t[e].name).removeClass(this.settings.validClass);else t.removeClass(this.settings.errorClass).removeClass(this.settings.validClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(t){var e,i=0;for(e in t)void 0!==t[e]&&null!==t[e]&&!1!==t[e]&&i++;return i},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(t){t.not(this.containers).text(""),this.addWrapper(t).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{t(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").focus().trigger("focusin")}catch(t){}},findLastActive:function(){var e=this.lastActive;return e&&1===t.grep(this.errorList,function(t){return t.element.name===e.name}).length&&e},elements:function(){var e=this,i={};return t(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function(){var n=this.name||t(this).attr("name");return!n&&e.settings.debug&&window.console&&console.error("%o has no name assigned",this),this.hasAttribute("contenteditable")&&(this.form=t(this).closest("form")[0],this.name=n),!(n in i||!e.objectLength(t(this).rules()))&&(i[n]=!0,!0)})},clean:function(e){return t(e)[0]},errors:function(){var e=this.settings.errorClass.split(" ").join(".");return t(this.settings.errorElement+"."+e,this.errorContext)},resetInternals:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=t([]),this.toHide=t([])},reset:function(){this.resetInternals(),this.currentElements=t([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(t){this.reset(),this.toHide=this.errorsFor(t)},elementValue:function(e){var i,n,s=t(e),o=e.type;return"radio"===o||"checkbox"===o?this.findByName(e.name).filter(":checked").val():"number"===o&&void 0!==e.validity?e.validity.badInput?"NaN":s.val():(i=e.hasAttribute("contenteditable")?s.text():s.val(),"file"===o?"C:\\fakepath\\"===i.substr(0,12)?i.substr(12):(n=i.lastIndexOf("/"))>=0?i.substr(n+1):(n=i.lastIndexOf("\\"))>=0?i.substr(n+1):i:"string"==typeof i?i.replace(/\r/g,""):i)},check:function(e){e=this.validationTargetFor(this.clean(e));var i,n,s,o,r=t(e).rules(),a=t.map(r,function(t,e){return e}).length,l=!1,c=this.elementValue(e);if("function"==typeof r.normalizer?o=r.normalizer:"function"==typeof this.settings.normalizer&&(o=this.settings.normalizer),o){if("string"!=typeof(c=o.call(e,c)))throw new TypeError("The normalizer should return a string value.");delete r.normalizer}for(n in r){s={method:n,parameters:r[n]};try{if("dependency-mismatch"===(i=t.validator.methods[n].call(this,c,e,s.parameters))&&1===a){l=!0;continue}if(l=!1,"pending"===i)return void(this.toHide=this.toHide.not(this.errorsFor(e)));if(!i)return this.formatAndAdd(e,s),!1}catch(t){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+e.id+", check the '"+s.method+"' method.",t),t instanceof TypeError&&(t.message+=".  Exception occurred when checking element "+e.id+", check the '"+s.method+"' method."),t}}if(!l)return this.objectLength(r)&&this.successList.push(e),!0},customDataMessage:function(e,i){return t(e).data("msg"+i.charAt(0).toUpperCase()+i.substring(1).toLowerCase())||t(e).data("msg")},customMessage:function(t,e){var i=this.settings.messages[t];return i&&(i.constructor===String?i:i[e])},findDefined:function(){for(var t=0;t<arguments.length;t++)if(void 0!==arguments[t])return arguments[t]},defaultMessage:function(e,i){"string"==typeof i&&(i={method:i});var n=this.findDefined(this.customMessage(e.name,i.method),this.customDataMessage(e,i.method),!this.settings.ignoreTitle&&e.title||void 0,t.validator.messages[i.method],"<strong>Warning: No message defined for "+e.name+"</strong>"),s=/\$?\{(\d+)\}/g;return"function"==typeof n?n=n.call(this,i.parameters,e):s.test(n)&&(n=t.validator.format(n.replace(s,"{$1}"),i.parameters)),n},formatAndAdd:function(t,e){var i=this.defaultMessage(t,e);this.errorList.push({message:i,element:t,method:e.method}),this.errorMap[t.name]=i,this.submitted[t.name]=i},addWrapper:function(t){return this.settings.wrapper&&(t=t.add(t.parent(this.settings.wrapper))),t},defaultShowErrors:function(){var t,e,i;for(t=0;this.errorList[t];t++)i=this.errorList[t],this.settings.highlight&&this.settings.highlight.call(this,i.element,this.settings.errorClass,this.settings.validClass),this.showLabel(i.element,i.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(t=0;this.successList[t];t++)this.showLabel(this.successList[t]);if(this.settings.unhighlight)for(t=0,e=this.validElements();e[t];t++)this.settings.unhighlight.call(this,e[t],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return t(this.errorList).map(function(){return this.element})},showLabel:function(e,i){var n,s,o,r,a=this.errorsFor(e),l=this.idOrName(e),c=t(e).attr("aria-describedby");a.length?(a.removeClass(this.settings.validClass).addClass(this.settings.errorClass),a.html(i)):(n=a=t("<"+this.settings.errorElement+">").attr("id",l+"-error").addClass(this.settings.errorClass).html(i||""),this.settings.wrapper&&(n=a.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(n):this.settings.errorPlacement?this.settings.errorPlacement.call(this,n,t(e)):n.insertAfter(e),a.is("label")?a.attr("for",l):0===a.parents("label[for='"+this.escapeCssMeta(l)+"']").length&&(o=a.attr("id"),c?c.match(new RegExp("\\b"+this.escapeCssMeta(o)+"\\b"))||(c+=" "+o):c=o,t(e).attr("aria-describedby",c),(s=this.groups[e.name])&&(r=this,t.each(r.groups,function(e,i){i===s&&t("[name='"+r.escapeCssMeta(e)+"']",r.currentForm).attr("aria-describedby",a.attr("id"))})))),!i&&this.settings.success&&(a.text(""),"string"==typeof this.settings.success?a.addClass(this.settings.success):this.settings.success(a,e)),this.toShow=this.toShow.add(a)},errorsFor:function(e){var i=this.escapeCssMeta(this.idOrName(e)),n=t(e).attr("aria-describedby"),s="label[for='"+i+"'], label[for='"+i+"'] *";return n&&(s=s+", #"+this.escapeCssMeta(n).replace(/\s+/g,", #")),this.errors().filter(s)},escapeCssMeta:function(t){return t.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g,"\\$1")},idOrName:function(t){return this.groups[t.name]||(this.checkable(t)?t.name:t.id||t.name)},validationTargetFor:function(e){return this.checkable(e)&&(e=this.findByName(e.name)),t(e).not(this.settings.ignore)[0]},checkable:function(t){return/radio|checkbox/i.test(t.type)},findByName:function(e){return t(this.currentForm).find("[name='"+this.escapeCssMeta(e)+"']")},getLength:function(e,i){switch(i.nodeName.toLowerCase()){case"select":return t("option:selected",i).length;case"input":if(this.checkable(i))return this.findByName(i.name).filter(":checked").length}return e.length},depend:function(t,e){return!this.dependTypes[typeof t]||this.dependTypes[typeof t](t,e)},dependTypes:{boolean:function(t){return t},string:function(e,i){return!!t(e,i.form).length},function:function(t,e){return t(e)}},optional:function(e){var i=this.elementValue(e);return!t.validator.methods.required.call(this,i,e)&&"dependency-mismatch"},startRequest:function(e){this.pending[e.name]||(this.pendingRequest++,t(e).addClass(this.settings.pendingClass),this.pending[e.name]=!0)},stopRequest:function(e,i){this.pendingRequest--,this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[e.name],t(e).removeClass(this.settings.pendingClass),i&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(t(this.currentForm).submit(),this.submitButton&&t("input:hidden[name='"+this.submitButton.name+"']",this.currentForm).remove(),this.formSubmitted=!1):!i&&0===this.pendingRequest&&this.formSubmitted&&(t(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(e,i){return i="string"==typeof i&&i||"remote",t.data(e,"previousValue")||t.data(e,"previousValue",{old:null,valid:!0,message:this.defaultMessage(e,{method:i})})},destroy:function(){this.resetForm(),t(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur")}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(e,i){e.constructor===String?this.classRuleSettings[e]=i:t.extend(this.classRuleSettings,e)},classRules:function(e){var i={},n=t(e).attr("class");return n&&t.each(n.split(" "),function(){this in t.validator.classRuleSettings&&t.extend(i,t.validator.classRuleSettings[this])}),i},normalizeAttributeRule:function(t,e,i,n){/min|max|step/.test(i)&&(null===e||/number|range|text/.test(e))&&(n=Number(n),isNaN(n)&&(n=void 0)),n||0===n?t[i]=n:e===i&&"range"!==e&&(t[i]=!0)},attributeRules:function(e){var i,n,s={},o=t(e),r=e.getAttribute("type");for(i in t.validator.methods)"required"===i?(""===(n=e.getAttribute(i))&&(n=!0),n=!!n):n=o.attr(i),this.normalizeAttributeRule(s,r,i,n);return s.maxlength&&/-1|2147483647|524288/.test(s.maxlength)&&delete s.maxlength,s},dataRules:function(e){var i,n,s={},o=t(e),r=e.getAttribute("type");for(i in t.validator.methods)n=o.data("rule"+i.charAt(0).toUpperCase()+i.substring(1).toLowerCase()),this.normalizeAttributeRule(s,r,i,n);return s},staticRules:function(e){var i={},n=t.data(e.form,"validator");return n.settings.rules&&(i=t.validator.normalizeRule(n.settings.rules[e.name])||{}),i},normalizeRules:function(e,i){return t.each(e,function(n,s){if(!1!==s){if(s.param||s.depends){var o=!0;switch(typeof s.depends){case"string":o=!!t(s.depends,i.form).length;break;case"function":o=s.depends.call(i,i)}o?e[n]=void 0===s.param||s.param:(t.data(i.form,"validator").resetElements(t(i)),delete e[n])}}else delete e[n]}),t.each(e,function(n,s){e[n]=t.isFunction(s)&&"normalizer"!==n?s(i):s}),t.each(["minlength","maxlength"],function(){e[this]&&(e[this]=Number(e[this]))}),t.each(["rangelength","range"],function(){var i;e[this]&&(t.isArray(e[this])?e[this]=[Number(e[this][0]),Number(e[this][1])]:"string"==typeof e[this]&&(i=e[this].replace(/[\[\]]/g,"").split(/[\s,]+/),e[this]=[Number(i[0]),Number(i[1])]))}),t.validator.autoCreateRanges&&(null!=e.min&&null!=e.max&&(e.range=[e.min,e.max],delete e.min,delete e.max),null!=e.minlength&&null!=e.maxlength&&(e.rangelength=[e.minlength,e.maxlength],delete e.minlength,delete e.maxlength)),e},normalizeRule:function(e){if("string"==typeof e){var i={};t.each(e.split(/\s/),function(){i[this]=!0}),e=i}return e},addMethod:function(e,i,n){t.validator.methods[e]=i,t.validator.messages[e]=void 0!==n?n:t.validator.messages[e],i.length<3&&t.validator.addClassRules(e,t.validator.normalizeRule(e))},methods:{required:function(e,i,n){if(!this.depend(n,i))return"dependency-mismatch";if("select"===i.nodeName.toLowerCase()){var s=t(i).val();return s&&s.length>0}return this.checkable(i)?this.getLength(e,i)>0:e.length>0},email:function(t,e){return this.optional(e)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(t)},url:function(t,e){return this.optional(e)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(t)},date:function(t,e){return this.optional(e)||!/Invalid|NaN/.test(new Date(t).toString())},dateISO:function(t,e){return this.optional(e)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(t)},number:function(t,e){return this.optional(e)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(t)},digits:function(t,e){return this.optional(e)||/^\d+$/.test(t)},minlength:function(e,i,n){var s=t.isArray(e)?e.length:this.getLength(e,i);return this.optional(i)||s>=n},maxlength:function(e,i,n){var s=t.isArray(e)?e.length:this.getLength(e,i);return this.optional(i)||s<=n},rangelength:function(e,i,n){var s=t.isArray(e)?e.length:this.getLength(e,i);return this.optional(i)||s>=n[0]&&s<=n[1]},min:function(t,e,i){return this.optional(e)||t>=i},max:function(t,e,i){return this.optional(e)||t<=i},range:function(t,e,i){return this.optional(e)||t>=i[0]&&t<=i[1]},step:function(e,i,n){var s,o=t(i).attr("type"),r="Step attribute on input type "+o+" is not supported.",a=new RegExp("\\b"+o+"\\b"),l=function(t){var e=(""+t).match(/(?:\.(\d+))?$/);return e&&e[1]?e[1].length:0},c=function(t){return Math.round(t*Math.pow(10,s))},d=!0;if(o&&!a.test(["text","number","range"].join()))throw new Error(r);return s=l(n),(l(e)>s||c(e)%c(n)!=0)&&(d=!1),this.optional(i)||d},equalTo:function(e,i,n){var s=t(n);return this.settings.onfocusout&&s.not(".validate-equalTo-blur").length&&s.addClass("validate-equalTo-blur").on("blur.validate-equalTo",function(){t(i).valid()}),e===s.val()},remote:function(e,i,n,s){if(this.optional(i))return"dependency-mismatch";s="string"==typeof s&&s||"remote";var o,r,a,l=this.previousValue(i,s);return this.settings.messages[i.name]||(this.settings.messages[i.name]={}),l.originalMessage=l.originalMessage||this.settings.messages[i.name][s],this.settings.messages[i.name][s]=l.message,n="string"==typeof n&&{url:n}||n,a=t.param(t.extend({data:e},n.data)),l.old===a?l.valid:(l.old=a,o=this,this.startRequest(i),r={},r[i.name]=e,t.ajax(t.extend(!0,{mode:"abort",port:"validate"+i.name,dataType:"json",data:r,context:o.currentForm,success:function(t){var n,r,a,c=!0===t||"true"===t;o.settings.messages[i.name][s]=l.originalMessage,c?(a=o.formSubmitted,o.resetInternals(),o.toHide=o.errorsFor(i),o.formSubmitted=a,o.successList.push(i),o.invalid[i.name]=!1,o.showErrors()):(n={},r=t||o.defaultMessage(i,{method:s,parameters:e}),n[i.name]=l.message=r,o.invalid[i.name]=!0,o.showErrors(n)),l.valid=c,o.stopRequest(i,c)}},n)),"pending")}}});var e,i={};return t.ajaxPrefilter?t.ajaxPrefilter(function(t,e,n){var s=t.port;"abort"===t.mode&&(i[s]&&i[s].abort(),i[s]=n)}):(e=t.ajax,t.ajax=function(n){var s=("mode"in n?n:t.ajaxSettings).mode,o=("port"in n?n:t.ajaxSettings).port;return"abort"===s?(i[o]&&i[o].abort(),i[o]=e.apply(this,arguments),i[o]):e.apply(this,arguments)}),t}),function(t){function e(n){if(i[n])return i[n].exports;var s=i[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,e),s.l=!0,s.exports}var i={};e.m=t,e.c=i,e.i=function(t){return t},e.d=function(t,i,n){e.o(t,i)||Object.defineProperty(t,i,{configurable:!1,enumerable:!0,get:n})},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=3)}([function(t,e,i){"use strict";function n(t,e){for(var i in t)t.hasOwnProperty(i)&&e(i,t[i])}var s=!1;try{var o=Object.defineProperty({},"passive",{get:function(){s=!0}});window.addEventListener("test",null,o)}catch(t){}t.exports.event=function(t,e,i,n){var o="on"==n?"add":"remove";e.split(" ").forEach(function(e){var n=!1;-1!=["scroll","touchstart","touchmove"].indexOf(e)&&s&&(n={passive:!0}),t[o+"EventListener"](e,i,n)})},t.exports.css=function(t,e,i){var s;if(void 0===i){if("string"==typeof e)return t.style[e];s=e}else s={},s[e]=i;n(s,function(e,i){t.style[e]=i})},t.exports.add=function(t,e){e&&t.classList.add(e)},t.exports.rm=function(t,e){e&&t.classList.remove(e)},t.exports.has=function(t,e){return!!e&&t.classList.contains(e)},t.exports.clone=function(t){var e={};return n(t||{},function(t,i){e[t]=i}),e},t.exports.qs=function(t,e){return t instanceof HTMLElement?t:(e||document).querySelector(t)},t.exports.each=n},function(t,e,i){"use strict";function n(t){var e,i,s=t&&t[0]||t,a="string"==typeof t||s instanceof HTMLElement?{root:t}:m(t),l={direction:"v",barOnCls:"_scrollbar",resizeDebounce:0,event:d,cssGuru:!1,impact:"scroller",position:"static"};a=a||{};for(var u in l)null==a[u]&&(a[u]=l[u]);e=this&&this instanceof c.jQuery,a._chain?i=a.root:e?a.root=i=this[0]:i=g(a.root||a.scroller);var h=r(i,a.direction),p=+h;if(a.index=p,p==p&&null!==h&&w[p])return w[p];a.root&&a.scroller?a.scroller=g(a.scroller,i):a.scroller=i,a.root=i;var f=function(t){var e=new n.prototype.constructor(t);return o(e,t.event,"on"),r(e.root,t.direction,"on",w.length),w.push(e),e.update(),e}(a);return f.autoUpdate&&f.autoUpdate(),f}function s(){return(new Date).getTime()}function o(t,e,i){t._eventHandlers=t._eventHandlers||[{element:t.scroller,handler:function(e){t.scroll(e)},type:"scroll"},{element:t.root,handler:function(){t.update()},type:"transitionend animationend"},{element:t.scroller,handler:function(){t.update()},type:"keyup"},{element:t.bar,handler:function(e){e.preventDefault(),t.selection(),t.drag.now=1,t.draggingCls&&h(t.root,t.draggingCls)},type:"touchstart mousedown"},{element:document,handler:function(){t.selection(1),t.drag.now=0,t.draggingCls&&f(t.root,t.draggingCls)},type:"mouseup blur touchend"},{element:document,handler:function(e){2!=e.button&&t._pos0(e)},type:"touchstart mousedown"},{element:document,handler:function(e){t.drag.now&&t.drag(e)},type:"mousemove touchmove"},{element:c,handler:function(){t.update()},type:"resize"},{element:t.root,handler:function(){t.update()},type:"sizeChange"},{element:t.clipper,handler:function(){t.clipperOnScroll()},type:"scroll"}],function(t,e){var i=0,n=t;for(void 0!==n.length&&n!==c||(n=[n]);n[i];)e.call(this,n[i],i),i++}(t._eventHandlers,function(t){if(t.element)if(t.element.length&&t.element!==c)for(var n=0;n<t.element.length;n++)e(t.element[n],t.type,t.handler,i);else e(t.element,t.type,t.handler,i)})}function r(t,e,i,n){var s="data-baron-"+e+"-id";return"on"==i?t.setAttribute(s,n):"off"==i&&t.removeAttribute(s),t.getAttribute(s)}function a(t){if(this.events&&this.events[t])for(var e=0;e<this.events[t].length;e++){var i=Array.prototype.slice.call(arguments,1);this.events[t][e].apply(this,i)}}var l=function(){return this||(0,eval)("this")}(),c=l&&l.window||l,d=i(0).event,u=i(0).css,h=i(0).add,p=i(0).has,f=i(0).rm,m=i(0).clone,g=i(0).qs,v=n,y=["left","top","right","bottom","width","height"],w=[],b={v:{x:"Y",pos:y[1],oppos:y[3],crossPos:y[0],crossOpPos:y[2],size:y[5],crossSize:y[4],crossMinSize:"min-"+y[4],crossMaxSize:"max-"+y[4],client:"clientHeight",crossClient:"clientWidth",scrollEdge:"scrollLeft",offset:"offsetHeight",crossOffset:"offsetWidth",offsetPos:"offsetTop",scroll:"scrollTop",scrollSize:"scrollHeight"},h:{x:"X",pos:y[0],oppos:y[2],crossPos:y[1],crossOpPos:y[3],size:y[4],crossSize:y[5],crossMinSize:"min-"+y[5],crossMaxSize:"max-"+y[5],client:"clientWidth",crossClient:"clientHeight",scrollEdge:"scrollTop",offset:"offsetWidth",crossOffset:"offsetHeight",offsetPos:"offsetLeft",scroll:"scrollLeft",scrollSize:"scrollWidth"}},k=15,x=/[\s\S]*Macintosh[\s\S]*\) Gecko[\s\S]*/.test(c.navigator&&c.navigator.userAgent);(n.prototype={_debounce:function(t,e){var i,n,o=this,r=function(){if(o._disposed)return clearTimeout(i),void(i=o=null);var a=s()-n;a<e&&a>=0?i=setTimeout(r,e-a):(i=null,t())};return function(){n=s(),i||(i=setTimeout(r,e))}},constructor:function(t){function e(){return r[this.origin.client]-this.barTopLimit-this.bar[this.origin.offset]}function i(){return!1}var n,o,r,l,d,m,v;if(m=s(),this.params=t,this.event=t.event,this.events={},this.root=t.root,this.scroller=g(t.scroller),this.bar=g(t.bar,this.root),r=this.track=g(t.track,this.root),!this.track&&this.bar&&(r=this.bar.parentNode),this.clipper=this.scroller.parentNode,this.direction=t.direction,this.rtl=t.rtl,this.origin=b[this.direction],this.barOnCls=t.barOnCls,this.scrollingCls=t.scrollingCls,this.draggingCls=t.draggingCls,this.impact=t.impact,this.position=t.position,this.rtl=t.rtl,this.barTopLimit=0,this.resizeDebounce=t.resizeDebounce,this.cursor=function(t){return t["client"+this.origin.x]||(((t.originalEvent||t).touches||{})[0]||{})["page"+this.origin.x]},this.pos=function(t){var e="page"+this.origin.x+"Offset",i=this.scroller[e]?e:this.origin.scroll;return void 0!==t&&(this.scroller[i]=t),this.scroller[i]},this.rpos=function(t){var e=this.scroller[this.origin.scrollSize]-this.scroller[this.origin.client];return(t?this.pos(t*e):this.pos())/(e||1)},this.barOn=function(t){if(this.barOnCls){var e=this.scroller[this.origin.client]>=this.scroller[this.origin.scrollSize];t||e?p(this.root,this.barOnCls)&&f(this.root,this.barOnCls):p(this.root,this.barOnCls)||h(this.root,this.barOnCls)}},this._pos0=function(t){o=this.cursor(t)-n},this.drag=function(t){var i=function(t){return(t-this.barTopLimit)/e.call(this)}.call(this,this.cursor(t)-o),n=this.scroller[this.origin.scrollSize]-this.scroller[this.origin.client];this.scroller[this.origin.scroll]=i*n},this.selection=function(t){this.event(document,"selectpos selectstart",i,t?"off":"on")},this.resize=function(){function t(){var t,i,n=e.scroller[e.origin.crossOffset],o=e.scroller[e.origin.crossClient],r=0;if(x?r=k:o>0&&0===n&&(n=o+17),n)if(e.barOn(),"scroller"==e.impact){var l=n-o+r;if("static"==e.position)t=u(e.scroller,e.origin.crossSize),i=e.clipper[e.origin.crossClient]+l+"px",t!=i&&e._setCrossSizes(e.scroller,i);else{var c={},d=e.rtl?"Left":"Right";"h"==e.direction&&(d="Bottom"),c["padding"+d]=l+"px",u(e.scroller,c)}}else t=u(e.clipper,e.origin.crossSize),i=o+"px",t!=i&&e._setCrossSizes(e.clipper,i);Array.prototype.unshift.call(arguments,"resize"),a.apply(e,arguments),m=s()}var e=this,i=void 0===e.resizeDebounce?300:e.resizeDebounce,n=0;s()-m<i&&(clearTimeout(l),n=i),n?l=setTimeout(t,n):t()},this.updatePositions=function(t){var i;this.bar&&(i=(r[this.origin.client]-this.barTopLimit)*this.scroller[this.origin.client]/this.scroller[this.origin.scrollSize],(t||parseInt(v,10)!=parseInt(i,10))&&(function(t){var e=this.barMinSize||20,i=t;i>0&&i<e&&(i=e),this.bar&&u(this.bar,this.origin.size,parseInt(i,10)+"px")}.call(this,i),v=i),n=function(t){return t*e.call(this)+this.barTopLimit}.call(this,this.rpos()),function(t){if(this.bar){var e=u(this.bar,this.origin.pos),i=+t+"px";i&&i!=e&&u(this.bar,this.origin.pos,i)}}.call(this,n)),Array.prototype.unshift.call(arguments,"scroll"),a.apply(this,arguments)},this.scroll=function(){var t=this;t.updatePositions(),t.scrollingCls&&(d||h(t.root,t.scrollingCls),clearTimeout(d),d=setTimeout(function(){f(t.root,t.scrollingCls),d=void 0},300))},this.clipperOnScroll=function(){this.rtl?this.clipper[this.origin.scrollEdge]=this.clipper[this.origin.scrollSize]:this.clipper[this.origin.scrollEdge]=0},this._setCrossSizes=function(t,e){var i={};i[this.origin.crossSize]=e,i[this.origin.crossMinSize]=e,i[this.origin.crossMaxSize]=e,u(t,i)},this._dumbCss=function(e){if(!t.cssGuru){var i=e?"hidden":null,n=e?"none":null;u(this.clipper,{overflow:i,msOverflowStyle:n,position:"static"==this.position?"":"relative"});var s=e?"scroll":null,o={};o["overflow-"+("v"==this.direction?"y":"x")]=s,o["box-sizing"]="border-box",o.margin="0",o.border="0","absolute"==this.position&&(o.position="absolute",o.top="0","h"==this.direction?o.left=o.right="0":(o.bottom="0",o.right=this.rtl?"0":"",o.left=this.rtl?"":"0")),u(this.scroller,o)}},this._dumbCss(!0),x){var y="paddingRight",w={},T=c.getComputedStyle(this.scroller)[[y]];"h"==t.direction?y="paddingBottom":t.rtl&&(y="paddingLeft");var S=parseInt(T,10);S!=S&&(S=0),w[y]=k+S+"px",u(this.scroller,w)}return this},update:function(t){return a.call(this,"upd",t),this.resize(1),this.updatePositions(1),this},dispose:function(){o(this,this.event,"off"),r(this.root,this.params.direction,"off"),"v"==this.params.direction?this._setCrossSizes(this.scroller,""):this._setCrossSizes(this.clipper,""),this._dumbCss(!1),this.barOn(!0),a.call(this,"dispose"),w[this.params.index]=null,this.params=null,this._disposed=!0},on:function(t,e,i){for(var n=t.split(" "),s=0;s<n.length;s++)"init"==n[s]?e.call(this,i):(this.events[n[s]]=this.events[n[s]]||[],this.events[n[s]].push(function(t){e.call(this,t||i)}))},baron:function(t){return t.root=this.params.root,t.scroller=this.params.scroller,t.direction="v"==this.params.direction?"h":"v",t._chain=!0,n(t)}}).constructor.prototype=n.prototype,n.noConflict=function(){return c.baron=v,n},n.version="3.0.1",n.prototype.autoUpdate=i(2)(c),n.prototype.fix=i(5),n.prototype.controls=i(4),t.exports=n},function(t,e,i){"use strict";function n(t){function e(){s.root[s.origin.offset]?i():n||(n=setInterval(function(){s.root[s.origin.offset]&&(i(),s.update())},300))}function i(){clearInterval(n),n=null}var n,s=this;if(!this._au){var o=s._debounce(function(){s.update()},300);this._observer=new t(function(){e(),s.update(),o()}),this.on("init",function(){s._observer.observe(s.root,{childList:!0,subtree:!0,characterData:!0}),e()}),this.on("dispose",function(){s._observer.disconnect(),i(),delete s._observer}),this._au=!0}}t.exports=function(t){var e=t.MutationObserver||t.WebKitMutationObserver||t.MozMutationObserver||null;return function(){return e?(n.call(this,e),this):this}}},function(t,e,i){var n=i(1);window.baron=n,window.jQuery&&window.jQuery.fn&&(window.jQuery.fn.baron=n)},function(t,e,i){"use strict";var n=i(0).qs;t.exports=function(t){var e,i,s,o,r,a=this;o=t.screen||.9,t.forward&&(e=n(t.forward,this.clipper),r={element:e,handler:function(){var e=a.pos()+(t.delta||30);a.pos(e)},type:"click"},this._eventHandlers.push(r),this.event(r.element,r.type,r.handler,"on")),t.backward&&(i=n(t.backward,this.clipper),r={element:i,handler:function(){var e=a.pos()-(t.delta||30);a.pos(e)},type:"click"},this._eventHandlers.push(r),this.event(r.element,r.type,r.handler,"on")),t.track&&(s=!0===t.track?this.track:n(t.track,this.clipper))&&(r={element:s,handler:function(t){if(t.target==s){var e=t["offset"+a.origin.x],i=a.bar[a.origin.offsetPos],n=0;e<i?n=-1:e>i+a.bar[a.origin.offset]&&(n=1);var r=a.pos()+n*o*a.scroller[a.origin.client];a.pos(r)}},type:"mousedown"},this._eventHandlers.push(r),this.event(r.element,r.type,r.handler,"on"))}},function(t,e,i){"use strict";var n=(i(6),i(0).css),s=i(0).add,o=i(0).rm;t.exports=function(t){function e(t,e,i){var r=e,d=1==i?"pos":"oppos";l<(c.minView||0)&&(r=void 0),n(a[t],this.origin.pos,""),n(a[t],this.origin.oppos,""),o(a[t],c.outside),void 0!==r&&(r+="px",n(a[t],this.origin[d],r),s(a[t],c.outside))}function i(t){try{var e=document.createEvent("WheelEvent");e.initWebKitWheelEvent(t.originalEvent.wheelDeltaX,t.originalEvent.wheelDeltaY),p.dispatchEvent(e),t.preventDefault()}catch(t){}}function r(t){var e;for(var s in t)c[s]=t[s];if(c.elements instanceof HTMLElement?a=[c.elements]:"string"==typeof c.elements?a=this.scroller.querySelectorAll(c.elements):c.elements&&c.elements[0]instanceof HTMLElement&&(a=c.elements),a){l=this.scroller[this.origin.client];for(var o=0;o<a.length;o++)e={},e[this.origin.size]=a[o][this.origin.offset]+"px",a[o].parentNode!==this.scroller&&n(a[o].parentNode,e),e={},e[this.origin.crossSize]=a[o].parentNode[this.origin.crossClient]+"px",n(a[o],e),l-=a[o][this.origin.offset],h[o]=a[o].parentNode[this.origin.offsetPos],d[o]=d[o-1]||0,u[o]=u[o-1]||Math.min(h[o],0),a[o-1]&&(d[o]+=a[o-1][this.origin.offset],u[o]+=a[o-1][this.origin.offset]),0==o&&0==h[o]||(this.event(a[o],"mousewheel",i,"off"),this.event(a[o],"mousewheel",i));c.limiter&&a[0]&&(this.track&&this.track!=this.scroller?(e={},e[this.origin.pos]=a[0].parentNode[this.origin.offset]+"px",n(this.track,e)):this.barTopLimit=a[0].parentNode[this.origin.offset],this.scroll()),!1===c.limiter&&(this.barTopLimit=0)}var r={element:a,handler:function(){for(var t,e=this.parentNode.offsetTop,i=0;i<a.length;i++)a[i]===this&&(t=i);var n=e-d[t];c.scroll?c.scroll({x1:m.scroller.scrollTop,x2:n}):m.scroller.scrollTop=n},type:"click"};if(c.clickable){this._eventHandlers.push(r);for(var p=0;p<r.element.length;p++)f(r.element[p],r.type,r.handler,"on")}}var a,l,c={outside:"",inside:"",before:"",after:"",past:"",future:"",radius:0,minView:0},d=[],u=[],h=[],p=this.scroller,f=this.event,m=this;this.on("init",r,t);var g=[],v=[];return this.on("init scroll",function(){var t,i,n,r;if(a){var p;for(r=0;r<a.length;r++)t=0,h[r]-this.pos()<u[r]+c.radius?(t=1,i=d[r]):h[r]-this.pos()>u[r]+l-c.radius?(t=2,i=this.scroller[this.origin.client]-a[r][this.origin.offset]-d[r]-l):(t=3,i=void 0),n=!1,(h[r]-this.pos()<u[r]||h[r]-this.pos()>u[r]+l)&&(n=!0),t==g[r]&&n==v[r]||(e.call(this,r,i,t),g[r]=t,v[r]=n,p=!0);if(p)for(r=0;r<a.length;r++)1==g[r]&&c.past&&(s(a[r],c.past),o(a[r],c.future)),2==g[r]&&c.future&&(s(a[r],c.future),o(a[r],c.past)),3==g[r]&&(o(a[r],c.past),o(a[r],c.future),s(a[r],c.inside)),g[r]!=g[r+1]&&1==g[r]?(s(a[r],c.before),o(a[r],c.after)):g[r]!=g[r-1]&&2==g[r]?(s(a[r],c.after),o(a[r],c.before)):(o(a[r],c.before),o(a[r],c.after)),c.grad&&(v[r]?s(a[r],c.grad):o(a[r],c.grad))}}),this.on("resize upd",function(t){r.call(this,t&&t.fix)}),this}},function(t,e){t.exports=function(t,e,i){var n=console[t]||console.log,s=["Baron: "+e,i];Function.prototype.apply.call(n,console,s)}}]),$(".js-events-slider").slick({infinite:!0,slidesToShow:3,slidesToScroll:1,appendArrows:".events-block-slider-arrows",responsive:[{breakpoint:1080,settings:{slidesToShow:2}},{breakpoint:760,settings:{slidesToShow:1}}]}),function(){function t(){var t=$(window).scrollTop();t<n&&i.is(":visible")?e.css("top",n-t):e.css("top",0)}var e=$(".main-header"),i=$(".header-global"),n=i.height();i.length&&(t(),$(window).on("scroll resize",function(){t()}))}(),function(t){t.fn.formAjax=function(){this.each(function(){t(this).on("submit",function(){function e(){if(n.find("[data-recaptcha]")){var t=n.find("[data-recaptcha]").data("recaptcha"),e=grecaptcha.render("recaptcha-placeholder",{sitekey:t,callback:function(t){r.append("g-token",t),i()},size:"invisible"});grecaptcha.execute(e)}else i()}function i(){a?t(a).addClass("active").spin("large","#000"):t("body").spin("large","#000"),t.ajax({url:s,type:o,data:r,processData:!1,contentType:!1,cache:!1,dataType:"json"}).done(function(e){e&&e.success?(n[0].reset(),initSideModal(e.message,"message-modal",!1,!1)):e&&e.message&&(n.find(".js-form-messages").addClass("active").html(e.message),e.errors&&e.errors.forEach(function(e){var i=t('[name="'+e.name+'"]');i.length&&(i.addClass("error"),i.siblings(".form-label").addClass("form-label-error"),i.siblings(".form-control-errors").addClass("active").html(e.message))})),e&&e.redirect&&(window.location.href=e.redirect),e&&e.reload&&window.location.reload()}).fail(function(t,e,i){alert("Ошибка отправки данных. Пожалуйста, попробуйте ещё раз."),console.log(t),console.log(i)}).always(function(){a?t(a).removeClass("active").spin(!1):t("body").spin(!1)})}var n=t(this),s=n.attr("action"),o=n.attr("method"),r=new FormData(n[0]),a=n.data("form-ajax-overlay"),l=n.is("[data-validate]");return l&&n.valid()?e():l||e(),!1})})}}(jQuery),function(t){var e=!!window.File,i=function(){var t=["B","KB","MB","GB","TB"];return function(e,i){var n,s=t.indexOf(i);if(-1===s)n=!1;else{for(;s>0;)e*=1024,s-=1;n=e}return n}}(),n=t.validator.format;t.validator.addMethod("dateRange",function(t,e,i){try{var n=i.split(","),s=n[0].split(".").reverse(),o=moment(s,"YYYY.MM.DD").unix(),r=n[1].split(".").reverse(),a=moment(r,"YYYY.MM.DD").unix(),l=t.split(".").reverse(),c=moment(l,"YYYY.MM.DD").unix();return o<=c&&c<=a}catch(t){return!1}}),t.validator.addMethod("maxFileSize",function(t,n,s){var o,r=s.unit||"KB",a=s.size||100,l=i(a,r);return!(e&&!this.optional(n))||!((o=n.files).length<1)&&o[0].size<=l},function(t,e){return n("File cannot be larger than {0}{1}.",[t.size||100,t.unit||"KB"])}),t.validator.methods.email=function(t,e){return this.optional(e)||/.+@.+\..{2,}/i.test(t)},t.fn.formValidation=function(){this.each(function(){t(this).validate({errorPlacement:function(t,e){},highlight:function(e,i,n){t(e).closest(".form-group").find(".form-label").addClass("form-label-error").removeClass("form-label-valid"),t(e).closest(".form-control").addClass(i).removeClass(n),t(e).addClass(i).removeClass(n)},unhighlight:function(e,i,n){t(e).closest(".form-group").find(".form-label").removeClass("form-label-error").addClass("form-label-valid"),t(e).closest(".form-control").removeClass(i).addClass(n),t(e).removeClass(i).addClass(n)}})})}}(jQuery),function(t){t.fn.maskedinput=function(){this.each(function(){var e=t(this).data("masked-input"),i=t(this).data("masked-input-placeholder"),n=t(this).is("[data-masked-input-clearifnotmatch]");t(this).mask(e,{placeholder:i,clearIfNotMatch:n})})}}(jQuery),function(){var t=$(".js-media-slider");t.slick({infinite:!0,slidesToShow:4,rows:2,slidesToScroll:4,appendArrows:".media-block-header-arrows",responsive:[{breakpoint:1080,settings:{slidesToShow:3,slidesToScroll:3}},{breakpoint:769,settings:{arrows:!1,dots:!0,rows:1,slidesToShow:2,slidesToScroll:2}},{breakpoint:600,settings:{arrows:!1,dots:!0,rows:1,slidesToShow:1,slidesToScroll:1}}]}),$(window).width()<600&&t.slick("slickFilter",function(t){return t<10})}(),function(){var t=$(".js-news-slider");t.slick({infinite:!0,slidesToShow:4,rows:2,slidesToScroll:4,appendArrows:".news-block-header-arrows",responsive:[{breakpoint:1080,settings:{slidesToShow:3,slidesToScroll:3}},{breakpoint:900,settings:{arrows:!1,dots:!0,slidesToShow:2,slidesToScroll:2}},{breakpoint:520,settings:{arrows:!1,dots:!0,rows:1,slidesToShow:1,slidesToScroll:1}}]}),$(window).width()<520&&t.slick("slickFilter",function(t){return t<10})}(),function(){function t(e,i,n){$(e.target).closest(i).length||(n(),$(document).off("click","body",t))}function e(){$(".js-offcanvas, "+i).removeClass("active")}var i="#offcanvas",n="#offcanvas > .main-offcanvas";$(".js-offcanvas").click(function(){return $(this).hasClass("active")?e():($(".js-offcanvas").addClass("active"),$(i).addClass("active"),$(document).on("click","body",function(i){t(i,n,e)})),!1}),Swipe&&document.getElementById("offcanvas")&&new Swipe(document.getElementById("offcanvas"),function(t,i){t.preventDefault(),"left"===i&&e()})}(),function(){var t=$(".js-partners-slider");t.slick({infinite:!0,slidesToShow:4,rows:2,slidesToScroll:4,appendArrows:".partners-block-header-arrows",responsive:[{breakpoint:1080,settings:{slidesToShow:3,slidesToScroll:3}},{breakpoint:769,settings:{arrows:!1,dots:!0,slidesToShow:2,slidesToScroll:2}},{breakpoint:520,settings:{arrows:!1,dots:!0,slidesToShow:2,slidesToScroll:2}}]}),$(window).width()<520&&t.slick("slickFilter",function(t){return t<10})}(),function(){var t=$(".js-programs-slider");t.slick({infinite:!0,slidesToShow:3,slidesToScroll:3,arrows:!1,dots:!0,responsive:[{breakpoint:767,settings:{slidesToShow:2,slidesToScroll:2}},{breakpoint:580,settings:{slidesToShow:1,slidesToScroll:1}}]}),$(window).width()<580&&t.slick("slickFilter",function(t){return t<10})}(),function(){var t=$(".js-sessions-slider");t.slick({infinite:!0,slidesToShow:3,slidesToScroll:3,appendArrows:".sessions-block-header-arrows",responsive:[{breakpoint:900,settings:{arrows:!1,dots:!0,slidesToShow:2,slidesToScroll:2}},{breakpoint:520,settings:{arrows:!1,dots:!0,slidesToShow:1,slidesToScroll:1}}]}),$(window).width()<520&&t.slick("slickFilter",function(t){return t<10})}(),$(document).on("click","[data-side-modal]",function(t){var e=$(this).attr("href"),i=$(this).data("side-modal-url"),n=$(this).data("side-modal"),s=$(this).data("side-modal-class"),o=$(this).is("[data-side-modal-prevent-mobile]"),r=$(this).is("[data-side-modal-prevent-overlay-close]"),a=$(this).is("[data-side-modal-prevent-esc-close]");{if(!(o&&window.outerWidth<768))return n?($modalContent=$(n).clone(),initSideModal($modalContent,s,r,a)):($("body").spin("large","#000"),$.ajax({url:i||e,method:"GET",cache:!1}).done(function(t){$modalContent=t,initSideModal($modalContent,s,r,a)}).fail(function(t,e,i){alert("Ошибка загрузки данных. Пожалуйста, попробуйте перезагрузить страницу."),console.log(t),console.log(i)}).always(function(){$("body").spin(!1)})),!1;window.location.href=e}}),function(){var t=$(".js-speakers-slider");t.slick({infinite:!0,slidesToShow:4,rows:2,slidesToScroll:4,appendArrows:".speakers-block-header-arrows",prevArrow:'<button type="button" class="slick-arrow slick-arrow-white slick-prev"></button>',nextArrow:'<button type="button" class="slick-arrow slick-arrow-white slick-next"></button>',responsive:[{breakpoint:1080,settings:{rows:1,slidesToShow:3,slidesToScroll:3}},{breakpoint:769,settings:{rows:1,dots:!0,slidesToShow:2,slidesToScroll:2}},{breakpoint:520,settings:{rows:1,dots:!0,slidesToShow:1,slidesToScroll:1}}]}),$(window).width()<520&&t.slick("slickFilter",function(t){return t<10})}(),function(){var t=$(".js-summits-slider");t.on("init",function(t,e){setTimeout(function(){e.slickGoTo(999,!1)})}),t.on("beforeChange",function(t,e,i,n){var s=$(e.$slides[n]).find("[data-summits-year]").data("summits-year");s&&$(".js-summits-slider-current-year").html(s)}),t.slick({infinite:!1,slidesToShow:1,slidesToScroll:1,appendArrows:".summits-block-header-arrows"})}(),Swipe.prototype.touches={touchstart:{x:-1,y:-1},touchmove:{x:-1,y:-1},touchend:!1,direction:"undetermined"},Swipe.prototype.touchHandler=function(t){var e;if(void 0!==t&&void 0!==t.touches)switch(e=t.touches[0],t.type){case"touchstart":case"touchmove":this.touches[t.type].x=e.pageX,this.touches[t.type].y=e.pageY;break;case"touchend":this.touches[t.type]=!0;var i=this.touches.touchstart.x-this.touches.touchmove.x,n=this.touches.touchstart.y-this.touches.touchmove.y;i<0&&(i/=-1),n<0&&(n/=-1),this.touches.direction=i>n?this.touches.touchstart.x<this.touches.touchmove.x?"right":"left":this.touches.touchstart.y<this.touches.touchmove.y?"down":"up",this.callback(t,this.touches.direction)}},$(document).ready(function(){$(".js-slick-slider").slick(),$("[data-masked-input]").maskedinput(),$("[data-form-ajax]").formAjax(),$("[data-validate]").formValidation(),$(".js-smooth-scroll").click(function(){history.pushState(null,null,$(this).attr("href"));var t=window.location.hash;return $(t).length>0&&$("html, body").animate({scrollTop:$($.attr(this,"href")).offset().top-10},700),!1})});var gCapthaInit=function(){};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpZGUtbW9kYWwuanMiLCJzd2lwZS5qcyIsInlhbmRleC1tYXAuanMiLCJqcXVlcnkuanMiLCJ3aGF0LWlucHV0LmpzIiwic3Bpbi5qcyIsImpxdWVyeS5zcGluLmpzIiwianF1ZXJ5Lm1hc2suanMiLCJzbGljay5qcyIsImpxdWVyeS5tb2RhbC5qcyIsImpxdWVyeS52YWxpZGF0ZS5qcyIsImJhcm9uLm1pbi5qcyIsImV2ZW50cy1zbGlkZXIuanMiLCJmaXhlZC1oZWFkZXIuanMiLCJmb3JtLWFqYXguanMiLCJmb3JtLXZhbGlkYXRpb24uanMiLCJpbnB1dC1tYXNrLmpzIiwibWVkaWEtc2xpZGVyLmpzIiwibmV3cy1zbGlkZXIuanMiLCJvZmZjYW52YXMuanMiLCJwYXJ0bmVycy1zbGlkZXIuanMiLCJwcm9ncmFtcy1zbGlkZXIuanMiLCJzZXNzaW9ucy1zbGlkZXIuanMiLCJzcGVha2Vycy1zbGlkZXIuanMiLCJzdW1taXRzLXNsaWRlci5qcyIsInNjcmlwdHMuanMiXSwibmFtZXMiOlsiaW5pdFNpZGVNb2RhbFdyYXBwZXIiLCJjbGFzc05hbWVzIiwiJG1vZGFsV3JhcHBlciIsIiQiLCIkb3ZlcmxheSIsImNoaWxkcmVuIiwibGVuZ3RoIiwicmVtb3ZlIiwiYXBwZW5kIiwiaW5pdFNpZGVNb2RhbCIsImNvbnRlbnQiLCJwcmV2ZW50T3ZlcmxheUNsb3NlIiwicHJldmVudEVzY0Nsb3NlIiwiJHdyYXBwZXIiLCJmaW5kIiwiaHRtbCIsIm1hc2tlZGlucHV0IiwiZm9ybVZhbGlkYXRpb24iLCJmb3JtQWpheCIsInNldFRpbWVvdXQiLCJhZGRDbGFzcyIsImZpcnN0IiwiZm9jdXMiLCJkb2N1bWVudCIsIm9uIiwiaGlkZSIsImUiLCJ0YXJnZXQiLCJjbG9zZXN0IiwiaXMiLCJ3aGljaCIsInJlbW92ZUNsYXNzIiwib2ZmIiwiY2xpY2siLCJTd2lwZSIsImVsZW0iLCJjYWxsYmFjayIsImhhbmRsZUV2ZW50Iiwic2VsZiIsInRvdWNoSGFuZGxlciIsInRoaXMiLCJhZGRFdmVudExpc3RlbmVyIiwiaW5pdE1hcHMiLCJ5bWFwcyIsIm1hcEVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsImkiLCJzZXR0aW5ncyIsIkpTT04iLCJwYXJzZSIsImRhdGFzZXQiLCJtYXBzIiwiZXJyIiwiY29uc29sZSIsImxvZyIsIm1hcFNldHRpbmdzIiwibWFwIiwiTWFwIiwiY2VudGVyIiwic3BsaXQiLCJ6b29tIiwiY29udHJvbHMiLCJiZWhhdmlvcnMiLCJkaXNhYmxlIiwicGxhY2VtYXJrIiwibXlHZW9PYmplY3QiLCJHZW9PYmplY3QiLCJnZW9tZXRyeSIsInR5cGUiLCJjb29yZGluYXRlcyIsInByb3BlcnRpZXMiLCJpY29uQ29udGVudCIsIm5hbWUiLCJwcmVzZXQiLCJnZW9PYmplY3RzIiwiYWRkIiwiZ2xvYmFsIiwiZmFjdG9yeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJub0dsb2JhbCIsIkRPTUV2YWwiLCJjb2RlIiwiZG9jIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsInRleHQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJpc0FycmF5TGlrZSIsIm9iaiIsImpRdWVyeSIsImlzV2luZG93Iiwibm9kZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsIndpbm5vdyIsImVsZW1lbnRzIiwicXVhbGlmaWVyIiwibm90IiwiaXNGdW5jdGlvbiIsImdyZXAiLCJjYWxsIiwibm9kZVR5cGUiLCJpbmRleE9mIiwicmlzU2ltcGxlIiwidGVzdCIsImZpbHRlciIsInNpYmxpbmciLCJjdXIiLCJkaXIiLCJJZGVudGl0eSIsInYiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwidmFsdWUiLCJyZXNvbHZlIiwicmVqZWN0Iiwibm9WYWx1ZSIsIm1ldGhvZCIsInByb21pc2UiLCJkb25lIiwiZmFpbCIsInRoZW4iLCJhcHBseSIsInVuZGVmaW5lZCIsInNsaWNlIiwiY29tcGxldGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWR5IiwiRGF0YSIsImV4cGFuZG8iLCJ1aWQiLCJkYXRhQXR0ciIsImtleSIsImRhdGEiLCJyZXBsYWNlIiwicm11bHRpRGFzaCIsImdldEF0dHJpYnV0ZSIsInJicmFjZSIsImdldERhdGEiLCJkYXRhVXNlciIsInNldCIsImFkanVzdENTUyIsInByb3AiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImNzcyIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsInJjc3NOdW0iLCJleGVjIiwic3R5bGUiLCJzdGFydCIsImVuZCIsImdldERlZmF1bHREaXNwbGF5IiwidGVtcCIsIm93bmVyRG9jdW1lbnQiLCJkaXNwbGF5IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJib2R5Iiwic2hvd0hpZGUiLCJzaG93IiwidmFsdWVzIiwiaW5kZXgiLCJkYXRhUHJpdiIsImdldCIsImlzSGlkZGVuV2l0aGluVHJlZSIsImdldEFsbCIsImNvbnRleHQiLCJ0YWciLCJyZXQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIm1lcmdlIiwic2V0R2xvYmFsRXZhbCIsImVsZW1zIiwicmVmRWxlbWVudHMiLCJsIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwidG1wIiwid3JhcCIsImNvbnRhaW5zIiwiaiIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIm5vZGVzIiwicmh0bWwiLCJydGFnTmFtZSIsIndyYXBNYXAiLCJfZGVmYXVsdCIsImlubmVySFRNTCIsImh0bWxQcmVmaWx0ZXIiLCJsYXN0Q2hpbGQiLCJjaGlsZE5vZGVzIiwiZmlyc3RDaGlsZCIsInRleHRDb250ZW50IiwicHVzaCIsImNyZWF0ZVRleHROb2RlIiwiaW5BcnJheSIsInJzY3JpcHRUeXBlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJhY3RpdmVFbGVtZW50IiwidHlwZXMiLCJzZWxlY3RvciIsImZuIiwib25lIiwib3JpZ0ZuIiwiZXZlbnQiLCJhcmd1bWVudHMiLCJndWlkIiwiZWFjaCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwibWF0Y2giLCJyc2NyaXB0VHlwZU1hc2tlZCIsInJlbW92ZUF0dHJpYnV0ZSIsImNsb25lQ29weUV2ZW50Iiwic3JjIiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZXZlbnRzIiwiaGFzRGF0YSIsImFjY2VzcyIsImhhbmRsZSIsImV4dGVuZCIsImZpeElucHV0IiwicmNoZWNrYWJsZVR5cGUiLCJjaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiYXJncyIsImNvbmNhdCIsImhhc1NjcmlwdHMiLCJub2RlIiwiaU5vQ2xvbmUiLCJzdXBwb3J0IiwiY2hlY2tDbG9uZSIsInJjaGVja2VkIiwiZXEiLCJjbG9uZSIsIl9ldmFsVXJsIiwicmNsZWFuU2NyaXB0Iiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJjdXJDU1MiLCJjb21wdXRlZCIsIndpZHRoIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFN0eWxlcyIsImdldFByb3BlcnR5VmFsdWUiLCJwaXhlbE1hcmdpblJpZ2h0Iiwicm51bW5vbnB4Iiwicm1hcmdpbiIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwiZmluYWxQcm9wTmFtZSIsImNzc1Byb3BzIiwiZW1wdHlTdHlsZSIsImNhcE5hbWUiLCJ0b1VwcGVyQ2FzZSIsImNzc1ByZWZpeGVzIiwidmVuZG9yUHJvcE5hbWUiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwibWF0Y2hlcyIsIk1hdGgiLCJtYXgiLCJhdWdtZW50V2lkdGhPckhlaWdodCIsImV4dHJhIiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJ2YWwiLCJjc3NFeHBhbmQiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsImJveFNpemluZ1JlbGlhYmxlIiwicGFyc2VGbG9hdCIsIlR3ZWVuIiwib3B0aW9ucyIsImVhc2luZyIsInByb3RvdHlwZSIsImluaXQiLCJzY2hlZHVsZSIsImluUHJvZ3Jlc3MiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJmeCIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZnhOb3ciLCJub3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImF0dHJzIiwiaGVpZ2h0Iiwib3BhY2l0eSIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJyZXN1bHQiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImRlZmVycmVkIiwiRGVmZXJyZWQiLCJhbHdheXMiLCJjdXJyZW50VGltZSIsInJlbWFpbmluZyIsInN0YXJ0VGltZSIsImR1cmF0aW9uIiwicGVyY2VudCIsInR3ZWVucyIsInJ1biIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb3BzIiwib3B0cyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJzdG9wIiwiZ290b0VuZCIsInJlamVjdFdpdGgiLCJob29rcyIsImNhbWVsQ2FzZSIsIkFycmF5IiwiaXNBcnJheSIsImNzc0hvb2tzIiwiZXhwYW5kIiwicHJvcEZpbHRlciIsIl9xdWV1ZUhvb2tzIiwicXVldWUiLCJwcm94eSIsInByb2dyZXNzIiwiY29tcGxldGUiLCJ0aW1lciIsImFuaW0iLCJzdHJpcEFuZENvbGxhcHNlIiwicm5vdGh0bWx3aGl0ZSIsImpvaW4iLCJnZXRDbGFzcyIsImJ1aWxkUGFyYW1zIiwicHJlZml4IiwidHJhZGl0aW9uYWwiLCJyYnJhY2tldCIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImZ1bmMiLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsInVuc2hpZnQiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdCIsInNlbGVjdGVkIiwiaW5zcGVjdGVkIiwiXyIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJzZWVraW5nVHJhbnNwb3J0IiwidHJhbnNwb3J0cyIsImFqYXhFeHRlbmQiLCJkZWVwIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhcnIiLCJnZXRQcm90byIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJydHJpbSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiYWxsIiwibGV0dGVyIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwibnVtIiwicHVzaFN0YWNrIiwicHJldk9iamVjdCIsImxhc3QiLCJsZW4iLCJzb3J0Iiwic3BsaWNlIiwiY29weSIsImNvcHlJc0FycmF5IiwiaXNQbGFpbk9iamVjdCIsInJhbmRvbSIsImlzUmVhZHkiLCJlcnJvciIsIm1zZyIsIm5vb3AiLCJpc051bWVyaWMiLCJpc05hTiIsInByb3RvIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwic3RyaW5nIiwidHJpbSIsIm1ha2VBcnJheSIsInJlc3VsdHMiLCJzZWNvbmQiLCJpbnZlcnQiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsIkRhdGUiLCJTeW1ib2wiLCJpdGVyYXRvciIsIlNpenpsZSIsInNlZWQiLCJtIiwibmlkIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0IiwicHJlZmVycmVkRG9jIiwic2V0RG9jdW1lbnQiLCJkb2N1bWVudElzSFRNTCIsInJxdWlja0V4cHIiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsImNvbXBpbGVyQ2FjaGUiLCJyYnVnZ3lRU0EiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsInNldEF0dHJpYnV0ZSIsInRva2VuaXplIiwidG9TZWxlY3RvciIsInJzaWJsaW5nIiwidGVzdENvbnRleHQiLCJxc2FFcnJvciIsInNlbGVjdCIsImNyZWF0ZUNhY2hlIiwiY2FjaGUiLCJrZXlzIiwiRXhwciIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJlbCIsImFkZEhhbmRsZSIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiYSIsImIiLCJkaWZmIiwic291cmNlSW5kZXgiLCJuZXh0U2libGluZyIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlRGlzYWJsZWRQc2V1ZG8iLCJkaXNhYmxlZCIsImlzRGlzYWJsZWQiLCJkaXNhYmxlZEFuY2VzdG9yIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwic2V0RmlsdGVycyIsInRva2VucyIsImFkZENvbWJpbmF0b3IiLCJtYXRjaGVyIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwibmV4dCIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsInhtbCIsIm9sZENhY2hlIiwidW5pcXVlQ2FjaGUiLCJvdXRlckNhY2hlIiwibmV3Q2FjaGUiLCJkaXJydW5zIiwidW5pcXVlSUQiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwiY29uZGVuc2UiLCJ1bm1hdGNoZWQiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicHJlRmlsdGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJyZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJvdXRlcm1vc3RDb250ZXh0IiwiZ2V0VGV4dCIsImlzWE1MIiwiY29tcGlsZSIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsImRvY0VsZW0iLCJyYnVnZ3lNYXRjaGVzIiwiY2xhc3NDYWNoZSIsInRva2VuQ2FjaGUiLCJzb3J0T3JkZXIiLCJwb3AiLCJwdXNoX25hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJhdHRyaWJ1dGVRdW90ZXMiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJJRCIsIkNMQVNTIiwiVEFHIiwiQVRUUiIsIlBTRVVETyIsIkNISUxEIiwiYm9vbCIsIm5lZWRzQ29udGV4dCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsImVzY2FwZWQiLCJlc2NhcGVkV2hpdGVzcGFjZSIsImhpZ2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJjaCIsImFzQ29kZVBvaW50IiwiY2hhckNvZGVBdCIsInVubG9hZEhhbmRsZXIiLCJlbHMiLCJkb2N1bWVudEVsZW1lbnQiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhdHRhY2hFdmVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJhdHRySWQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwiaW5wdXQiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsImV4cHIiLCJhdHRyIiwic3BlY2lmaWVkIiwiZXNjYXBlIiwic2VsIiwidW5pcXVlU29ydCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsIj4iLCIgIiwiKyIsIn4iLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsIndoYXQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwibm9kZUluZGV4IiwicGFyZW50IiwidXNlQ2FjaGUiLCJwc2V1ZG8iLCJpZHgiLCJtYXRjaGVkIiwiaGFzIiwiaW5uZXJUZXh0IiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwicm9vdCIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiZW5hYmxlZCIsInNlbGVjdGVkSW5kZXgiLCJlbXB0eSIsImhlYWRlciIsImJ1dHRvbiIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5Iiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwic2V0TWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsInRva2VuIiwiY29tcGlsZWQiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsInNpYmxpbmdzIiwibiIsInJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjb250ZW50cyIsInByZXYiLCJ0YXJnZXRzIiwicHJldkFsbCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsInJldmVyc2UiLCJDYWxsYmFja3MiLCJvYmplY3QiLCJmbGFnIiwiY3JlYXRlT3B0aW9ucyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwiZmlyaW5nSW5kZXgiLCJmaXJlIiwib25jZSIsInN0b3BPbkZhbHNlIiwibG9jayIsImZpcmVXaXRoIiwidHVwbGVzIiwic3RhdGUiLCJjYXRjaCIsInBpcGUiLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwiZGVwdGgiLCJzcGVjaWFsIiwidGhhdCIsIm1pZ2h0VGhyb3ciLCJtYXhEZXB0aCIsIlR5cGVFcnJvciIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsImdldFN0YWNrSG9vayIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsIm1hc3RlciIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsInN0YWNrIiwid2FybiIsIm1lc3NhZ2UiLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsInJlYWR5V2FpdCIsIndhaXQiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJhY2NlcHREYXRhIiwib3duZXIiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImNvdW50IiwiZGVmZXIiLCJwbnVtIiwic291cmNlIiwic3dhcCIsIm9sZCIsInRvZ2dsZSIsIm9wdGlvbiIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiZGl2IiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJya2V5RXZlbnQiLCJybW91c2VFdmVudCIsInJ0eXBlbmFtZXNwYWNlIiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsInQiLCJoYW5kbGVPYmoiLCJoYW5kbGVycyIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJkZWxlZ2F0ZVR5cGUiLCJiaW5kVHlwZSIsIm5hbWVzcGFjZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwicG9zdERpc3BhdGNoIiwibWF0Y2hlZEhhbmRsZXJzIiwibWF0Y2hlZFNlbGVjdG9ycyIsImFkZFByb3AiLCJob29rIiwiRXZlbnQiLCJlbnVtZXJhYmxlIiwib3JpZ2luYWxFdmVudCIsIndyaXRhYmxlIiwibG9hZCIsIm5vQnViYmxlIiwidHJpZ2dlciIsImJsdXIiLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZWxhdGVkVGFyZ2V0IiwidGltZVN0YW1wIiwiaXNTaW11bGF0ZWQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJhbHRLZXkiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImNoYW5nZWRUb3VjaGVzIiwiY3RybEtleSIsImRldGFpbCIsImV2ZW50UGhhc2UiLCJtZXRhS2V5IiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwidmlldyIsImNoYXIiLCJjaGFyQ29kZSIsImtleUNvZGUiLCJidXR0b25zIiwiY2xpZW50WCIsImNsaWVudFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBvaW50ZXJJZCIsInBvaW50ZXJUeXBlIiwic2NyZWVuWCIsInNjcmVlblkiLCJ0YXJnZXRUb3VjaGVzIiwidG9FbGVtZW50IiwidG91Y2hlcyIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJyeGh0bWxUYWciLCJybm9Jbm5lcmh0bWwiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJjb21wdXRlU3R5bGVUZXN0cyIsImNzc1RleHQiLCJjb250YWluZXIiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJtYXJnaW5MZWZ0IiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJtYXJnaW5SaWdodCIsInBpeGVsTWFyZ2luUmlnaHRWYWwiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJyZGlzcGxheXN3YXAiLCJyY3VzdG9tUHJvcCIsImNzc1Nob3ciLCJwb3NpdGlvbiIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiY29sdW1uQ291bnQiLCJmaWxsT3BhY2l0eSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJmbG9hdCIsIm9yaWdOYW1lIiwiaXNDdXN0b21Qcm9wIiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsImdldENsaWVudFJlY3RzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJzdWZmaXgiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwiZWFzZWQiLCJwb3MiLCJzdGVwIiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInAiLCJzd2luZyIsImNvcyIsIlBJIiwicmZ4dHlwZXMiLCJycnVuIiwiKiIsInR3ZWVuZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYXR0ck5hbWVzIiwiZ2V0dGVyIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsInBhcnNlSW50IiwiZm9yIiwiY2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJyZm9jdXNNb3JwaCIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJldmVudFBhdGgiLCJpc1RyaWdnZXIiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsImZvY3VzaW4iLCJhdHRhY2hlcyIsIm5vbmNlIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsInBhcmFtIiwicyIsInZhbHVlT3JGdW5jdGlvbiIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwiYWxsVHlwZXMiLCJvcmlnaW5BbmNob3IiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwidXJsIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJyZXNwb25zZUZpZWxkcyIsImNvbnZlcnRlcnMiLCIqIHRleHQiLCJ0ZXh0IGh0bWwiLCJ0ZXh0IGpzb24iLCJ0ZXh0IHhtbCIsImFqYXhTZXR1cCIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInN0YXR1cyIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJoZWFkZXJzIiwiaXNTdWNjZXNzIiwic3VjY2VzcyIsInJlc3BvbnNlIiwibW9kaWZpZWQiLCJzdGF0dXNUZXh0IiwidGltZW91dFRpbWVyIiwidHJhbnNwb3J0IiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsIm1pbWVUeXBlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsImRhdGFGaWx0ZXIiLCJ0aHJvd3MiLCJhamF4Q29udmVydCIsImlmTW9kaWZpZWQiLCJjYWNoZVVSTCIsImNhbGxiYWNrQ29udGV4dCIsInN0YXR1c0NvZGUiLCJmaXJlR2xvYmFscyIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJyZXNwb25zZUhlYWRlcnMiLCJ1cmxBbmNob3IiLCJ1bmNhY2hlZCIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJhYm9ydCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJiZWZvcmVTZW5kIiwic2VuZCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJ1bndyYXAiLCJ2aXNpYmxlIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJ0ZXh0IHNjcmlwdCIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJjbGllbnRUb3AiLCJwYWdlWE9mZnNldCIsImNsaWVudExlZnQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJiaW5kIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImRlZmluZSIsImFtZCIsIl9qUXVlcnkiLCJfJCIsIm5vQ29uZmxpY3QiLCJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImxvYWRlZCIsImMiLCJjdXJyZW50RWxlbWVudCIsImN1cnJlbnRJbnB1dCIsImN1cnJlbnRJbnRlbnQiLCJldmVudFRpbWVyIiwiZm9ybUlucHV0cyIsImZ1bmN0aW9uTGlzdCIsImlnbm9yZU1hcCIsImlucHV0TWFwIiwia2V5ZG93biIsImtleXVwIiwibW91c2Vkb3duIiwibW91c2Vtb3ZlIiwiTVNQb2ludGVyRG93biIsIk1TUG9pbnRlck1vdmUiLCJwb2ludGVyZG93biIsInBvaW50ZXJtb3ZlIiwidG91Y2hzdGFydCIsImlzQnVmZmVyaW5nIiwiaXNTY3JvbGxpbmciLCJtb3VzZVBvcyIsIngiLCJ5IiwicG9pbnRlck1hcCIsIjIiLCIzIiwiNCIsInN1cHBvcnRzUGFzc2l2ZSIsImFkZExpc3RlbmVycyIsInBhc3NpdmUiLCJQb2ludGVyRXZlbnQiLCJzZXRJbnB1dCIsInNldEludGVudCIsIk1TUG9pbnRlckV2ZW50IiwiZXZlbnRCdWZmZXIiLCJkZXRlY3RXaGVlbCIsInNldEVsZW1lbnQiLCJjbGVhckVsZW1lbnQiLCJldmVudEtleSIsInNob3VsZFVwZGF0ZSIsImRvVXBkYXRlIiwiYWN0aXZlRWxlbSIsImZpcmVGdW5jdGlvbnMiLCJkZXRlY3RTY3JvbGxpbmciLCJjbGFzc0xpc3QiLCJvbm1vdXNld2hlZWwiLCJhc2siLCJlbGVtZW50IiwiaWdub3JlS2V5cyIsInJlZ2lzdGVyT25DaGFuZ2UiLCJldmVudFR5cGUiLCJ1blJlZ2lzdGVyT25DaGFuZ2UiLCJvYmpQb3MiLCJTcGlubmVyIiwiY3JlYXRlRWwiLCJpbnMiLCJhZGRBbmltYXRpb24iLCJhbHBoYSIsInRyYWlsIiwibGluZXMiLCJ6IiwidXNlQ3NzQW5pbWF0aW9ucyIsInN1YnN0cmluZyIsInByZSIsImFuaW1hdGlvbnMiLCJzaGVldCIsImluc2VydFJ1bGUiLCJjc3NSdWxlcyIsInZlbmRvciIsInBwIiwiY2hhckF0IiwicHJlZml4ZXMiLCJkZWYiLCJnZXRDb2xvciIsImNvbG9yIiwibyIsImRlZmF1bHRzIiwicmFkaXVzIiwiY29ybmVycyIsInJvdGF0ZSIsImRpcmVjdGlvbiIsImZwcyIsInNoYWRvdyIsImh3YWNjZWwiLCJzcGluIiwiZiIsIm9zdGVwIiwiYXN0ZXAiLCJmaWxsIiwiYmFja2dyb3VuZCIsImJveFNoYWRvdyIsInRyYW5zZm9ybU9yaWdpbiIsInRyYW5zZm9ybSIsImJvcmRlclJhZGl1cyIsInNlZyIsInN0eWxlU2hlZXQiLCJwcm9iZSIsImJlaGF2aW9yIiwiYWRqIiwidm1sIiwiYWRkUnVsZSIsImdycCIsImNvb3Jkc2l6ZSIsImNvb3Jkb3JpZ2luIiwiciIsImR4IiwiZyIsInJvdGF0aW9uIiwiYXJjc2l6ZSIsImluaXRWTUwiLCJyZXF1aXJlIiwiJHRoaXMiLCJzcGlubmVyIiwicHJlc2V0cyIsInRpbnkiLCJzbWFsbCIsImxhcmdlIiwiWmVwdG8iLCJNYXNrIiwibWFzayIsImludmFsaWQiLCJnZXRDYXJldCIsImN0cmwiLCJkU2VsIiwiY1NlbFN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJuYXZpZ2F0b3IiLCJhcHBWZXJzaW9uIiwiY3JlYXRlUmFuZ2UiLCJtb3ZlU3RhcnQiLCJzZXRDYXJldCIsInJhbmdlIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJjcmVhdGVUZXh0UmFuZ2UiLCJjb2xsYXBzZSIsIm1vdmVFbmQiLCJtYXNrRGlnaXRQb3NNYXBPbGQiLCJtYXNrRGlnaXRQb3NNYXAiLCJqTWFza0dsb2JhbHMiLCJ1c2VJbnB1dCIsImJlaGF2aW91ciIsIm9sZFZhbHVlIiwic2VsZWN0T25Gb2N1cyIsImNsZWFySWZOb3RNYXRjaCIsInJlZ2V4TWFzayIsImdldFJlZ2V4TWFzayIsInRyYW5zbGF0aW9uIiwib3B0aW9uYWwiLCJyZWN1cnNpdmUiLCJvUmVjdXJzaXZlIiwibWFza0NodW5rcyIsImpNYXNrIiwiZGlnaXQiLCJkZXN0cm95RXZlbnRzIiwiY2FsY3VsYXRlQ2FyZXRQb3NpdGlvbiIsIm9sZFZhbCIsIm5ld1ZhbCIsImdldE1hc2tlZCIsImNhcmV0UG9zTmV3IiwiY2FyZXRQb3NPbGQiLCJuZXdWYWxMIiwib2xkVmFsTCIsIm1hc2tEaWdpdHNCZWZvcmVDYXJldCIsIm1hc2tEaWdpdHNBZnRlckNhcmV0IiwibWFza0RpZ2l0c0JlZm9yZUNhcmV0QWxsIiwibWFza0RpZ2l0c0JlZm9yZUNhcmV0QWxsT2xkIiwiY2FyZXRQb3MiLCJieVBhc3NLZXlzIiwiY2FsbGJhY2tzIiwic2tpcE1hc2tDaGFycyIsImxhc3RNYXNrQ2hhciIsImJ1ZiIsIm1hc2tMZW4iLCJ2YWxMZW4iLCJhZGRNZXRob2QiLCJyZXNldFBvcyIsIm1hc2tEaWdpdENvdW50IiwibWFza0RpZ2l0UG9zQXJyIiwibGFzdFVudHJhbnNsYXRlZE1hc2tDaGFyIiwibWFza0RpZ2l0IiwidmFsRGlnaXQiLCJmYWxsYmFjayIsImxhc3RNYXNrQ2hhckRpZ2l0IiwibWFwTWFza2RpZ2l0UG9zaXRpb25zIiwibWFza0RpZmYiLCJjaGFuZ2VkIiwiZGVmYXVsdEFyZ3MiLCJjcml0ZXJpYSIsImNhcmV0IiwiZ2V0Q2xlYW5WYWwiLCJnZXRNYXNrZWRWYWwiLCJvbmx5TWFzayIsInBsYWNlaG9sZGVyIiwibWF4bGVuZ3RoIiwibWFza1dhdGNoZXJzIiwiSFRNTEF0dHJpYnV0ZXMiLCJub3RTYW1lTWFza09iamVjdCIsImZpZWxkIiwibWFza09iamVjdCIsInN0cmluZ2lmeSIsImdsb2JhbHMiLCJ3YXRjaEludGVydmFsIiwid2F0Y2hJbnB1dHMiLCJtYXNrRnVuY3Rpb24iLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJtYXNrZWQiLCJ1bm1hc2siLCJkYXRhTWFzayIsImNsZWFuVmFsIiwiYXBwbHlEYXRhTWFzayIsIm1hc2tFbGVtZW50cyIsImRhdGFNYXNrQXR0ciIsInVzZXJBZ2VudCIsImV2ZW50TmFtZSIsImlzU3VwcG9ydGVkIiwiZXZlbnRTdXBwb3J0ZWQiLCJ3YXRjaERhdGFNYXNrIiwiOSIsIiMiLCJBIiwiUyIsIlNsaWNrIiwiaW5zdGFuY2VVaWQiLCJkYXRhU2V0dGluZ3MiLCJhY2Nlc3NpYmlsaXR5IiwiYWRhcHRpdmVIZWlnaHQiLCJhcHBlbmRBcnJvd3MiLCJhcHBlbmREb3RzIiwiYXJyb3dzIiwiYXNOYXZGb3IiLCJwcmV2QXJyb3ciLCJuZXh0QXJyb3ciLCJhdXRvcGxheSIsImF1dG9wbGF5U3BlZWQiLCJjZW50ZXJNb2RlIiwiY2VudGVyUGFkZGluZyIsImNzc0Vhc2UiLCJjdXN0b21QYWdpbmciLCJzbGlkZXIiLCJkb3RzIiwiZG90c0NsYXNzIiwiZHJhZ2dhYmxlIiwiZWRnZUZyaWN0aW9uIiwiZmFkZSIsImZvY3VzT25TZWxlY3QiLCJmb2N1c09uQ2hhbmdlIiwiaW5maW5pdGUiLCJpbml0aWFsU2xpZGUiLCJsYXp5TG9hZCIsIm1vYmlsZUZpcnN0IiwicGF1c2VPbkhvdmVyIiwicGF1c2VPbkZvY3VzIiwicGF1c2VPbkRvdHNIb3ZlciIsInJlc3BvbmRUbyIsInJlc3BvbnNpdmUiLCJyb3dzIiwicnRsIiwic2xpZGUiLCJzbGlkZXNQZXJSb3ciLCJzbGlkZXNUb1Nob3ciLCJzbGlkZXNUb1Njcm9sbCIsInN3aXBlIiwic3dpcGVUb1NsaWRlIiwidG91Y2hNb3ZlIiwidG91Y2hUaHJlc2hvbGQiLCJ1c2VDU1MiLCJ1c2VUcmFuc2Zvcm0iLCJ2YXJpYWJsZVdpZHRoIiwidmVydGljYWwiLCJ2ZXJ0aWNhbFN3aXBpbmciLCJ3YWl0Rm9yQW5pbWF0ZSIsImluaXRpYWxzIiwiYW5pbWF0aW5nIiwiZHJhZ2dpbmciLCJhdXRvUGxheVRpbWVyIiwiY3VycmVudERpcmVjdGlvbiIsImN1cnJlbnRMZWZ0IiwiY3VycmVudFNsaWRlIiwiJGRvdHMiLCJsaXN0V2lkdGgiLCJsaXN0SGVpZ2h0IiwibG9hZEluZGV4IiwiJG5leHRBcnJvdyIsIiRwcmV2QXJyb3ciLCJzY3JvbGxpbmciLCJzbGlkZUNvdW50Iiwic2xpZGVXaWR0aCIsIiRzbGlkZVRyYWNrIiwiJHNsaWRlcyIsInNsaWRpbmciLCJzbGlkZU9mZnNldCIsInN3aXBlTGVmdCIsInN3aXBpbmciLCIkbGlzdCIsInRvdWNoT2JqZWN0IiwidHJhbnNmb3Jtc0VuYWJsZWQiLCJ1bnNsaWNrZWQiLCJhY3RpdmVCcmVha3BvaW50IiwiYW5pbVR5cGUiLCJhbmltUHJvcCIsImJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludFNldHRpbmdzIiwiY3NzVHJhbnNpdGlvbnMiLCJmb2N1c3NlZCIsImludGVycnVwdGVkIiwicGF1c2VkIiwicG9zaXRpb25Qcm9wIiwicm93Q291bnQiLCJzaG91bGRDbGljayIsIiRzbGlkZXIiLCIkc2xpZGVzQ2FjaGUiLCJ0cmFuc2Zvcm1UeXBlIiwidHJhbnNpdGlvblR5cGUiLCJ2aXNpYmlsaXR5Q2hhbmdlIiwid2luZG93V2lkdGgiLCJ3aW5kb3dUaW1lciIsIm1vekhpZGRlbiIsIndlYmtpdEhpZGRlbiIsImF1dG9QbGF5IiwiYXV0b1BsYXlDbGVhciIsImF1dG9QbGF5SXRlcmF0b3IiLCJjaGFuZ2VTbGlkZSIsImNsaWNrSGFuZGxlciIsInNlbGVjdEhhbmRsZXIiLCJzZXRQb3NpdGlvbiIsInN3aXBlSGFuZGxlciIsImRyYWdIYW5kbGVyIiwia2V5SGFuZGxlciIsImh0bWxFeHByIiwicmVnaXN0ZXJCcmVha3BvaW50cyIsImFjdGl2YXRlQURBIiwiYXJpYS1oaWRkZW4iLCJhZGRTbGlkZSIsInNsaWNrQWRkIiwibWFya3VwIiwiYWRkQmVmb3JlIiwidW5sb2FkIiwicmVpbml0IiwiYW5pbWF0ZUhlaWdodCIsInRhcmdldEhlaWdodCIsIm91dGVySGVpZ2h0IiwiYW5pbWF0ZVNsaWRlIiwidGFyZ2V0TGVmdCIsImFuaW1Qcm9wcyIsImFuaW1TdGFydCIsImNlaWwiLCJhcHBseVRyYW5zaXRpb24iLCJkaXNhYmxlVHJhbnNpdGlvbiIsImdldE5hdlRhcmdldCIsInNsaWNrIiwic2xpZGVIYW5kbGVyIiwidHJhbnNpdGlvbiIsInNsaWRlVG8iLCJidWlsZEFycm93cyIsImFyaWEtZGlzYWJsZWQiLCJidWlsZERvdHMiLCJkb3QiLCJnZXREb3RDb3VudCIsImJ1aWxkT3V0Iiwic2V0dXBJbmZpbml0ZSIsInVwZGF0ZURvdHMiLCJzZXRTbGlkZUNsYXNzZXMiLCJidWlsZFJvd3MiLCJuZXdTbGlkZXMiLCJudW1PZlNsaWRlcyIsIm9yaWdpbmFsU2xpZGVzIiwic2xpZGVzUGVyU2VjdGlvbiIsInJvdyIsImNoZWNrUmVzcG9uc2l2ZSIsImZvcmNlVXBkYXRlIiwiYnJlYWtwb2ludCIsInRhcmdldEJyZWFrcG9pbnQiLCJyZXNwb25kVG9XaWR0aCIsInRyaWdnZXJCcmVha3BvaW50Iiwic2xpZGVyV2lkdGgiLCJpbm5lcldpZHRoIiwibWluIiwidW5zbGljayIsInJlZnJlc2giLCJkb250QW5pbWF0ZSIsImluZGV4T2Zmc2V0IiwidW5ldmVuT2Zmc2V0IiwiJHRhcmdldCIsImNoZWNrTmF2aWdhYmxlIiwibmF2aWdhYmxlcyIsInByZXZOYXZpZ2FibGUiLCJnZXROYXZpZ2FibGVJbmRleGVzIiwiY2xlYW5VcEV2ZW50cyIsImludGVycnVwdCIsImNsZWFuVXBTbGlkZUV2ZW50cyIsIm9yaWVudGF0aW9uQ2hhbmdlIiwicmVzaXplIiwiY2xlYW5VcFJvd3MiLCJkZXN0cm95IiwiZmFkZVNsaWRlIiwic2xpZGVJbmRleCIsImZhZGVTbGlkZU91dCIsImZpbHRlclNsaWRlcyIsInNsaWNrRmlsdGVyIiwiZm9jdXNIYW5kbGVyIiwiJHNmIiwiZ2V0Q3VycmVudCIsInNsaWNrQ3VycmVudFNsaWRlIiwiYnJlYWtQb2ludCIsImNvdW50ZXIiLCJwYWdlclF0eSIsImdldExlZnQiLCJ2ZXJ0aWNhbEhlaWdodCIsInRhcmdldFNsaWRlIiwiY29lZiIsInZlcnRpY2FsT2Zmc2V0IiwiZmxvb3IiLCJvZmZzZXRMZWZ0Iiwib3V0ZXJXaWR0aCIsImdldE9wdGlvbiIsInNsaWNrR2V0T3B0aW9uIiwiaW5kZXhlcyIsImdldFNsaWNrIiwiZ2V0U2xpZGVDb3VudCIsInN3aXBlZFNsaWRlIiwiY2VudGVyT2Zmc2V0IiwiYWJzIiwiZ29UbyIsInNsaWNrR29UbyIsImNyZWF0aW9uIiwic2V0UHJvcHMiLCJzdGFydExvYWQiLCJsb2FkU2xpZGVyIiwiaW5pdGlhbGl6ZUV2ZW50cyIsInVwZGF0ZUFycm93cyIsImluaXRBREEiLCJudW1Eb3RHcm91cHMiLCJ0YWJDb250cm9sSW5kZXhlcyIsInNsaWRlQ29udHJvbEluZGV4Iiwicm9sZSIsImFyaWFCdXR0b25Db250cm9sIiwiYXJpYS1kZXNjcmliZWRieSIsIm1hcHBlZFNsaWRlSW5kZXgiLCJhcmlhLWNvbnRyb2xzIiwiYXJpYS1sYWJlbCIsImFyaWEtc2VsZWN0ZWQiLCJpbml0QXJyb3dFdmVudHMiLCJpbml0RG90RXZlbnRzIiwiaW5pdFNsaWRlRXZlbnRzIiwiYWN0aW9uIiwiaW5pdFVJIiwidGFnTmFtZSIsImxvYWRJbWFnZXMiLCJpbWFnZXNTY29wZSIsImltYWdlU291cmNlIiwiaW1hZ2VTcmNTZXQiLCJpbWFnZVNpemVzIiwiaW1hZ2VUb0xvYWQiLCJsb2FkUmFuZ2UiLCJyYW5nZVN0YXJ0IiwicmFuZ2VFbmQiLCJwcmV2U2xpZGUiLCJuZXh0U2xpZGUiLCJwcm9ncmVzc2l2ZUxhenlMb2FkIiwic2xpY2tOZXh0IiwicGF1c2UiLCJzbGlja1BhdXNlIiwicGxheSIsInNsaWNrUGxheSIsInBvc3RTbGlkZSIsInNsaWNrUHJldiIsInRyeUNvdW50IiwiJGltZ3NUb0xvYWQiLCJpbml0aWFsaXppbmciLCJsYXN0VmlzaWJsZUluZGV4IiwiY3VycmVudEJyZWFrcG9pbnQiLCJyZXNwb25zaXZlU2V0dGluZ3MiLCJ3aW5kb3dEZWxheSIsInJlbW92ZVNsaWRlIiwic2xpY2tSZW1vdmUiLCJyZW1vdmVCZWZvcmUiLCJyZW1vdmVBbGwiLCJzZXRDU1MiLCJwb3NpdGlvblByb3BzIiwic2V0RGltZW5zaW9ucyIsInNldEZhZGUiLCJyaWdodCIsInNldEhlaWdodCIsInNldE9wdGlvbiIsInNsaWNrU2V0T3B0aW9uIiwiaXRlbSIsImJvZHlTdHlsZSIsIldlYmtpdFRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwibXNUcmFuc2l0aW9uIiwiT1RyYW5zZm9ybSIsInBlcnNwZWN0aXZlUHJvcGVydHkiLCJ3ZWJraXRQZXJzcGVjdGl2ZSIsIk1velRyYW5zZm9ybSIsIk1velBlcnNwZWN0aXZlIiwid2Via2l0VHJhbnNmb3JtIiwibXNUcmFuc2Zvcm0iLCJhbGxTbGlkZXMiLCJyZW1haW5kZXIiLCJldmVuQ29lZiIsImluZmluaXRlQ291bnQiLCJ0YXJnZXRFbGVtZW50Iiwic3luYyIsImFuaW1TbGlkZSIsIm9sZFNsaWRlIiwic2xpZGVMZWZ0IiwibmF2VGFyZ2V0Iiwic3dpcGVEaXJlY3Rpb24iLCJ4RGlzdCIsInlEaXN0Iiwic3dpcGVBbmdsZSIsInN0YXJ0WCIsImN1clgiLCJzdGFydFkiLCJjdXJZIiwiYXRhbjIiLCJyb3VuZCIsInN3aXBlRW5kIiwic3dpcGVMZW5ndGgiLCJlZGdlSGl0IiwibWluU3dpcGUiLCJmaW5nZXJDb3VudCIsInN3aXBlU3RhcnQiLCJzd2lwZU1vdmUiLCJwb3NpdGlvbk9mZnNldCIsInZlcnRpY2FsU3dpcGVMZW5ndGgiLCJzcXJ0IiwicG93IiwidW5maWx0ZXJTbGlkZXMiLCJzbGlja1VuZmlsdGVyIiwiZnJvbUJyZWFrcG9pbnQiLCJtb2RhbHMiLCJzZWxlY3RDdXJyZW50IiwiJGJsb2NrZXIiLCJtb2RhbCIsIiRib2R5IiwiZG9GYWRlIiwiZmFkZUR1cmF0aW9uIiwiY2xvc2VFeGlzdGluZyIsImlzQWN0aXZlIiwiY2xvc2UiLCJhbmNob3IiLCIkZWxtIiwiZWxtIiwic2hvd1NwaW5uZXIiLCJBSkFYX1NFTkQiLCJBSkFYX1NVQ0NFU1MiLCJDTE9TRSIsImhpZGVTcGlubmVyIiwiQUpBWF9DT01QTEVURSIsIkFKQVhfRkFJTCIsImJsb2NrIiwiZmFkZURlbGF5IiwiZXNjYXBlQ2xvc2UiLCJjbGlja0Nsb3NlIiwidW5ibG9jayIsIkJFRk9SRV9CTE9DSyIsIl9jdHgiLCJibG9ja2VyQ2xhc3MiLCJCTE9DSyIsIkJFRk9SRV9PUEVOIiwic2hvd0Nsb3NlIiwiY2xvc2VCdXR0b24iLCJjbG9zZUNsYXNzIiwiY2xvc2VUZXh0IiwibW9kYWxDbGFzcyIsIk9QRU4iLCJCRUZPUkVfQ0xPU0UiLCJfdGhpcyIsIkFGVEVSX0NMT1NFIiwic3Bpbm5lckh0bWwiLCJ2YWxpZGF0ZSIsInZhbGlkYXRvciIsIm9uc3VibWl0Iiwic3VibWl0QnV0dG9uIiwiY2FuY2VsU3VibWl0Iiwic3VibWl0SGFuZGxlciIsImZvcm1TdWJtaXR0ZWQiLCJjdXJyZW50Rm9ybSIsImRlYnVnIiwiZm9ybSIsInBlbmRpbmdSZXF1ZXN0IiwiZm9jdXNJbnZhbGlkIiwidmFsaWQiLCJlcnJvckxpc3QiLCJydWxlcyIsImNvbW1hbmQiLCJzdGF0aWNSdWxlcyIsImV4aXN0aW5nUnVsZXMiLCJmaWx0ZXJlZCIsImhhc0F0dHJpYnV0ZSIsIm5vcm1hbGl6ZVJ1bGUiLCJtZXNzYWdlcyIsIm5vcm1hbGl6ZVJ1bGVzIiwiY2xhc3NSdWxlcyIsImF0dHJpYnV0ZVJ1bGVzIiwiZGF0YVJ1bGVzIiwicmVxdWlyZWQiLCJyZW1vdGUiLCJibGFuayIsImZpbGxlZCIsInVuY2hlY2tlZCIsImZvcm1hdCIsImVycm9yQ2xhc3MiLCJwZW5kaW5nQ2xhc3MiLCJ2YWxpZENsYXNzIiwiZXJyb3JFbGVtZW50IiwiZm9jdXNDbGVhbnVwIiwiZXJyb3JDb250YWluZXIiLCJlcnJvckxhYmVsQ29udGFpbmVyIiwiaWdub3JlIiwiaWdub3JlVGl0bGUiLCJvbmZvY3VzaW4iLCJsYXN0QWN0aXZlIiwidW5oaWdobGlnaHQiLCJoaWRlVGhlc2UiLCJlcnJvcnNGb3IiLCJvbmZvY3Vzb3V0IiwiY2hlY2thYmxlIiwic3VibWl0dGVkIiwib25rZXl1cCIsImVsZW1lbnRWYWx1ZSIsIm9uY2xpY2siLCJoaWdobGlnaHQiLCJmaW5kQnlOYW1lIiwic2V0RGVmYXVsdHMiLCJlbWFpbCIsImRhdGUiLCJkYXRlSVNPIiwibnVtYmVyIiwiZGlnaXRzIiwiZXF1YWxUbyIsIm1pbmxlbmd0aCIsInJhbmdlbGVuZ3RoIiwiYXV0b0NyZWF0ZVJhbmdlcyIsImxhYmVsQ29udGFpbmVyIiwiZXJyb3JDb250ZXh0IiwiY29udGFpbmVycyIsInZhbHVlQ2FjaGUiLCJwZW5kaW5nIiwiaW52YWxpZEhhbmRsZXIiLCJjaGVja0Zvcm0iLCJlcnJvck1hcCIsInNob3dFcnJvcnMiLCJwcmVwYXJlRm9ybSIsImN1cnJlbnRFbGVtZW50cyIsInJzIiwiZ3JvdXAiLCJjbGVhbkVsZW1lbnQiLCJjbGVhbiIsImNoZWNrRWxlbWVudCIsInZhbGlkYXRpb25UYXJnZXRGb3IiLCJwcmVwYXJlRWxlbWVudCIsInRlc3Rncm91cCIsIm51bWJlck9mSW52YWxpZHMiLCJ0b0hpZGUiLCJlcnJvcnMiLCJzdWNjZXNzTGlzdCIsImRlZmF1bHRTaG93RXJyb3JzIiwicmVzZXRGb3JtIiwiaGlkZUVycm9ycyIsInJlc2V0RWxlbWVudHMiLCJvYmplY3RMZW5ndGgiLCJhZGRXcmFwcGVyIiwic2l6ZSIsImZpbmRMYXN0QWN0aXZlIiwicnVsZXNDYWNoZSIsInJlc2V0SW50ZXJuYWxzIiwidG9TaG93IiwiJGVsZW1lbnQiLCJ2YWxpZGl0eSIsImJhZElucHV0Iiwic3Vic3RyIiwibGFzdEluZGV4T2YiLCJydWxlIiwibm9ybWFsaXplciIsInJ1bGVzQ291bnQiLCJkZXBlbmRlbmN5TWlzbWF0Y2giLCJwYXJhbWV0ZXJzIiwibWV0aG9kcyIsImZvcm1hdEFuZEFkZCIsImN1c3RvbURhdGFNZXNzYWdlIiwiY3VzdG9tTWVzc2FnZSIsImZpbmREZWZpbmVkIiwiZGVmYXVsdE1lc3NhZ2UiLCJ0aXRsZSIsInRoZXJlZ2V4IiwidG9Ub2dnbGUiLCJ3cmFwcGVyIiwic2hvd0xhYmVsIiwidmFsaWRFbGVtZW50cyIsImludmFsaWRFbGVtZW50cyIsInBsYWNlIiwiZXJyb3JJRCIsImVsZW1lbnRJRCIsImlkT3JOYW1lIiwiZGVzY3JpYmVkQnkiLCJlcnJvclBsYWNlbWVudCIsImVzY2FwZUNzc01ldGEiLCJkZXNjcmliZXIiLCJnZXRMZW5ndGgiLCJkZXBlbmQiLCJkZXBlbmRUeXBlcyIsImJvb2xlYW4iLCJmdW5jdGlvbiIsInN0YXJ0UmVxdWVzdCIsInN0b3BSZXF1ZXN0IiwicHJldmlvdXNWYWx1ZSIsImNsYXNzUnVsZVNldHRpbmdzIiwiY3JlZGl0Y2FyZCIsImFkZENsYXNzUnVsZXMiLCJub3JtYWxpemVBdHRyaWJ1dGVSdWxlIiwiTnVtYmVyIiwiZGVwZW5kcyIsImtlZXBSdWxlIiwicGFyYW1ldGVyIiwidHJhbnNmb3JtZWQiLCJkZWNpbWFscyIsImVycm9yTWVzc2FnZSIsInJlIiwiZGVjaW1hbFBsYWNlcyIsInRvSW50Iiwib3B0aW9uRGF0YVN0cmluZyIsInByZXZpb3VzIiwib3JpZ2luYWxNZXNzYWdlIiwibW9kZSIsInBvcnQiLCJwZW5kaW5nUmVxdWVzdHMiLCJkIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJmb3JFYWNoIiwicm0iLCJxcyIsIkhUTUxFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImJhck9uQ2xzIiwicmVzaXplRGVib3VuY2UiLCJjc3NHdXJ1IiwiaW1wYWN0IiwidSIsIl9jaGFpbiIsInNjcm9sbGVyIiwiaCIsInVwZGF0ZSIsImF1dG9VcGRhdGUiLCJnZXRUaW1lIiwiX2V2ZW50SGFuZGxlcnMiLCJzY3JvbGwiLCJiYXIiLCJkcmFnIiwiZHJhZ2dpbmdDbHMiLCJfcG9zMCIsImNsaXBwZXIiLCJjbGlwcGVyT25TY3JvbGwiLCJldmFsIiwib3Bwb3MiLCJjcm9zc1BvcyIsImNyb3NzT3BQb3MiLCJjcm9zc1NpemUiLCJjcm9zc01pblNpemUiLCJjcm9zc01heFNpemUiLCJjbGllbnQiLCJjcm9zc0NsaWVudCIsInNjcm9sbEVkZ2UiLCJjcm9zc09mZnNldCIsIm9mZnNldFBvcyIsInNjcm9sbFNpemUiLCJDIiwiX2RlYm91bmNlIiwiX2Rpc3Bvc2VkIiwib3JpZ2luIiwiYmFyVG9wTGltaXQiLCJ0cmFjayIsInNjcm9sbGluZ0NscyIsImN1cnNvciIsInJwb3MiLCJiYXJPbiIsIl9zZXRDcm9zc1NpemVzIiwidXBkYXRlUG9zaXRpb25zIiwiYmFyTWluU2l6ZSIsIl9kdW1iQ3NzIiwibXNPdmVyZmxvd1N0eWxlIiwiYm90dG9tIiwiTyIsIlQiLCJMIiwiZGlzcG9zZSIsImJhcm9uIiwidmVyc2lvbiIsIl9hdSIsIl9vYnNlcnZlciIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiY2hhcmFjdGVyRGF0YSIsImRpc2Nvbm5lY3QiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsIk1vek11dGF0aW9uT2JzZXJ2ZXIiLCJzY3JlZW4iLCJkZWx0YSIsImJhY2t3YXJkIiwibWluVmlldyIsIm91dHNpZGUiLCJjcmVhdGVFdmVudCIsImluaXRXZWJLaXRXaGVlbEV2ZW50Iiwid2hlZWxEZWx0YVgiLCJ3aGVlbERlbHRhWSIsImRpc3BhdGNoRXZlbnQiLCJsaW1pdGVyIiwib2Zmc2V0VG9wIiwieDEiLCJ4MiIsImNsaWNrYWJsZSIsImluc2lkZSIsInBhc3QiLCJmdXR1cmUiLCJncmFkIiwiRnVuY3Rpb24iLCJmaXhIZWFkZXIiLCIkaGVhZGVyR2xvYmFsSGVpZ2h0IiwiJGhlYWRlckdsb2JhbCIsIiRoZWFkZXIiLCJjaGVja0NhcHRjaGEiLCIkZm9ybSIsImNhcHRjaGFJRCIsImdyZWNhcHRjaGEiLCJyZW5kZXIiLCJzaXRla2V5IiwiZm9ybURhdGEiLCJzdWJtaXRGb3JtIiwiZXhlY3V0ZSIsImZvcm1PdmVybGF5IiwiJGZpZWxkIiwicmVkaXJlY3QiLCJyZWxvYWQiLCJ0ZXh0U3RhdHVzIiwiZXJyb3JUaHJvd24iLCJhbGVydCIsIkZvcm1EYXRhIiwidmFsaWRhdGlvbiIsImlzX3N1cHBvcnRlZF9icm93c2VyIiwiRmlsZSIsImZpbGVTaXplVG9CeXRlcyIsInVuaXRzIiwiY292ZXJ0ZWRfc2l6ZSIsImluZGV4X29mX3VuaXQiLCJmb3JtYXR0ZXIiLCJkYXRlUmFuZ2UiLCJkYXRlRnJvbSIsInRpbWVzdGFtcEZyb20iLCJtb21lbnQiLCJ1bml4IiwiZGF0ZVRvIiwidGltZXN0YW1wVG8iLCJkYXRlVmFsdWUiLCJ0aW1lc3RhbXBWYWx1ZSIsImZpbGVzIiwibWF4X2ZpbGVfc2l6ZSIsImhpZGVFdmVudCIsImNsb3Nlc3RFbCIsImhpZGVGdW5jIiwib2ZmY2FudmFzT3ZlcmxheSIsIm9mZmNhbnZhcyIsImFsdFVybCIsIm1vZGFsQ29udGVudFNlbGVjdG9yIiwicHJldmVudE1vYmlsZSIsIiRtb2RhbENvbnRlbnQiLCJ5ZWFyIiwidG91Y2htb3ZlIiwidG91Y2hlbmQiLCJ0b3VjaCIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJlbGVtZW50SWQiLCJnQ2FwdGhhSW5pdCJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBQUEscUJBQUFDLEdBQ0EsSUFBQUMsRUFBQUMsRUFDQSwwREFDQUYsRUFBQSx3SEFRQUcsRUFBQUQsRUFBQSxRQUFBRSxTQUFBLHVCQVFBLE9BTkFELEVBQUFFLFFBQ0FGLEVBQUFHLFNBR0FKLEVBQUEsUUFBQUssT0FBQU4sR0FFQUMsRUFBQSxRQUFBRSxTQUFBLHVCQUdBLFNBQUFJLGNBQUFDLEVBQUFULEVBQUFVLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQWIscUJBQUFDLEdBQ0FZLEVBQUFDLEtBQUEsd0JBQUFDLEtBQUFMLEdBQ0FHLEVBQUFDLEtBQUEsdUJBQUFFLGNBQ0FILEVBQUFDLEtBQUEsbUJBQUFHLGlCQUNBSixFQUFBQyxLQUFBLG9CQUFBSSxXQUVBQyxXQUFBLFdBQ0FOLEVBQUFPLFNBQUEsVUFFQVAsRUFBQUMsS0FBQSxTQUFBTyxRQUFBQyxRQUNBWCxHQUNBUixFQUFBb0IsVUFBQUMsR0FBQSxRQUFBLE9BQUFDLEdBR0FiLEdBQ0FULEVBQUFvQixVQUFBQyxHQUFBLFFBQUFDLElBRUEsS0FFQSxJQUFBQSxFQUFBLFNBQUFDLElBRUF2QixFQUFBdUIsRUFBQUMsUUFBQUMsUUFBQSxlQUFBdEIsUUFBQUgsRUFBQXVCLEVBQUFDLFFBQUFFLEdBQUEsaUJBQUExQixFQUFBdUIsRUFB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RUFBQW9CLFVBQUErRyxNQUFBLFdBQ0FuSSxFQUFBLG9CQUFBcWlELFFBQ0FyaUQsRUFBQSx1QkFBQWEsY0FDQWIsRUFBQSxvQkFBQWUsV0FDQWYsRUFBQSxtQkFBQWMsaUJBRUFkLEVBQUEscUJBQUE4QixNQUFBLFdBQ0FtaEUsUUFBQUMsVUFBQSxLQUFBLEtBQUFsakUsRUFBQXFDLE1BQUE4akIsS0FBQSxTQUNBLElBQUFnOUMsRUFBQXArRCxPQUFBd2pCLFNBQUFELEtBUUEsT0FQQXRvQixFQUFBbWpFLEdBQUFoakUsT0FBQSxHQUNBSCxFQUFBLGNBQUF5OUIsU0FDQTFCLFVBQUEvN0IsRUFBQUEsRUFBQW1tQixLQUFBOWpCLEtBQUEsU0FBQXluQyxTQUFBbmxCLElBQUEsSUFDQSxNQUlBLE1BTUEsSUFBQXkrQyxZQUFBIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaW5pdFNpZGVNb2RhbFdyYXBwZXIoY2xhc3NOYW1lcykge1xuICAgIHZhciAkbW9kYWxXcmFwcGVyID0gJChcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJzaWRlLW1vZGFsLW92ZXJsYXlcIj4nICtcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2lkZS1tb2RhbCAnICsgY2xhc3NOYW1lcyArICdcIj4nICtcbiAgICAgICAgICAgICAgICAnPGEgaHJlZj1cIiNcIiBjbGFzcz1cInNpZGUtbW9kYWwtY2xvc2VcIiBkYXRhLXNpZGUtbW9kYWwtY2xvc2U+PC9hPicgK1xuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2lkZS1tb2RhbC1vdmVyZmxvd1wiPicgK1xuICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcbiAgICAgICAgICAgICc8L2Rpdj4nICtcbiAgICAgICAgJzwvZGl2PidcbiAgICApO1xuXG4gICAgdmFyICRvdmVybGF5ID0gJCgnYm9keScpLmNoaWxkcmVuKCcuc2lkZS1tb2RhbC1vdmVybGF5Jyk7XG5cbiAgICBpZiAoJG92ZXJsYXkubGVuZ3RoKSB7XG4gICAgICAgICRvdmVybGF5LnJlbW92ZSgpO1xuICAgIH1cblxuICAgICQoJ2JvZHknKS5hcHBlbmQoJG1vZGFsV3JhcHBlcik7XG5cbiAgICByZXR1cm4gJCgnYm9keScpLmNoaWxkcmVuKCcuc2lkZS1tb2RhbC1vdmVybGF5Jyk7XG59XG5cbmZ1bmN0aW9uIGluaXRTaWRlTW9kYWwoY29udGVudCwgY2xhc3NOYW1lcywgcHJldmVudE92ZXJsYXlDbG9zZSwgcHJldmVudEVzY0Nsb3NlKSB7XG4gICAgdmFyICR3cmFwcGVyID0gaW5pdFNpZGVNb2RhbFdyYXBwZXIoY2xhc3NOYW1lcyk7XG4gICAgJHdyYXBwZXIuZmluZCgnLnNpZGUtbW9kYWwtb3ZlcmZsb3cnKS5odG1sKGNvbnRlbnQpO1xuICAgICR3cmFwcGVyLmZpbmQoJ1tkYXRhLW1hc2tlZC1pbnB1dF0nKS5tYXNrZWRpbnB1dCgpO1xuICAgICR3cmFwcGVyLmZpbmQoJ1tkYXRhLXZhbGlkYXRlXScpLmZvcm1WYWxpZGF0aW9uKCk7XG4gICAgJHdyYXBwZXIuZmluZCgnW2RhdGEtZm9ybS1hamF4XScpLmZvcm1BamF4KCk7XG5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJHdyYXBwZXIuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAvLyBGb2N1cyBvbiBmaXJzdCBpbnB1dCBpbiBtb2RhbFxuICAgICAgICAkd3JhcHBlci5maW5kKCdpbnB1dCcpLmZpcnN0KCkuZm9jdXMoKTtcbiAgICAgICAgaWYgKCFwcmV2ZW50T3ZlcmxheUNsb3NlKSB7XG4gICAgICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnYm9keScsIGhpZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwcmV2ZW50RXNjQ2xvc2UpIHtcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdrZXl1cCcsIGhpZGUpO1xuICAgICAgICB9XG4gICAgfSwgMjAwKTtcblxuICAgIHZhciBoaWRlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICAoICEkKGUudGFyZ2V0KS5jbG9zZXN0KCcuc2lkZS1tb2RhbCcpLmxlbmd0aCAmJiAhJChlLnRhcmdldCkuaXMoJ2lucHV0LCBsYWJlbCcpICYmICEkKGUudGFyZ2V0KS5pcygnYm9keScpICkgfHxcbiAgICAgICAgICAgICggZS53aGljaCA9PT0gMjcgKVxuICAgICAgICApIHtcbiAgICAgICAgICAgICR3cmFwcGVyLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9mZignY2xpY2snLCAnYm9keScsIGhpZGUpO1xuXG4gICAgICAgICAgICBpZiAoIXByZXZlbnRFc2NDbG9zZSkge1xuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9mZigna2V5dXAnLCBoaWRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAkd3JhcHBlci5maW5kKCdbZGF0YS1zaWRlLW1vZGFsLWNsb3NlXScpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFwcmV2ZW50T3ZlcmxheUNsb3NlKSB7XG4gICAgICAgICAgICAkKGRvY3VtZW50KS5vZmYoJ2NsaWNrJywgJ2JvZHknLCBoaWRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcHJldmVudEVzY0Nsb3NlKSB7XG4gICAgICAgICAgICAkKGRvY3VtZW50KS5vZmYoJ2tleXVwJywgaGlkZSk7XG4gICAgICAgIH1cblxuICAgICAgICAkd3JhcHBlci5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbn1cblxuJChkb2N1bWVudCkub24oJ2NsaWNrJywgJ1tkYXRhLXNpZGUtbW9kYWxdJywgZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgdXJsID0gJCh0aGlzKS5hdHRyKCdocmVmJyksXG4gICAgICAgIGFsdFVybCA9ICQodGhpcykuZGF0YSgnc2lkZS1tb2RhbC11cmwnKSxcbiAgICAgICAgbW9kYWxDb250ZW50U2VsZWN0b3IgPSAkKHRoaXMpLmRhdGEoJ3NpZGUtbW9kYWwnKSxcbiAgICAgICAgY2xhc3NOYW1lcyA9ICQodGhpcykuZGF0YSgnc2lkZS1tb2RhbC1jbGFzcycpLFxuICAgICAgICBwcmV2ZW50TW9iaWxlID0gJCh0aGlzKS5pcygnW2RhdGEtc2lkZS1tb2RhbC1wcmV2ZW50LW1vYmlsZV0nKSxcbiAgICAgICAgcHJldmVudE92ZXJsYXlDbG9zZSA9ICQodGhpcykuaXMoJ1tkYXRhLXNpZGUtbW9kYWwtcHJldmVudC1vdmVybGF5LWNsb3NlXScpLFxuICAgICAgICBwcmV2ZW50RXNjQ2xvc2UgPSAkKHRoaXMpLmlzKCdbZGF0YS1zaWRlLW1vZGFsLXByZXZlbnQtZXNjLWNsb3NlXScpO1xuXG4gICAgaWYgKHByZXZlbnRNb2JpbGUpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5vdXRlcldpZHRoIDwgNzY4KSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb2RhbENvbnRlbnRTZWxlY3Rvcikge1xuICAgICAgICAkbW9kYWxDb250ZW50ID0gJChtb2RhbENvbnRlbnRTZWxlY3RvcikuY2xvbmUoKTtcbiAgICAgICAgaW5pdFNpZGVNb2RhbCgkbW9kYWxDb250ZW50LCBjbGFzc05hbWVzLCBwcmV2ZW50T3ZlcmxheUNsb3NlLCBwcmV2ZW50RXNjQ2xvc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgICQoJ2JvZHknKS5zcGluKCdsYXJnZScsICcjMDAwJyk7XG5cbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHVybDogYWx0VXJsIHx8IHVybCxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBjYWNoZTogZmFsc2VcbiAgICAgICAgfSkuZG9uZShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgJG1vZGFsQ29udGVudCA9IGRhdGE7XG4gICAgICAgICAgICBpbml0U2lkZU1vZGFsKCRtb2RhbENvbnRlbnQsIGNsYXNzTmFtZXMsIHByZXZlbnRPdmVybGF5Q2xvc2UsIHByZXZlbnRFc2NDbG9zZSk7XG4gICAgICAgIH0pLmZhaWwoZnVuY3Rpb24oanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICBhbGVydCgn0J7RiNC40LHQutCwINC30LDQs9GA0YPQt9C60Lgg0LTQsNC90L3Ri9GFLiDQn9C+0LbQsNC70YPQudGB0YLQsCwg0L/QvtC/0YDQvtCx0YPQudGC0LUg0L/QtdGA0LXQt9Cw0LPRgNGD0LfQuNGC0Ywg0YHRgtGA0LDQvdC40YbRgy4nKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGpxWEhSKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yVGhyb3duKTtcbiAgICAgICAgfSkuYWx3YXlzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQoJ2JvZHknKS5zcGluKGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xufSk7IiwiZnVuY3Rpb24gU3dpcGUoZWxlbSwgY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlRXZlbnQoZSkge1xuICAgICAgICBzZWxmLnRvdWNoSGFuZGxlcihlKTtcbiAgICB9XG5cbiAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVFdmVudCwgZmFsc2UpO1xuICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgaGFuZGxlRXZlbnQsIGZhbHNlKTtcbiAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgaGFuZGxlRXZlbnQsIGZhbHNlKTtcbn1cblxuU3dpcGUucHJvdG90eXBlLnRvdWNoZXMgPSB7XG4gICAgXCJ0b3VjaHN0YXJ0XCI6IHtcInhcIjogLTEsIFwieVwiOiAtMX0sXG4gICAgXCJ0b3VjaG1vdmVcIjoge1wieFwiOiAtMSwgXCJ5XCI6IC0xfSxcbiAgICBcInRvdWNoZW5kXCI6IGZhbHNlLFxuICAgIFwiZGlyZWN0aW9uXCI6IFwidW5kZXRlcm1pbmVkXCJcbn07XG5Td2lwZS5wcm90b3R5cGUudG91Y2hIYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHRvdWNoO1xuICAgIGlmICh0eXBlb2YgZXZlbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZXZlbnQudG91Y2hlcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRvdWNoID0gZXZlbnQudG91Y2hlc1swXTtcbiAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3RvdWNoc3RhcnQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3RvdWNobW92ZSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG91Y2hlc1tldmVudC50eXBlXS54ID0gdG91Y2gucGFnZVg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG91Y2hlc1tldmVudC50eXBlXS55ID0gdG91Y2gucGFnZVk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3RvdWNoZW5kJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b3VjaGVzW2V2ZW50LnR5cGVdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHggPSAodGhpcy50b3VjaGVzLnRvdWNoc3RhcnQueCAtIHRoaXMudG91Y2hlcy50b3VjaG1vdmUueCksXG4gICAgICAgICAgICAgICAgICAgICAgICB5ID0gKHRoaXMudG91Y2hlcy50b3VjaHN0YXJ0LnkgLSB0aGlzLnRvdWNoZXMudG91Y2htb3ZlLnkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoeCA8IDApIHggLz0gLTE7XG4gICAgICAgICAgICAgICAgICAgIGlmICh5IDwgMCkgeSAvPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHggPiB5KVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b3VjaGVzLmRpcmVjdGlvbiA9IHRoaXMudG91Y2hlcy50b3VjaHN0YXJ0LnggPCB0aGlzLnRvdWNoZXMudG91Y2htb3ZlLnggPyBcInJpZ2h0XCIgOiBcImxlZnRcIjtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b3VjaGVzLmRpcmVjdGlvbiA9IHRoaXMudG91Y2hlcy50b3VjaHN0YXJ0LnkgPCB0aGlzLnRvdWNoZXMudG91Y2htb3ZlLnkgPyBcImRvd25cIiA6IFwidXBcIjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFjayhldmVudCwgdGhpcy50b3VjaGVzLmRpcmVjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTsiLCJmdW5jdGlvbiBpbml0TWFwcyh5bWFwcykge1xuICAgIHZhciBtYXBFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLW1hcHNdJyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hcEVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbWFwU2V0dGluZ3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UobWFwRWxlbWVudHNbaV0uZGF0YXNldC5tYXBzKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgc2V0dGluZ3MgPSBtYXBTZXR0aW5ncygpO1xuXG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWFwID0gbmV3IHltYXBzLk1hcChtYXBFbGVtZW50c1tpXSwge1xuICAgICAgICAgICAgICAgICAgICBjZW50ZXI6IHNldHRpbmdzLmNlbnRlci5zcGxpdCgnLCcpLFxuICAgICAgICAgICAgICAgICAgICB6b29tOiBzZXR0aW5ncy56b29tLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sczogWydzbWFsbE1hcERlZmF1bHRTZXQnXVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbWFwLmJlaGF2aW9ycy5kaXNhYmxlKCdzY3JvbGxab29tJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3MucGxhY2VtYXJrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBteUdlb09iamVjdCA9IG5ldyB5bWFwcy5HZW9PYmplY3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINCe0L/QuNGB0LDQvdC40LUg0LPQtdC+0LzQtdGC0YDQuNC4LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiUG9pbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXM6IHNldHRpbmdzLnBsYWNlbWFyay5jZW50ZXIuc3BsaXQoJywnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDQmtC+0L3RgtC10L3RgiDQvNC10YLQutC4LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uQ29udGVudDogc2V0dGluZ3MucGxhY2VtYXJrLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXNldDogJ2lzbGFuZHMjYmxhY2tTdHJldGNoeUljb24nXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBtYXAuZ2VvT2JqZWN0cy5hZGQobXlHZW9PYmplY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoKTtcbiAgICB9XG59IiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjIuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTctMDMtMjBUMTg6NTlaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG5cblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBkb2MgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjIuMVwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLFxuXG5cdC8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xuXHRybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2csXG5cblx0Ly8gVXNlZCBieSBqUXVlcnkuY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuXHRmY2FtZWxDYXNlID0gZnVuY3Rpb24oIGFsbCwgbGV0dGVyICkge1xuXHRcdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIEFycmF5LmlzQXJyYXkoIHNyYyApID8gc3JjIDogW107XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnR5cGUoIG9iaiApID09PSBcImZ1bmN0aW9uXCI7XG5cdH0sXG5cblx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fSxcblxuXHRpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHRcdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0XHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHRcdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRcdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG5cdH0sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0LyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzYxMjVcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHR0eXBlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHRcdHR5cGVvZiBvYmo7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUgKSB7XG5cdFx0RE9NRXZhbCggY29kZSApO1xuXHR9LFxuXG5cdC8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHQvLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5cdGNhbWVsQ2FzZTogZnVuY3Rpb24oIHN0cmluZyApIHtcblx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcdFwiXCIgOlxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcblx0Ly8gYXJndW1lbnRzLlxuXHRwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHRcdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0XHRjb250ZXh0ID0gZm47XG5cdFx0XHRmbiA9IHRtcDtcblx0XHR9XG5cblx0XHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHRcdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFNpbXVsYXRlZCBiaW5kXG5cdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRcdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0XHR9O1xuXG5cdFx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdFx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0XHRyZXR1cm4gcHJveHk7XG5cdH0sXG5cblx0bm93OiBEYXRlLm5vdyxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblxuXHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE2LTA4LTA4XG4gKi9cbihmdW5jdGlvbiggd2luZG93ICkge1xuXG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cblx0cmF0dHJpYnV0ZVF1b3RlcyA9IG5ldyBSZWdFeHAoIFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XG5cdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXG5cdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xuXHRcdFx0ZXNjYXBlZCA6XG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGRpc2FibGVkQW5jZXN0b3IgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgKFwiZm9ybVwiIGluIGVsZW0gfHwgXCJsYWJlbFwiIGluIGVsZW0pO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHR9XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cblx0XHRcdFx0Ly8gcVNBIGxvb2tzIG91dHNpZGUgRWxlbWVudCBjb250ZXh0LCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50XG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHdvcmthcm91bmQgdGVjaG5pcXVlXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbmV3U2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0ZGlzYWJsZWRBbmNlc3RvciggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPT0gZG9jdW1lbnQgJiZcblx0XHQoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1zW2krK10pICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhY29tcGlsZXJDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge31cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxudmFyIHJpc1NpbXBsZSA9IC9eLlteOiNcXFtcXC4sXSokLztcblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2ltcGxlIHNlbGVjdG9yIHRoYXQgY2FuIGJlIGZpbHRlcmVkIGRpcmVjdGx5LCByZW1vdmluZyBub24tRWxlbWVudHNcblx0aWYgKCByaXNTaW1wbGUudGVzdCggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xuXHR9XG5cblx0Ly8gQ29tcGxleCBzZWxlY3RvciwgY29tcGFyZSB0aGUgdHdvIHNldHMsIHJlbW92aW5nIG5vbi1FbGVtZW50c1xuXHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3QgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgaWYgKCBub2RlTmFtZSggZWxlbSwgXCJpZnJhbWVcIiApICkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG4gICAgICAgIC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuICAgICAgICAvLyBkb24ndCBzdXBwb3J0IGl0LlxuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcbiAgICAgICAgICAgIGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiBqUXVlcnkudHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBtYXN0ZXIudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgbWFzdGVyLnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXN0ZXIucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGpRdWVyeS5jYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggalF1ZXJ5LmNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLFxuXHRcdHNjYWxlID0gMSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHRkbyB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIGl0ZXJhdGlvbiB6ZXJvZWQgb3V0LCBkb3VibGUgdW50aWwgd2UgZ2V0ICpzb21ldGhpbmcqLlxuXHRcdFx0Ly8gVXNlIHN0cmluZyBmb3IgZG91Ymxpbmcgc28gd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IHNlZSBzY2FsZSBhcyB1bmNoYW5nZWQgYmVsb3dcblx0XHRcdHNjYWxlID0gc2NhbGUgfHwgXCIuNVwiO1xuXG5cdFx0XHQvLyBBZGp1c3QgYW5kIGFwcGx5XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKClcblx0XHQvLyBCcmVhayB0aGUgbG9vcCBpZiBzY2FsZSBpcyB1bmNoYW5nZWQgb3IgcGVyZmVjdCwgb3IgaWYgd2UndmUganVzdCBoYWQgZW5vdWdoLlxuXHRcdH0gd2hpbGUgKFxuXHRcdFx0c2NhbGUgIT09ICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgKSAmJiBzY2FsZSAhPT0gMSAmJiAtLW1heEl0ZXJhdGlvbnNcblx0XHQpO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0rKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGNvbnRhaW5zLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggalF1ZXJ5LnR5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggY29udGFpbnMgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gU2VlICMxMzM5MyBmb3IgbW9yZSBpbmZvXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2Uocylcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogalF1ZXJ5LmlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRmb2N1czoge1xuXG5cdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcblx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIlxuXHRcdH0sXG5cdFx0Ymx1cjoge1xuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmJsdXIgKSB7XG5cdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCJcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIEZvciBjaGVja2JveCwgZmlyZSBuYXRpdmUgZXZlbnQgc28gY2hlY2tlZCBzdGF0ZSB3aWxsIGJlIHJpZ2h0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICYmIG5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHJldHVybiBub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IGpRdWVyeS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvMzIyOVxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxcblxuXHQvKiBlc2xpbnQtZW5hYmxlICovXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTNcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cnNjcmlwdFR5cGVNYXNrZWQgPSAvXnRydWVcXC8oLiopLyxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIFwiPnRib2R5XCIsIGVsZW0gKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0dmFyIG1hdGNoID0gcnNjcmlwdFR5cGVNYXNrZWQuZXhlYyggZWxlbS50eXBlICk7XG5cblx0aWYgKCBtYXRjaCApIHtcblx0XHRlbGVtLnR5cGUgPSBtYXRjaFsgMSBdO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuYWNjZXNzKCBzcmMgKTtcblx0XHRwZGF0YUN1ciA9IGRhdGFQcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIGlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIG5vZGUub3duZXJEb2N1bWVudCwgbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm1hcmdpbiA9ICggL15tYXJnaW4vICk7XG5cbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcImJveC1zaXppbmc6Ym9yZGVyLWJveDtcIiArXG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwidG9wOjElO3dpZHRoOjUwJVwiO1xuXHRcdGRpdi5pbm5lckhUTUwgPSBcIlwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IGRpdlN0eWxlLm1hcmdpbkxlZnQgPT09IFwiMnB4XCI7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSBkaXZTdHlsZS53aWR0aCA9PT0gXCI0cHhcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUubWFyZ2luUmlnaHQgPSBcIjUwJVwiO1xuXHRcdHBpeGVsTWFyZ2luUmlnaHRWYWwgPSBkaXZTdHlsZS5tYXJnaW5SaWdodCA9PT0gXCI0cHhcIjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHBpeGVsTWFyZ2luUmlnaHRWYWwsIHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MDt3aWR0aDo4cHg7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4O1wiICtcblx0XHRcInBhZGRpbmc6MDttYXJnaW4tdG9wOjFweDtwb3NpdGlvbjphYnNvbHV0ZVwiO1xuXHRjb250YWluZXIuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbE1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxNYXJnaW5SaWdodFZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbE1hcmdpblJpZ2h0KCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJtYXJnaW4udGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fSxcblxuXHRjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGU7XG5cbi8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHByb3BlcnR5IG1hcHBlZCBhbG9uZyB3aGF0IGpRdWVyeS5jc3NQcm9wcyBzdWdnZXN0cyBvciB0b1xuLy8gYSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHkuXG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgcmV0ID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF07XG5cdGlmICggIXJldCApIHtcblx0XHRyZXQgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcblx0fVxuXHRyZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7XG5cdHZhciBpLFxuXHRcdHZhbCA9IDA7XG5cblx0Ly8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uXG5cdGlmICggZXh0cmEgPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRpID0gNDtcblxuXHQvLyBPdGhlcndpc2UgaW5pdGlhbGl6ZSBmb3IgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBwcm9wZXJ0aWVzXG5cdH0gZWxzZSB7XG5cdFx0aSA9IG5hbWUgPT09IFwid2lkdGhcIiA/IDEgOiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luLCBzbyBhZGQgaXQgaWYgd2Ugd2FudCBpdFxuXHRcdGlmICggZXh0cmEgPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gYm9yZGVyLWJveCBpbmNsdWRlcyBwYWRkaW5nLCBzbyByZW1vdmUgaXQgaWYgd2Ugd2FudCBjb250ZW50XG5cdFx0XHRpZiAoIGV4dHJhID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBib3JkZXIgbm9yIG1hcmdpbiwgc28gcmVtb3ZlIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCwgc28gYWRkIHBhZGRpbmdcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCBub3IgcGFkZGluZywgc28gYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKSxcblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0Ly8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXG5cdC8vIENoZWNrIGZvciBzdHlsZSBpbiBjYXNlIGEgYnJvd3NlciB3aGljaCByZXR1cm5zIHVucmVsaWFibGUgdmFsdWVzXG5cdC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcblx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmXG5cdFx0KCBzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBuYW1lIF0gKTtcblxuXHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvSGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHRpZiAoIHZhbCA9PT0gXCJhdXRvXCIgKSB7XG5cdFx0dmFsID0gZWxlbVsgXCJvZmZzZXRcIiArIG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApIF07XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiwgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gVXNlIHRoZSBhY3RpdmUgYm94LXNpemluZyBtb2RlbCB0byBhZGQvc3VidHJhY3QgaXJyZWxldmFudCBzdHlsZXNcblx0cmV0dXJuICggdmFsICtcblx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdGVsZW0sXG5cdFx0XHRuYW1lLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlc1xuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHtcblx0XHRcImZsb2F0XCI6IFwiY3NzRmxvYXRcIlxuXHR9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSAmJiBhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdG5hbWUsXG5cdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0KTtcblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCAhcm1hcmdpbi50ZXN0KCBwcmVmaXggKSApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IGpRdWVyeS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTNcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WVxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0alF1ZXJ5LnByb3h5KCByZXN1bHQuc3RvcCwgcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW5mcmFzdHJ1Y3R1cmUuaHRtbCNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcblx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvO1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxuXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZSsrICkgKyB1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBpc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKS5wcm9wKCB7XG5cdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxuXHRcdFx0XHRcdHNyYzogcy51cmxcblx0XHRcdFx0fSApLm9uKFxuXHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0galF1ZXJ5LmlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBqUXVlcnkuaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIGRvYywgZG9jRWxlbSwgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHR3aW4gPSBkb2MuZGVmYXVsdFZpZXc7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCAtIGRvY0VsZW0uY2xpZW50VG9wLFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRMZWZ0XG5cdFx0fTtcblx0fSxcblxuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gRml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSxcblx0XHQvLyBiZWNhdXNlIGl0IGlzIGl0cyBvbmx5IG9mZnNldCBwYXJlbnRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaXMgdGhlcmUgd2hlbiBjb21wdXRlZCBwb3NpdGlvbiBpcyBmaXhlZFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCgpO1xuXG5cdFx0XHQvLyBHZXQgY29ycmVjdCBvZmZzZXRzXG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXHRcdFx0aWYgKCAhbm9kZU5hbWUoIG9mZnNldFBhcmVudFsgMCBdLCBcImh0bWxcIiApICkge1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xuXHRcdFx0cGFyZW50T2Zmc2V0ID0ge1xuXHRcdFx0XHR0b3A6IHBhcmVudE9mZnNldC50b3AgKyBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICksXG5cdFx0XHRcdGxlZnQ6IHBhcmVudE9mZnNldC5sZWZ0ICsgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5cblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoICFub0dsb2JhbCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIiwiLyoqXG4gKiB3aGF0LWlucHV0IC0gQSBnbG9iYWwgdXRpbGl0eSBmb3IgdHJhY2tpbmcgdGhlIGN1cnJlbnQgaW5wdXQgbWV0aG9kIChtb3VzZSwga2V5Ym9hcmQgb3IgdG91Y2gpLlxuICogQHZlcnNpb24gdjUuMC4yXG4gKiBAbGluayBodHRwczovL2dpdGh1Yi5jb20vdGVuMXNldmVuL3doYXQtaW5wdXRcbiAqIEBsaWNlbnNlIE1JVFxuICovXG4oZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcIndoYXRJbnB1dFwiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJ3aGF0SW5wdXRcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wid2hhdElucHV0XCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4vKioqKioqLyBcdFx0fTtcblxuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cblxuXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgLypcblx0ICAgKiB2YXJpYWJsZXNcblx0ICAgKi9cblxuXHQgIC8vIGNhY2hlIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudFxuXHQgIHZhciBkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cdCAgLy8gY3VycmVudGx5IGZvY3VzZWQgZG9tIGVsZW1lbnRcblx0ICB2YXIgY3VycmVudEVsZW1lbnQgPSBudWxsO1xuXG5cdCAgLy8gbGFzdCB1c2VkIGlucHV0IHR5cGVcblx0ICB2YXIgY3VycmVudElucHV0ID0gJ2luaXRpYWwnO1xuXG5cdCAgLy8gbGFzdCB1c2VkIGlucHV0IGludGVudFxuXHQgIHZhciBjdXJyZW50SW50ZW50ID0gY3VycmVudElucHV0O1xuXG5cdCAgLy8gZXZlbnQgYnVmZmVyIHRpbWVyXG5cdCAgdmFyIGV2ZW50VGltZXIgPSBudWxsO1xuXG5cdCAgLy8gZm9ybSBpbnB1dCB0eXBlc1xuXHQgIHZhciBmb3JtSW5wdXRzID0gWydpbnB1dCcsICdzZWxlY3QnLCAndGV4dGFyZWEnXTtcblxuXHQgIC8vIGVtcHR5IGFycmF5IGZvciBob2xkaW5nIGNhbGxiYWNrIGZ1bmN0aW9uc1xuXHQgIHZhciBmdW5jdGlvbkxpc3QgPSBbXTtcblxuXHQgIC8vIGxpc3Qgb2YgbW9kaWZpZXIga2V5cyBjb21tb25seSB1c2VkIHdpdGggdGhlIG1vdXNlIGFuZFxuXHQgIC8vIGNhbiBiZSBzYWZlbHkgaWdub3JlZCB0byBwcmV2ZW50IGZhbHNlIGtleWJvYXJkIGRldGVjdGlvblxuXHQgIHZhciBpZ25vcmVNYXAgPSBbMTYsIC8vIHNoaWZ0XG5cdCAgMTcsIC8vIGNvbnRyb2xcblx0ICAxOCwgLy8gYWx0XG5cdCAgOTEsIC8vIFdpbmRvd3Mga2V5IC8gbGVmdCBBcHBsZSBjbWRcblx0ICA5MyAvLyBXaW5kb3dzIG1lbnUgLyByaWdodCBBcHBsZSBjbWRcblx0ICBdO1xuXG5cdCAgLy8gbWFwcGluZyBvZiBldmVudHMgdG8gaW5wdXQgdHlwZXNcblx0ICB2YXIgaW5wdXRNYXAgPSB7XG5cdCAgICBrZXlkb3duOiAna2V5Ym9hcmQnLFxuXHQgICAga2V5dXA6ICdrZXlib2FyZCcsXG5cdCAgICBtb3VzZWRvd246ICdtb3VzZScsXG5cdCAgICBtb3VzZW1vdmU6ICdtb3VzZScsXG5cdCAgICBNU1BvaW50ZXJEb3duOiAncG9pbnRlcicsXG5cdCAgICBNU1BvaW50ZXJNb3ZlOiAncG9pbnRlcicsXG5cdCAgICBwb2ludGVyZG93bjogJ3BvaW50ZXInLFxuXHQgICAgcG9pbnRlcm1vdmU6ICdwb2ludGVyJyxcblx0ICAgIHRvdWNoc3RhcnQ6ICd0b3VjaCdcblxuXHQgICAgLy8gYm9vbGVhbjogdHJ1ZSBpZiB0b3VjaCBidWZmZXIgaXMgYWN0aXZlXG5cdCAgfTt2YXIgaXNCdWZmZXJpbmcgPSBmYWxzZTtcblxuXHQgIC8vIGJvb2xlYW46IHRydWUgaWYgdGhlIHBhZ2UgaXMgYmVpbmcgc2Nyb2xsZWRcblx0ICB2YXIgaXNTY3JvbGxpbmcgPSBmYWxzZTtcblxuXHQgIC8vIHN0b3JlIGN1cnJlbnQgbW91c2UgcG9zaXRpb25cblx0ICB2YXIgbW91c2VQb3MgPSB7XG5cdCAgICB4OiBudWxsLFxuXHQgICAgeTogbnVsbFxuXG5cdCAgICAvLyBtYXAgb2YgSUUgMTAgcG9pbnRlciBldmVudHNcblx0ICB9O3ZhciBwb2ludGVyTWFwID0ge1xuXHQgICAgMjogJ3RvdWNoJyxcblx0ICAgIDM6ICd0b3VjaCcsIC8vIHRyZWF0IHBlbiBsaWtlIHRvdWNoXG5cdCAgICA0OiAnbW91c2UnXG5cblx0ICAgIC8vIGNoZWNrIHN1cHBvcnQgZm9yIHBhc3NpdmUgZXZlbnQgbGlzdGVuZXJzXG5cdCAgfTt2YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5cblx0ICB0cnkge1xuXHQgICAgdmFyIG9wdHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuXHQgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBudWxsLCBvcHRzKTtcblx0ICB9IGNhdGNoIChlKSB7fVxuXG5cdCAgLypcblx0ICAgKiBzZXQgdXBcblx0ICAgKi9cblxuXHQgIHZhciBzZXRVcCA9IGZ1bmN0aW9uIHNldFVwKCkge1xuXHQgICAgLy8gYWRkIGNvcnJlY3QgbW91c2Ugd2hlZWwgZXZlbnQgbWFwcGluZyB0byBgaW5wdXRNYXBgXG5cdCAgICBpbnB1dE1hcFtkZXRlY3RXaGVlbCgpXSA9ICdtb3VzZSc7XG5cblx0ICAgIGFkZExpc3RlbmVycygpO1xuXHQgICAgZG9VcGRhdGUoJ2lucHV0Jyk7XG5cdCAgICBkb1VwZGF0ZSgnaW50ZW50Jyk7XG5cdCAgfTtcblxuXHQgIC8qXG5cdCAgICogZXZlbnRzXG5cdCAgICovXG5cblx0ICB2YXIgYWRkTGlzdGVuZXJzID0gZnVuY3Rpb24gYWRkTGlzdGVuZXJzKCkge1xuXHQgICAgLy8gYHBvaW50ZXJtb3ZlYCwgYE1TUG9pbnRlck1vdmVgLCBgbW91c2Vtb3ZlYCBhbmQgbW91c2Ugd2hlZWwgZXZlbnQgYmluZGluZ1xuXHQgICAgLy8gY2FuIG9ubHkgZGVtb25zdHJhdGUgcG90ZW50aWFsLCBidXQgbm90IGFjdHVhbCwgaW50ZXJhY3Rpb25cblx0ICAgIC8vIGFuZCBhcmUgdHJlYXRlZCBzZXBhcmF0ZWx5XG5cdCAgICB2YXIgb3B0aW9ucyA9IHN1cHBvcnRzUGFzc2l2ZSA/IHsgcGFzc2l2ZTogdHJ1ZSB9IDogZmFsc2U7XG5cblx0ICAgIC8vIHBvaW50ZXIgZXZlbnRzIChtb3VzZSwgcGVuLCB0b3VjaClcblx0ICAgIGlmICh3aW5kb3cuUG9pbnRlckV2ZW50KSB7XG5cdCAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIHNldElucHV0KTtcblx0ICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgc2V0SW50ZW50KTtcblx0ICAgIH0gZWxzZSBpZiAod2luZG93Lk1TUG9pbnRlckV2ZW50KSB7XG5cdCAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdNU1BvaW50ZXJEb3duJywgc2V0SW5wdXQpO1xuXHQgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignTVNQb2ludGVyTW92ZScsIHNldEludGVudCk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAvLyBtb3VzZSBldmVudHNcblx0ICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHNldElucHV0KTtcblx0ICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHNldEludGVudCk7XG5cblx0ICAgICAgLy8gdG91Y2ggZXZlbnRzXG5cdCAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cpIHtcblx0ICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGV2ZW50QnVmZmVyLCBvcHRpb25zKTtcblx0ICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBzZXRJbnB1dCk7XG5cdCAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgLy8gbW91c2Ugd2hlZWxcblx0ICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGRldGVjdFdoZWVsKCksIHNldEludGVudCwgb3B0aW9ucyk7XG5cblx0ICAgIC8vIGtleWJvYXJkIGV2ZW50c1xuXHQgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBldmVudEJ1ZmZlcik7XG5cdCAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBldmVudEJ1ZmZlcik7XG5cblx0ICAgIC8vIGZvY3VzIGV2ZW50c1xuXHQgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCBzZXRFbGVtZW50KTtcblx0ICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIGNsZWFyRWxlbWVudCk7XG5cdCAgfTtcblxuXHQgIC8vIGNoZWNrcyBjb25kaXRpb25zIGJlZm9yZSB1cGRhdGluZyBuZXcgaW5wdXRcblx0ICB2YXIgc2V0SW5wdXQgPSBmdW5jdGlvbiBzZXRJbnB1dChldmVudCkge1xuXHQgICAgLy8gb25seSBleGVjdXRlIGlmIHRoZSBldmVudCBidWZmZXIgdGltZXIgaXNuJ3QgcnVubmluZ1xuXHQgICAgaWYgKCFpc0J1ZmZlcmluZykge1xuXHQgICAgICB2YXIgZXZlbnRLZXkgPSBldmVudC53aGljaDtcblx0ICAgICAgdmFyIHZhbHVlID0gaW5wdXRNYXBbZXZlbnQudHlwZV07XG5cblx0ICAgICAgaWYgKHZhbHVlID09PSAncG9pbnRlcicpIHtcblx0ICAgICAgICB2YWx1ZSA9IHBvaW50ZXJUeXBlKGV2ZW50KTtcblx0ICAgICAgfVxuXG5cdCAgICAgIHZhciBzaG91bGRVcGRhdGUgPSB2YWx1ZSA9PT0gJ2tleWJvYXJkJyAmJiBldmVudEtleSAmJiBpZ25vcmVNYXAuaW5kZXhPZihldmVudEtleSkgPT09IC0xIHx8IHZhbHVlID09PSAnbW91c2UnIHx8IHZhbHVlID09PSAndG91Y2gnO1xuXG5cdCAgICAgIGlmIChjdXJyZW50SW5wdXQgIT09IHZhbHVlICYmIHNob3VsZFVwZGF0ZSkge1xuXHQgICAgICAgIGN1cnJlbnRJbnB1dCA9IHZhbHVlO1xuXHQgICAgICAgIGRvVXBkYXRlKCdpbnB1dCcpO1xuXHQgICAgICB9XG5cblx0ICAgICAgaWYgKGN1cnJlbnRJbnRlbnQgIT09IHZhbHVlICYmIHNob3VsZFVwZGF0ZSkge1xuXHQgICAgICAgIC8vIHByZXNlcnZlIGludGVudCBmb3Iga2V5Ym9hcmQgdHlwaW5nIGluIGZvcm0gZmllbGRzXG5cdCAgICAgICAgdmFyIGFjdGl2ZUVsZW0gPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHQgICAgICAgIHZhciBub3RGb3JtSW5wdXQgPSBhY3RpdmVFbGVtICYmIGFjdGl2ZUVsZW0ubm9kZU5hbWUgJiYgZm9ybUlucHV0cy5pbmRleE9mKGFjdGl2ZUVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkgPT09IC0xO1xuXG5cdCAgICAgICAgaWYgKG5vdEZvcm1JbnB1dCkge1xuXHQgICAgICAgICAgY3VycmVudEludGVudCA9IHZhbHVlO1xuXHQgICAgICAgICAgZG9VcGRhdGUoJ2ludGVudCcpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH07XG5cblx0ICAvLyB1cGRhdGVzIHRoZSBkb2MgYW5kIGBpbnB1dFR5cGVzYCBhcnJheSB3aXRoIG5ldyBpbnB1dFxuXHQgIHZhciBkb1VwZGF0ZSA9IGZ1bmN0aW9uIGRvVXBkYXRlKHdoaWNoKSB7XG5cdCAgICBkb2NFbGVtLnNldEF0dHJpYnV0ZSgnZGF0YS13aGF0JyArIHdoaWNoLCB3aGljaCA9PT0gJ2lucHV0JyA/IGN1cnJlbnRJbnB1dCA6IGN1cnJlbnRJbnRlbnQpO1xuXG5cdCAgICBmaXJlRnVuY3Rpb25zKHdoaWNoKTtcblx0ICB9O1xuXG5cdCAgLy8gdXBkYXRlcyBpbnB1dCBpbnRlbnQgZm9yIGBtb3VzZW1vdmVgIGFuZCBgcG9pbnRlcm1vdmVgXG5cdCAgdmFyIHNldEludGVudCA9IGZ1bmN0aW9uIHNldEludGVudChldmVudCkge1xuXHQgICAgLy8gdGVzdCB0byBzZWUgaWYgYG1vdXNlbW92ZWAgaGFwcGVuZWQgcmVsYXRpdmUgdG8gdGhlIHNjcmVlbiB0byBkZXRlY3Qgc2Nyb2xsaW5nIHZlcnN1cyBtb3VzZW1vdmVcblx0ICAgIGRldGVjdFNjcm9sbGluZyhldmVudCk7XG5cblx0ICAgIC8vIG9ubHkgZXhlY3V0ZSBpZiB0aGUgZXZlbnQgYnVmZmVyIHRpbWVyIGlzbid0IHJ1bm5pbmdcblx0ICAgIC8vIG9yIHNjcm9sbGluZyBpc24ndCBoYXBwZW5pbmdcblx0ICAgIGlmICghaXNCdWZmZXJpbmcgJiYgIWlzU2Nyb2xsaW5nKSB7XG5cdCAgICAgIHZhciB2YWx1ZSA9IGlucHV0TWFwW2V2ZW50LnR5cGVdO1xuXHQgICAgICBpZiAodmFsdWUgPT09ICdwb2ludGVyJykge1xuXHQgICAgICAgIHZhbHVlID0gcG9pbnRlclR5cGUoZXZlbnQpO1xuXHQgICAgICB9XG5cblx0ICAgICAgaWYgKGN1cnJlbnRJbnRlbnQgIT09IHZhbHVlKSB7XG5cdCAgICAgICAgY3VycmVudEludGVudCA9IHZhbHVlO1xuXHQgICAgICAgIGRvVXBkYXRlKCdpbnRlbnQnKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH07XG5cblx0ICB2YXIgc2V0RWxlbWVudCA9IGZ1bmN0aW9uIHNldEVsZW1lbnQoZXZlbnQpIHtcblx0ICAgIGN1cnJlbnRFbGVtZW50ID0gZXZlbnQudGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdCAgICBkb2NFbGVtLnNldEF0dHJpYnV0ZSgnZGF0YS13aGF0ZWxlbWVudCcsIGN1cnJlbnRFbGVtZW50KTtcblxuXHQgICAgaWYgKGV2ZW50LnRhcmdldC5jbGFzc0xpc3QgJiYgZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5sZW5ndGgpIHtcblx0ICAgICAgZG9jRWxlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtd2hhdGNsYXNzZXMnLCBldmVudC50YXJnZXQuY2xhc3NMaXN0LnRvU3RyaW5nKCkucmVwbGFjZSgnICcsICcsJykpO1xuXHQgICAgfVxuXHQgIH07XG5cblx0ICB2YXIgY2xlYXJFbGVtZW50ID0gZnVuY3Rpb24gY2xlYXJFbGVtZW50KCkge1xuXHQgICAgY3VycmVudEVsZW1lbnQgPSBudWxsO1xuXG5cdCAgICBkb2NFbGVtLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS13aGF0ZWxlbWVudCcpO1xuXHQgICAgZG9jRWxlbS5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtd2hhdGNsYXNzZXMnKTtcblx0ICB9O1xuXG5cdCAgLy8gYnVmZmVycyBldmVudHMgdGhhdCBmcmVxdWVudGx5IGFsc28gZmlyZSBtb3VzZSBldmVudHNcblx0ICB2YXIgZXZlbnRCdWZmZXIgPSBmdW5jdGlvbiBldmVudEJ1ZmZlcihldmVudCkge1xuXHQgICAgLy8gc2V0IHRoZSBjdXJyZW50IGlucHV0XG5cdCAgICBzZXRJbnB1dChldmVudCk7XG5cblx0ICAgIC8vIGNsZWFyIHRoZSB0aW1lciBpZiBpdCBoYXBwZW5zIHRvIGJlIHJ1bm5pbmdcblx0ICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoZXZlbnRUaW1lcik7XG5cblx0ICAgIC8vIHNldCB0aGUgaXNCdWZmZXJpbmcgdG8gYHRydWVgXG5cdCAgICBpc0J1ZmZlcmluZyA9IHRydWU7XG5cblx0ICAgIC8vIHJ1biB0aGUgdGltZXJcblx0ICAgIGV2ZW50VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdCAgICAgIC8vIGlmIHRoZSB0aW1lciBydW5zIG91dCwgc2V0IGlzQnVmZmVyaW5nIGJhY2sgdG8gYGZhbHNlYFxuXHQgICAgICBpc0J1ZmZlcmluZyA9IGZhbHNlO1xuXHQgICAgfSwgMTAwKTtcblx0ICB9O1xuXG5cdCAgLypcblx0ICAgKiB1dGlsaXRpZXNcblx0ICAgKi9cblxuXHQgIHZhciBwb2ludGVyVHlwZSA9IGZ1bmN0aW9uIHBvaW50ZXJUeXBlKGV2ZW50KSB7XG5cdCAgICBpZiAodHlwZW9mIGV2ZW50LnBvaW50ZXJUeXBlID09PSAnbnVtYmVyJykge1xuXHQgICAgICByZXR1cm4gcG9pbnRlck1hcFtldmVudC5wb2ludGVyVHlwZV07XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAvLyB0cmVhdCBwZW4gbGlrZSB0b3VjaFxuXHQgICAgICByZXR1cm4gZXZlbnQucG9pbnRlclR5cGUgPT09ICdwZW4nID8gJ3RvdWNoJyA6IGV2ZW50LnBvaW50ZXJUeXBlO1xuXHQgICAgfVxuXHQgIH07XG5cblx0ICAvLyBkZXRlY3QgdmVyc2lvbiBvZiBtb3VzZSB3aGVlbCBldmVudCB0byB1c2Vcblx0ICAvLyB2aWEgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzL3doZWVsXG5cdCAgdmFyIGRldGVjdFdoZWVsID0gZnVuY3Rpb24gZGV0ZWN0V2hlZWwoKSB7XG5cdCAgICB2YXIgd2hlZWxUeXBlID0gdm9pZCAwO1xuXG5cdCAgICAvLyBNb2Rlcm4gYnJvd3NlcnMgc3VwcG9ydCBcIndoZWVsXCJcblx0ICAgIGlmICgnb253aGVlbCcgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpIHtcblx0ICAgICAgd2hlZWxUeXBlID0gJ3doZWVsJztcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIC8vIFdlYmtpdCBhbmQgSUUgc3VwcG9ydCBhdCBsZWFzdCBcIm1vdXNld2hlZWxcIlxuXHQgICAgICAvLyBvciBhc3N1bWUgdGhhdCByZW1haW5pbmcgYnJvd3NlcnMgYXJlIG9sZGVyIEZpcmVmb3hcblx0ICAgICAgd2hlZWxUeXBlID0gZG9jdW1lbnQub25tb3VzZXdoZWVsICE9PSB1bmRlZmluZWQgPyAnbW91c2V3aGVlbCcgOiAnRE9NTW91c2VTY3JvbGwnO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gd2hlZWxUeXBlO1xuXHQgIH07XG5cblx0ICAvLyBydW5zIGNhbGxiYWNrIGZ1bmN0aW9uc1xuXHQgIHZhciBmaXJlRnVuY3Rpb25zID0gZnVuY3Rpb24gZmlyZUZ1bmN0aW9ucyh0eXBlKSB7XG5cdCAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZnVuY3Rpb25MaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdCAgICAgIGlmIChmdW5jdGlvbkxpc3RbaV0udHlwZSA9PT0gdHlwZSkge1xuXHQgICAgICAgIGZ1bmN0aW9uTGlzdFtpXS5mbi5jYWxsKHVuZGVmaW5lZCwgdHlwZSA9PT0gJ2lucHV0JyA/IGN1cnJlbnRJbnB1dCA6IGN1cnJlbnRJbnRlbnQpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfTtcblxuXHQgIC8vIGZpbmRzIG1hdGNoaW5nIGVsZW1lbnQgaW4gYW4gb2JqZWN0XG5cdCAgdmFyIG9ialBvcyA9IGZ1bmN0aW9uIG9ialBvcyhtYXRjaCkge1xuXHQgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGZ1bmN0aW9uTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHQgICAgICBpZiAoZnVuY3Rpb25MaXN0W2ldLmZuID09PSBtYXRjaCkge1xuXHQgICAgICAgIHJldHVybiBpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfTtcblxuXHQgIHZhciBkZXRlY3RTY3JvbGxpbmcgPSBmdW5jdGlvbiBkZXRlY3RTY3JvbGxpbmcoZXZlbnQpIHtcblx0ICAgIGlmIChtb3VzZVBvc1sneCddICE9PSBldmVudC5zY3JlZW5YIHx8IG1vdXNlUG9zWyd5J10gIT09IGV2ZW50LnNjcmVlblkpIHtcblx0ICAgICAgaXNTY3JvbGxpbmcgPSBmYWxzZTtcblxuXHQgICAgICBtb3VzZVBvc1sneCddID0gZXZlbnQuc2NyZWVuWDtcblx0ICAgICAgbW91c2VQb3NbJ3knXSA9IGV2ZW50LnNjcmVlblk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBpc1Njcm9sbGluZyA9IHRydWU7XG5cdCAgICB9XG5cdCAgfTtcblxuXHQgIC8qXG5cdCAgICogaW5pdFxuXHQgICAqL1xuXG5cdCAgLy8gZG9uJ3Qgc3RhcnQgc2NyaXB0IHVubGVzcyBicm93c2VyIGN1dHMgdGhlIG11c3RhcmRcblx0ICAvLyAoYWxzbyBwYXNzZXMgaWYgcG9seWZpbGxzIGFyZSB1c2VkKVxuXHQgIGlmICgnYWRkRXZlbnRMaXN0ZW5lcicgaW4gd2luZG93ICYmIEFycmF5LnByb3RvdHlwZS5pbmRleE9mKSB7XG5cdCAgICBzZXRVcCgpO1xuXHQgIH1cblxuXHQgIC8qXG5cdCAgICogYXBpXG5cdCAgICovXG5cblx0ICByZXR1cm4ge1xuXHQgICAgLy8gcmV0dXJucyBzdHJpbmc6IHRoZSBjdXJyZW50IGlucHV0IHR5cGVcblx0ICAgIC8vIG9wdDogJ2ludGVudCd8J2lucHV0J1xuXHQgICAgLy8gJ2lucHV0JyAoZGVmYXVsdCk6IHJldHVybnMgdGhlIHNhbWUgdmFsdWUgYXMgdGhlIGBkYXRhLXdoYXRpbnB1dGAgYXR0cmlidXRlXG5cdCAgICAvLyAnaW50ZW50JzogaW5jbHVkZXMgYGRhdGEtd2hhdGludGVudGAgdmFsdWUgaWYgaXQncyBkaWZmZXJlbnQgdGhhbiBgZGF0YS13aGF0aW5wdXRgXG5cdCAgICBhc2s6IGZ1bmN0aW9uIGFzayhvcHQpIHtcblx0ICAgICAgcmV0dXJuIG9wdCA9PT0gJ2ludGVudCcgPyBjdXJyZW50SW50ZW50IDogY3VycmVudElucHV0O1xuXHQgICAgfSxcblxuXHQgICAgLy8gcmV0dXJucyBzdHJpbmc6IHRoZSBjdXJyZW50bHkgZm9jdXNlZCBlbGVtZW50IG9yIG51bGxcblx0ICAgIGVsZW1lbnQ6IGZ1bmN0aW9uIGVsZW1lbnQoKSB7XG5cdCAgICAgIHJldHVybiBjdXJyZW50RWxlbWVudDtcblx0ICAgIH0sXG5cblx0ICAgIC8vIG92ZXJ3cml0ZXMgaWdub3JlZCBrZXlzIHdpdGggcHJvdmlkZWQgYXJyYXlcblx0ICAgIGlnbm9yZUtleXM6IGZ1bmN0aW9uIGlnbm9yZUtleXMoYXJyKSB7XG5cdCAgICAgIGlnbm9yZU1hcCA9IGFycjtcblx0ICAgIH0sXG5cblx0ICAgIC8vIGF0dGFjaCBmdW5jdGlvbnMgdG8gaW5wdXQgYW5kIGludGVudCBcImV2ZW50c1wiXG5cdCAgICAvLyBmdW5jdDogZnVuY3Rpb24gdG8gZmlyZSBvbiBjaGFuZ2Vcblx0ICAgIC8vIGV2ZW50VHlwZTogJ2lucHV0J3wnaW50ZW50J1xuXHQgICAgcmVnaXN0ZXJPbkNoYW5nZTogZnVuY3Rpb24gcmVnaXN0ZXJPbkNoYW5nZShmbiwgZXZlbnRUeXBlKSB7XG5cdCAgICAgIGZ1bmN0aW9uTGlzdC5wdXNoKHtcblx0ICAgICAgICBmbjogZm4sXG5cdCAgICAgICAgdHlwZTogZXZlbnRUeXBlIHx8ICdpbnB1dCdcblx0ICAgICAgfSk7XG5cdCAgICB9LFxuXG5cdCAgICB1blJlZ2lzdGVyT25DaGFuZ2U6IGZ1bmN0aW9uIHVuUmVnaXN0ZXJPbkNoYW5nZShmbikge1xuXHQgICAgICB2YXIgcG9zaXRpb24gPSBvYmpQb3MoZm4pO1xuXG5cdCAgICAgIGlmIChwb3NpdGlvbikge1xuXHQgICAgICAgIGZ1bmN0aW9uTGlzdC5zcGxpY2UocG9zaXRpb24sIDEpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfTtcblx0fSgpO1xuXG4vKioqLyB9KVxuLyoqKioqKi8gXSlcbn0pO1xuOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDExLTIwMTQgRmVsaXggR25hc3NcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL3NwaW4uanMub3JnL1xuICpcbiAqIEV4YW1wbGU6XG4gICAgdmFyIG9wdHMgPSB7XG4gICAgICBsaW5lczogMTIgICAgICAgICAgICAgLy8gVGhlIG51bWJlciBvZiBsaW5lcyB0byBkcmF3XG4gICAgLCBsZW5ndGg6IDcgICAgICAgICAgICAgLy8gVGhlIGxlbmd0aCBvZiBlYWNoIGxpbmVcbiAgICAsIHdpZHRoOiA1ICAgICAgICAgICAgICAvLyBUaGUgbGluZSB0aGlja25lc3NcbiAgICAsIHJhZGl1czogMTAgICAgICAgICAgICAvLyBUaGUgcmFkaXVzIG9mIHRoZSBpbm5lciBjaXJjbGVcbiAgICAsIHNjYWxlOiAxLjAgICAgICAgICAgICAvLyBTY2FsZXMgb3ZlcmFsbCBzaXplIG9mIHRoZSBzcGlubmVyXG4gICAgLCBjb3JuZXJzOiAxICAgICAgICAgICAgLy8gUm91bmRuZXNzICgwLi4xKVxuICAgICwgY29sb3I6ICcjMDAwJyAgICAgICAgIC8vICNyZ2Igb3IgI3JyZ2diYlxuICAgICwgb3BhY2l0eTogMS80ICAgICAgICAgIC8vIE9wYWNpdHkgb2YgdGhlIGxpbmVzXG4gICAgLCByb3RhdGU6IDAgICAgICAgICAgICAgLy8gUm90YXRpb24gb2Zmc2V0XG4gICAgLCBkaXJlY3Rpb246IDEgICAgICAgICAgLy8gMTogY2xvY2t3aXNlLCAtMTogY291bnRlcmNsb2Nrd2lzZVxuICAgICwgc3BlZWQ6IDEgICAgICAgICAgICAgIC8vIFJvdW5kcyBwZXIgc2Vjb25kXG4gICAgLCB0cmFpbDogMTAwICAgICAgICAgICAgLy8gQWZ0ZXJnbG93IHBlcmNlbnRhZ2VcbiAgICAsIGZwczogMjAgICAgICAgICAgICAgICAvLyBGcmFtZXMgcGVyIHNlY29uZCB3aGVuIHVzaW5nIHNldFRpbWVvdXQoKVxuICAgICwgekluZGV4OiAyZTkgICAgICAgICAgIC8vIFVzZSBhIGhpZ2ggei1pbmRleCBieSBkZWZhdWx0XG4gICAgLCBjbGFzc05hbWU6ICdzcGlubmVyJyAgLy8gQ1NTIGNsYXNzIHRvIGFzc2lnbiB0byB0aGUgZWxlbWVudFxuICAgICwgdG9wOiAnNTAlJyAgICAgICAgICAgIC8vIGNlbnRlciB2ZXJ0aWNhbGx5XG4gICAgLCBsZWZ0OiAnNTAlJyAgICAgICAgICAgLy8gY2VudGVyIGhvcml6b250YWxseVxuICAgICwgc2hhZG93OiBmYWxzZSAgICAgICAgIC8vIFdoZXRoZXIgdG8gcmVuZGVyIGEgc2hhZG93XG4gICAgLCBod2FjY2VsOiBmYWxzZSAgICAgICAgLy8gV2hldGhlciB0byB1c2UgaGFyZHdhcmUgYWNjZWxlcmF0aW9uIChtaWdodCBiZSBidWdneSlcbiAgICAsIHBvc2l0aW9uOiAnYWJzb2x1dGUnICAvLyBFbGVtZW50IHBvc2l0aW9uaW5nXG4gICAgfVxuICAgIHZhciB0YXJnZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9vJylcbiAgICB2YXIgc3Bpbm5lciA9IG5ldyBTcGlubmVyKG9wdHMpLnNwaW4odGFyZ2V0KVxuICovXG47KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cbiAgLyogQ29tbW9uSlMgKi9cbiAgaWYgKHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpXG5cbiAgLyogQU1EIG1vZHVsZSAqL1xuICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkgZGVmaW5lKGZhY3RvcnkpXG5cbiAgLyogQnJvd3NlciBnbG9iYWwgKi9cbiAgZWxzZSByb290LlNwaW5uZXIgPSBmYWN0b3J5KClcbn0odGhpcywgZnVuY3Rpb24gKCkge1xuICBcInVzZSBzdHJpY3RcIlxuXG4gIHZhciBwcmVmaXhlcyA9IFsnd2Via2l0JywgJ01veicsICdtcycsICdPJ10gLyogVmVuZG9yIHByZWZpeGVzICovXG4gICAgLCBhbmltYXRpb25zID0ge30gLyogQW5pbWF0aW9uIHJ1bGVzIGtleWVkIGJ5IHRoZWlyIG5hbWUgKi9cbiAgICAsIHVzZUNzc0FuaW1hdGlvbnMgLyogV2hldGhlciB0byB1c2UgQ1NTIGFuaW1hdGlvbnMgb3Igc2V0VGltZW91dCAqL1xuICAgICwgc2hlZXQgLyogQSBzdHlsZXNoZWV0IHRvIGhvbGQgdGhlIEBrZXlmcmFtZSBvciBWTUwgcnVsZXMuICovXG5cbiAgLyoqXG4gICAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gY3JlYXRlIGVsZW1lbnRzLiBJZiBubyB0YWcgbmFtZSBpcyBnaXZlbixcbiAgICogYSBESVYgaXMgY3JlYXRlZC4gT3B0aW9uYWxseSBwcm9wZXJ0aWVzIGNhbiBiZSBwYXNzZWQuXG4gICAqL1xuICBmdW5jdGlvbiBjcmVhdGVFbCAodGFnLCBwcm9wKSB7XG4gICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcgfHwgJ2RpdicpXG4gICAgICAsIG5cblxuICAgIGZvciAobiBpbiBwcm9wKSBlbFtuXSA9IHByb3Bbbl1cbiAgICByZXR1cm4gZWxcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBlbmRzIGNoaWxkcmVuIGFuZCByZXR1cm5zIHRoZSBwYXJlbnQuXG4gICAqL1xuICBmdW5jdGlvbiBpbnMgKHBhcmVudCAvKiBjaGlsZDEsIGNoaWxkMiwgLi4uKi8pIHtcbiAgICBmb3IgKHZhciBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChhcmd1bWVudHNbaV0pXG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmVudFxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gb3BhY2l0eSBrZXlmcmFtZSBhbmltYXRpb24gcnVsZSBhbmQgcmV0dXJucyBpdHMgbmFtZS5cbiAgICogU2luY2UgbW9zdCBtb2JpbGUgV2Via2l0cyBoYXZlIHRpbWluZyBpc3N1ZXMgd2l0aCBhbmltYXRpb24tZGVsYXksXG4gICAqIHdlIGNyZWF0ZSBzZXBhcmF0ZSBydWxlcyBmb3IgZWFjaCBsaW5lL3NlZ21lbnQuXG4gICAqL1xuICBmdW5jdGlvbiBhZGRBbmltYXRpb24gKGFscGhhLCB0cmFpbCwgaSwgbGluZXMpIHtcbiAgICB2YXIgbmFtZSA9IFsnb3BhY2l0eScsIHRyYWlsLCB+fihhbHBoYSAqIDEwMCksIGksIGxpbmVzXS5qb2luKCctJylcbiAgICAgICwgc3RhcnQgPSAwLjAxICsgaS9saW5lcyAqIDEwMFxuICAgICAgLCB6ID0gTWF0aC5tYXgoMSAtICgxLWFscGhhKSAvIHRyYWlsICogKDEwMC1zdGFydCksIGFscGhhKVxuICAgICAgLCBwcmVmaXggPSB1c2VDc3NBbmltYXRpb25zLnN1YnN0cmluZygwLCB1c2VDc3NBbmltYXRpb25zLmluZGV4T2YoJ0FuaW1hdGlvbicpKS50b0xvd2VyQ2FzZSgpXG4gICAgICAsIHByZSA9IHByZWZpeCAmJiAnLScgKyBwcmVmaXggKyAnLScgfHwgJydcblxuICAgIGlmICghYW5pbWF0aW9uc1tuYW1lXSkge1xuICAgICAgc2hlZXQuaW5zZXJ0UnVsZShcbiAgICAgICAgJ0AnICsgcHJlICsgJ2tleWZyYW1lcyAnICsgbmFtZSArICd7JyArXG4gICAgICAgICcwJXtvcGFjaXR5OicgKyB6ICsgJ30nICtcbiAgICAgICAgc3RhcnQgKyAnJXtvcGFjaXR5OicgKyBhbHBoYSArICd9JyArXG4gICAgICAgIChzdGFydCswLjAxKSArICcle29wYWNpdHk6MX0nICtcbiAgICAgICAgKHN0YXJ0K3RyYWlsKSAlIDEwMCArICcle29wYWNpdHk6JyArIGFscGhhICsgJ30nICtcbiAgICAgICAgJzEwMCV7b3BhY2l0eTonICsgeiArICd9JyArXG4gICAgICAgICd9Jywgc2hlZXQuY3NzUnVsZXMubGVuZ3RoKVxuXG4gICAgICBhbmltYXRpb25zW25hbWVdID0gMVxuICAgIH1cblxuICAgIHJldHVybiBuYW1lXG4gIH1cblxuICAvKipcbiAgICogVHJpZXMgdmFyaW91cyB2ZW5kb3IgcHJlZml4ZXMgYW5kIHJldHVybnMgdGhlIGZpcnN0IHN1cHBvcnRlZCBwcm9wZXJ0eS5cbiAgICovXG4gIGZ1bmN0aW9uIHZlbmRvciAoZWwsIHByb3ApIHtcbiAgICB2YXIgcyA9IGVsLnN0eWxlXG4gICAgICAsIHBwXG4gICAgICAsIGlcblxuICAgIHByb3AgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKVxuICAgIGlmIChzW3Byb3BdICE9PSB1bmRlZmluZWQpIHJldHVybiBwcm9wXG4gICAgZm9yIChpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwcCA9IHByZWZpeGVzW2ldK3Byb3BcbiAgICAgIGlmIChzW3BwXSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gcHBcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBtdWx0aXBsZSBzdHlsZSBwcm9wZXJ0aWVzIGF0IG9uY2UuXG4gICAqL1xuICBmdW5jdGlvbiBjc3MgKGVsLCBwcm9wKSB7XG4gICAgZm9yICh2YXIgbiBpbiBwcm9wKSB7XG4gICAgICBlbC5zdHlsZVt2ZW5kb3IoZWwsIG4pIHx8IG5dID0gcHJvcFtuXVxuICAgIH1cblxuICAgIHJldHVybiBlbFxuICB9XG5cbiAgLyoqXG4gICAqIEZpbGxzIGluIGRlZmF1bHQgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gbWVyZ2UgKG9iaikge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVmID0gYXJndW1lbnRzW2ldXG4gICAgICBmb3IgKHZhciBuIGluIGRlZikge1xuICAgICAgICBpZiAob2JqW25dID09PSB1bmRlZmluZWQpIG9ialtuXSA9IGRlZltuXVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbGluZSBjb2xvciBmcm9tIHRoZSBnaXZlbiBzdHJpbmcgb3IgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRDb2xvciAoY29sb3IsIGlkeCkge1xuICAgIHJldHVybiB0eXBlb2YgY29sb3IgPT0gJ3N0cmluZycgPyBjb2xvciA6IGNvbG9yW2lkeCAlIGNvbG9yLmxlbmd0aF1cbiAgfVxuXG4gIC8vIEJ1aWx0LWluIGRlZmF1bHRzXG5cbiAgdmFyIGRlZmF1bHRzID0ge1xuICAgIGxpbmVzOiAxMiAgICAgICAgICAgICAvLyBUaGUgbnVtYmVyIG9mIGxpbmVzIHRvIGRyYXdcbiAgLCBsZW5ndGg6IDcgICAgICAgICAgICAgLy8gVGhlIGxlbmd0aCBvZiBlYWNoIGxpbmVcbiAgLCB3aWR0aDogNSAgICAgICAgICAgICAgLy8gVGhlIGxpbmUgdGhpY2tuZXNzXG4gICwgcmFkaXVzOiAxMCAgICAgICAgICAgIC8vIFRoZSByYWRpdXMgb2YgdGhlIGlubmVyIGNpcmNsZVxuICAsIHNjYWxlOiAxLjAgICAgICAgICAgICAvLyBTY2FsZXMgb3ZlcmFsbCBzaXplIG9mIHRoZSBzcGlubmVyXG4gICwgY29ybmVyczogMSAgICAgICAgICAgIC8vIFJvdW5kbmVzcyAoMC4uMSlcbiAgLCBjb2xvcjogJyMwMDAnICAgICAgICAgLy8gI3JnYiBvciAjcnJnZ2JiXG4gICwgb3BhY2l0eTogMS80ICAgICAgICAgIC8vIE9wYWNpdHkgb2YgdGhlIGxpbmVzXG4gICwgcm90YXRlOiAwICAgICAgICAgICAgIC8vIFJvdGF0aW9uIG9mZnNldFxuICAsIGRpcmVjdGlvbjogMSAgICAgICAgICAvLyAxOiBjbG9ja3dpc2UsIC0xOiBjb3VudGVyY2xvY2t3aXNlXG4gICwgc3BlZWQ6IDEgICAgICAgICAgICAgIC8vIFJvdW5kcyBwZXIgc2Vjb25kXG4gICwgdHJhaWw6IDEwMCAgICAgICAgICAgIC8vIEFmdGVyZ2xvdyBwZXJjZW50YWdlXG4gICwgZnBzOiAyMCAgICAgICAgICAgICAgIC8vIEZyYW1lcyBwZXIgc2Vjb25kIHdoZW4gdXNpbmcgc2V0VGltZW91dCgpXG4gICwgekluZGV4OiAyZTkgICAgICAgICAgIC8vIFVzZSBhIGhpZ2ggei1pbmRleCBieSBkZWZhdWx0XG4gICwgY2xhc3NOYW1lOiAnc3Bpbm5lcicgIC8vIENTUyBjbGFzcyB0byBhc3NpZ24gdG8gdGhlIGVsZW1lbnRcbiAgLCB0b3A6ICc1MCUnICAgICAgICAgICAgLy8gY2VudGVyIHZlcnRpY2FsbHlcbiAgLCBsZWZ0OiAnNTAlJyAgICAgICAgICAgLy8gY2VudGVyIGhvcml6b250YWxseVxuICAsIHNoYWRvdzogZmFsc2UgICAgICAgICAvLyBXaGV0aGVyIHRvIHJlbmRlciBhIHNoYWRvd1xuICAsIGh3YWNjZWw6IGZhbHNlICAgICAgICAvLyBXaGV0aGVyIHRvIHVzZSBoYXJkd2FyZSBhY2NlbGVyYXRpb24gKG1pZ2h0IGJlIGJ1Z2d5KVxuICAsIHBvc2l0aW9uOiAnYWJzb2x1dGUnICAvLyBFbGVtZW50IHBvc2l0aW9uaW5nXG4gIH1cblxuICAvKiogVGhlIGNvbnN0cnVjdG9yICovXG4gIGZ1bmN0aW9uIFNwaW5uZXIgKG8pIHtcbiAgICB0aGlzLm9wdHMgPSBtZXJnZShvIHx8IHt9LCBTcGlubmVyLmRlZmF1bHRzLCBkZWZhdWx0cylcbiAgfVxuXG4gIC8vIEdsb2JhbCBkZWZhdWx0cyB0aGF0IG92ZXJyaWRlIHRoZSBidWlsdC1pbnM6XG4gIFNwaW5uZXIuZGVmYXVsdHMgPSB7fVxuXG4gIG1lcmdlKFNwaW5uZXIucHJvdG90eXBlLCB7XG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgc3Bpbm5lciB0byB0aGUgZ2l2ZW4gdGFyZ2V0IGVsZW1lbnQuIElmIHRoaXMgaW5zdGFuY2UgaXMgYWxyZWFkeVxuICAgICAqIHNwaW5uaW5nLCBpdCBpcyBhdXRvbWF0aWNhbGx5IHJlbW92ZWQgZnJvbSBpdHMgcHJldmlvdXMgdGFyZ2V0IGIgY2FsbGluZ1xuICAgICAqIHN0b3AoKSBpbnRlcm5hbGx5LlxuICAgICAqL1xuICAgIHNwaW46IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgIHRoaXMuc3RvcCgpXG5cbiAgICAgIHZhciBzZWxmID0gdGhpc1xuICAgICAgICAsIG8gPSBzZWxmLm9wdHNcbiAgICAgICAgLCBlbCA9IHNlbGYuZWwgPSBjcmVhdGVFbChudWxsLCB7Y2xhc3NOYW1lOiBvLmNsYXNzTmFtZX0pXG5cbiAgICAgIGNzcyhlbCwge1xuICAgICAgICBwb3NpdGlvbjogby5wb3NpdGlvblxuICAgICAgLCB3aWR0aDogMFxuICAgICAgLCB6SW5kZXg6IG8uekluZGV4XG4gICAgICAsIGxlZnQ6IG8ubGVmdFxuICAgICAgLCB0b3A6IG8udG9wXG4gICAgICB9KVxuXG4gICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIHRhcmdldC5pbnNlcnRCZWZvcmUoZWwsIHRhcmdldC5maXJzdENoaWxkIHx8IG51bGwpXG4gICAgICB9XG5cbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgncm9sZScsICdwcm9ncmVzc2JhcicpXG4gICAgICBzZWxmLmxpbmVzKGVsLCBzZWxmLm9wdHMpXG5cbiAgICAgIGlmICghdXNlQ3NzQW5pbWF0aW9ucykge1xuICAgICAgICAvLyBObyBDU1MgYW5pbWF0aW9uIHN1cHBvcnQsIHVzZSBzZXRUaW1lb3V0KCkgaW5zdGVhZFxuICAgICAgICB2YXIgaSA9IDBcbiAgICAgICAgICAsIHN0YXJ0ID0gKG8ubGluZXMgLSAxKSAqICgxIC0gby5kaXJlY3Rpb24pIC8gMlxuICAgICAgICAgICwgYWxwaGFcbiAgICAgICAgICAsIGZwcyA9IG8uZnBzXG4gICAgICAgICAgLCBmID0gZnBzIC8gby5zcGVlZFxuICAgICAgICAgICwgb3N0ZXAgPSAoMSAtIG8ub3BhY2l0eSkgLyAoZiAqIG8udHJhaWwgLyAxMDApXG4gICAgICAgICAgLCBhc3RlcCA9IGYgLyBvLmxpbmVzXG5cbiAgICAgICAgOyhmdW5jdGlvbiBhbmltICgpIHtcbiAgICAgICAgICBpKytcbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG8ubGluZXM7IGorKykge1xuICAgICAgICAgICAgYWxwaGEgPSBNYXRoLm1heCgxIC0gKGkgKyAoby5saW5lcyAtIGopICogYXN0ZXApICUgZiAqIG9zdGVwLCBvLm9wYWNpdHkpXG5cbiAgICAgICAgICAgIHNlbGYub3BhY2l0eShlbCwgaiAqIG8uZGlyZWN0aW9uICsgc3RhcnQsIGFscGhhLCBvKVxuICAgICAgICAgIH1cbiAgICAgICAgICBzZWxmLnRpbWVvdXQgPSBzZWxmLmVsICYmIHNldFRpbWVvdXQoYW5pbSwgfn4oMTAwMCAvIGZwcykpXG4gICAgICAgIH0pKClcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxmXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RvcHMgYW5kIHJlbW92ZXMgdGhlIFNwaW5uZXIuXG4gICAgICovXG4gICwgc3RvcDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGVsID0gdGhpcy5lbFxuICAgICAgaWYgKGVsKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpXG4gICAgICAgIGlmIChlbC5wYXJlbnROb2RlKSBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKVxuICAgICAgICB0aGlzLmVsID0gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludGVybmFsIG1ldGhvZCB0aGF0IGRyYXdzIHRoZSBpbmRpdmlkdWFsIGxpbmVzLiBXaWxsIGJlIG92ZXJ3cml0dGVuXG4gICAgICogaW4gVk1MIGZhbGxiYWNrIG1vZGUgYmVsb3cuXG4gICAgICovXG4gICwgbGluZXM6IGZ1bmN0aW9uIChlbCwgbykge1xuICAgICAgdmFyIGkgPSAwXG4gICAgICAgICwgc3RhcnQgPSAoby5saW5lcyAtIDEpICogKDEgLSBvLmRpcmVjdGlvbikgLyAyXG4gICAgICAgICwgc2VnXG5cbiAgICAgIGZ1bmN0aW9uIGZpbGwgKGNvbG9yLCBzaGFkb3cpIHtcbiAgICAgICAgcmV0dXJuIGNzcyhjcmVhdGVFbCgpLCB7XG4gICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICAgICAgLCB3aWR0aDogby5zY2FsZSAqIChvLmxlbmd0aCArIG8ud2lkdGgpICsgJ3B4J1xuICAgICAgICAsIGhlaWdodDogby5zY2FsZSAqIG8ud2lkdGggKyAncHgnXG4gICAgICAgICwgYmFja2dyb3VuZDogY29sb3JcbiAgICAgICAgLCBib3hTaGFkb3c6IHNoYWRvd1xuICAgICAgICAsIHRyYW5zZm9ybU9yaWdpbjogJ2xlZnQnXG4gICAgICAgICwgdHJhbnNmb3JtOiAncm90YXRlKCcgKyB+figzNjAvby5saW5lcyppICsgby5yb3RhdGUpICsgJ2RlZykgdHJhbnNsYXRlKCcgKyBvLnNjYWxlKm8ucmFkaXVzICsgJ3B4JyArICcsMCknXG4gICAgICAgICwgYm9yZGVyUmFkaXVzOiAoby5jb3JuZXJzICogby5zY2FsZSAqIG8ud2lkdGggPj4gMSkgKyAncHgnXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBpIDwgby5saW5lczsgaSsrKSB7XG4gICAgICAgIHNlZyA9IGNzcyhjcmVhdGVFbCgpLCB7XG4gICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICAgICAgLCB0b3A6IDEgKyB+KG8uc2NhbGUgKiBvLndpZHRoIC8gMikgKyAncHgnXG4gICAgICAgICwgdHJhbnNmb3JtOiBvLmh3YWNjZWwgPyAndHJhbnNsYXRlM2QoMCwwLDApJyA6ICcnXG4gICAgICAgICwgb3BhY2l0eTogby5vcGFjaXR5XG4gICAgICAgICwgYW5pbWF0aW9uOiB1c2VDc3NBbmltYXRpb25zICYmIGFkZEFuaW1hdGlvbihvLm9wYWNpdHksIG8udHJhaWwsIHN0YXJ0ICsgaSAqIG8uZGlyZWN0aW9uLCBvLmxpbmVzKSArICcgJyArIDEgLyBvLnNwZWVkICsgJ3MgbGluZWFyIGluZmluaXRlJ1xuICAgICAgICB9KVxuXG4gICAgICAgIGlmIChvLnNoYWRvdykgaW5zKHNlZywgY3NzKGZpbGwoJyMwMDAnLCAnMCAwIDRweCAjMDAwJyksIHt0b3A6ICcycHgnfSkpXG4gICAgICAgIGlucyhlbCwgaW5zKHNlZywgZmlsbChnZXRDb2xvcihvLmNvbG9yLCBpKSwgJzAgMCAxcHggcmdiYSgwLDAsMCwuMSknKSkpXG4gICAgICB9XG4gICAgICByZXR1cm4gZWxcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBtZXRob2QgdGhhdCBhZGp1c3RzIHRoZSBvcGFjaXR5IG9mIGEgc2luZ2xlIGxpbmUuXG4gICAgICogV2lsbCBiZSBvdmVyd3JpdHRlbiBpbiBWTUwgZmFsbGJhY2sgbW9kZSBiZWxvdy5cbiAgICAgKi9cbiAgLCBvcGFjaXR5OiBmdW5jdGlvbiAoZWwsIGksIHZhbCkge1xuICAgICAgaWYgKGkgPCBlbC5jaGlsZE5vZGVzLmxlbmd0aCkgZWwuY2hpbGROb2Rlc1tpXS5zdHlsZS5vcGFjaXR5ID0gdmFsXG4gICAgfVxuXG4gIH0pXG5cblxuICBmdW5jdGlvbiBpbml0Vk1MICgpIHtcblxuICAgIC8qIFV0aWxpdHkgZnVuY3Rpb24gdG8gY3JlYXRlIGEgVk1MIHRhZyAqL1xuICAgIGZ1bmN0aW9uIHZtbCAodGFnLCBhdHRyKSB7XG4gICAgICByZXR1cm4gY3JlYXRlRWwoJzwnICsgdGFnICsgJyB4bWxucz1cInVybjpzY2hlbWFzLW1pY3Jvc29mdC5jb206dm1sXCIgY2xhc3M9XCJzcGluLXZtbFwiPicsIGF0dHIpXG4gICAgfVxuXG4gICAgLy8gTm8gQ1NTIHRyYW5zZm9ybXMgYnV0IFZNTCBzdXBwb3J0LCBhZGQgYSBDU1MgcnVsZSBmb3IgVk1MIGVsZW1lbnRzOlxuICAgIHNoZWV0LmFkZFJ1bGUoJy5zcGluLXZtbCcsICdiZWhhdmlvcjp1cmwoI2RlZmF1bHQjVk1MKScpXG5cbiAgICBTcGlubmVyLnByb3RvdHlwZS5saW5lcyA9IGZ1bmN0aW9uIChlbCwgbykge1xuICAgICAgdmFyIHIgPSBvLnNjYWxlICogKG8ubGVuZ3RoICsgby53aWR0aClcbiAgICAgICAgLCBzID0gby5zY2FsZSAqIDIgKiByXG5cbiAgICAgIGZ1bmN0aW9uIGdycCAoKSB7XG4gICAgICAgIHJldHVybiBjc3MoXG4gICAgICAgICAgdm1sKCdncm91cCcsIHtcbiAgICAgICAgICAgIGNvb3Jkc2l6ZTogcyArICcgJyArIHNcbiAgICAgICAgICAsIGNvb3Jkb3JpZ2luOiAtciArICcgJyArIC1yXG4gICAgICAgICAgfSlcbiAgICAgICAgLCB7IHdpZHRoOiBzLCBoZWlnaHQ6IHMgfVxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIHZhciBtYXJnaW4gPSAtKG8ud2lkdGggKyBvLmxlbmd0aCkgKiBvLnNjYWxlICogMiArICdweCdcbiAgICAgICAgLCBnID0gY3NzKGdycCgpLCB7cG9zaXRpb246ICdhYnNvbHV0ZScsIHRvcDogbWFyZ2luLCBsZWZ0OiBtYXJnaW59KVxuICAgICAgICAsIGlcblxuICAgICAgZnVuY3Rpb24gc2VnIChpLCBkeCwgZmlsdGVyKSB7XG4gICAgICAgIGlucyhcbiAgICAgICAgICBnXG4gICAgICAgICwgaW5zKFxuICAgICAgICAgICAgY3NzKGdycCgpLCB7cm90YXRpb246IDM2MCAvIG8ubGluZXMgKiBpICsgJ2RlZycsIGxlZnQ6IH5+ZHh9KVxuICAgICAgICAgICwgaW5zKFxuICAgICAgICAgICAgICBjc3MoXG4gICAgICAgICAgICAgICAgdm1sKCdyb3VuZHJlY3QnLCB7YXJjc2l6ZTogby5jb3JuZXJzfSlcbiAgICAgICAgICAgICAgLCB7IHdpZHRoOiByXG4gICAgICAgICAgICAgICAgLCBoZWlnaHQ6IG8uc2NhbGUgKiBvLndpZHRoXG4gICAgICAgICAgICAgICAgLCBsZWZ0OiBvLnNjYWxlICogby5yYWRpdXNcbiAgICAgICAgICAgICAgICAsIHRvcDogLW8uc2NhbGUgKiBvLndpZHRoID4+IDFcbiAgICAgICAgICAgICAgICAsIGZpbHRlcjogZmlsdGVyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAsIHZtbCgnZmlsbCcsIHtjb2xvcjogZ2V0Q29sb3Ioby5jb2xvciwgaSksIG9wYWNpdHk6IG8ub3BhY2l0eX0pXG4gICAgICAgICAgICAsIHZtbCgnc3Ryb2tlJywge29wYWNpdHk6IDB9KSAvLyB0cmFuc3BhcmVudCBzdHJva2UgdG8gZml4IGNvbG9yIGJsZWVkaW5nIHVwb24gb3BhY2l0eSBjaGFuZ2VcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgaWYgKG8uc2hhZG93KVxuICAgICAgICBmb3IgKGkgPSAxOyBpIDw9IG8ubGluZXM7IGkrKykge1xuICAgICAgICAgIHNlZyhpLCAtMiwgJ3Byb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5CbHVyKHBpeGVscmFkaXVzPTIsbWFrZXNoYWRvdz0xLHNoYWRvd29wYWNpdHk9LjMpJylcbiAgICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAxOyBpIDw9IG8ubGluZXM7IGkrKykgc2VnKGkpXG4gICAgICByZXR1cm4gaW5zKGVsLCBnKVxuICAgIH1cblxuICAgIFNwaW5uZXIucHJvdG90eXBlLm9wYWNpdHkgPSBmdW5jdGlvbiAoZWwsIGksIHZhbCwgbykge1xuICAgICAgdmFyIGMgPSBlbC5maXJzdENoaWxkXG4gICAgICBvID0gby5zaGFkb3cgJiYgby5saW5lcyB8fCAwXG4gICAgICBpZiAoYyAmJiBpICsgbyA8IGMuY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgYyA9IGMuY2hpbGROb2Rlc1tpICsgb107IGMgPSBjICYmIGMuZmlyc3RDaGlsZDsgYyA9IGMgJiYgYy5maXJzdENoaWxkXG4gICAgICAgIGlmIChjKSBjLm9wYWNpdHkgPSB2YWxcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHNoZWV0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBlbCA9IGNyZWF0ZUVsKCdzdHlsZScsIHt0eXBlIDogJ3RleHQvY3NzJ30pXG4gICAgICBpbnMoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXSwgZWwpXG4gICAgICByZXR1cm4gZWwuc2hlZXQgfHwgZWwuc3R5bGVTaGVldFxuICAgIH0oKSlcblxuICAgIHZhciBwcm9iZSA9IGNzcyhjcmVhdGVFbCgnZ3JvdXAnKSwge2JlaGF2aW9yOiAndXJsKCNkZWZhdWx0I1ZNTCknfSlcblxuICAgIGlmICghdmVuZG9yKHByb2JlLCAndHJhbnNmb3JtJykgJiYgcHJvYmUuYWRqKSBpbml0Vk1MKClcbiAgICBlbHNlIHVzZUNzc0FuaW1hdGlvbnMgPSB2ZW5kb3IocHJvYmUsICdhbmltYXRpb24nKVxuICB9XG5cbiAgcmV0dXJuIFNwaW5uZXJcblxufSkpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTEtMjAxNCBGZWxpeCBHbmFzc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vc3Bpbi5qcy5vcmcvXG4gKi9cblxuLypcblxuQmFzaWMgVXNhZ2U6XG49PT09PT09PT09PT1cblxuJCgnI2VsJykuc3BpbigpIC8vIENyZWF0ZXMgYSBkZWZhdWx0IFNwaW5uZXIgdXNpbmcgdGhlIHRleHQgY29sb3Igb2YgI2VsLlxuJCgnI2VsJykuc3Bpbih7IC4uLiB9KSAvLyBDcmVhdGVzIGEgU3Bpbm5lciB1c2luZyB0aGUgcHJvdmlkZWQgb3B0aW9ucy5cblxuJCgnI2VsJykuc3BpbihmYWxzZSkgLy8gU3RvcHMgYW5kIHJlbW92ZXMgdGhlIHNwaW5uZXIuXG5cblVzaW5nIFByZXNldHM6XG49PT09PT09PT09PT09PVxuXG4kKCcjZWwnKS5zcGluKCdzbWFsbCcpIC8vIENyZWF0ZXMgYSAnc21hbGwnIFNwaW5uZXIgdXNpbmcgdGhlIHRleHQgY29sb3Igb2YgI2VsLlxuJCgnI2VsJykuc3BpbignbGFyZ2UnLCAnI2ZmZicpIC8vIENyZWF0ZXMgYSAnbGFyZ2UnIHdoaXRlIFNwaW5uZXIuXG5cbkFkZGluZyBhIGN1c3RvbSBwcmVzZXQ6XG49PT09PT09PT09PT09PT09PT09PT09PVxuXG4kLmZuLnNwaW4ucHJlc2V0cy5mbG93ZXIgPSB7XG4gIGxpbmVzOiAgIDlcbiwgbGVuZ3RoOiAxMFxuLCB3aWR0aDogIDIwXG4sIHJhZGl1czogIDBcbn1cblxuJCgnI2VsJykuc3BpbignZmxvd2VyJywgJ3JlZCcpXG5cbiovXG5cbjsoZnVuY3Rpb24oZmFjdG9yeSkge1xuXG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0Jykge1xuICAgIC8vIENvbW1vbkpTXG4gICAgZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSwgcmVxdWlyZSgnc3Bpbi5qcycpKVxuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gQU1ELCByZWdpc3RlciBhcyBhbm9ueW1vdXMgbW9kdWxlXG4gICAgZGVmaW5lKFsnanF1ZXJ5JywgJ3NwaW4nXSwgZmFjdG9yeSlcbiAgfSBlbHNlIHtcbiAgICAvLyBCcm93c2VyIGdsb2JhbHNcbiAgICBpZiAoIXdpbmRvdy5TcGlubmVyKSB0aHJvdyBuZXcgRXJyb3IoJ1NwaW4uanMgbm90IHByZXNlbnQnKVxuICAgIGZhY3Rvcnkod2luZG93LmpRdWVyeSwgd2luZG93LlNwaW5uZXIpXG4gIH1cblxufShmdW5jdGlvbigkLCBTcGlubmVyKSB7XG5cbiAgJC5mbi5zcGluID0gZnVuY3Rpb24ob3B0cywgY29sb3IpIHtcblxuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG4gICAgICAgICwgZGF0YSA9ICR0aGlzLmRhdGEoKVxuXG4gICAgICBpZiAoZGF0YS5zcGlubmVyKSB7XG4gICAgICAgIGRhdGEuc3Bpbm5lci5zdG9wKClcbiAgICAgICAgZGVsZXRlIGRhdGEuc3Bpbm5lclxuICAgICAgfVxuICAgICAgaWYgKG9wdHMgIT09IGZhbHNlKSB7XG4gICAgICAgIG9wdHMgPSAkLmV4dGVuZChcbiAgICAgICAgICB7IGNvbG9yOiBjb2xvciB8fCAkdGhpcy5jc3MoJ2NvbG9yJykgfVxuICAgICAgICAsICQuZm4uc3Bpbi5wcmVzZXRzW29wdHNdIHx8IG9wdHNcbiAgICAgICAgKVxuICAgICAgICBkYXRhLnNwaW5uZXIgPSBuZXcgU3Bpbm5lcihvcHRzKS5zcGluKHRoaXMpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gICQuZm4uc3Bpbi5wcmVzZXRzID0ge1xuICAgIHRpbnk6ICB7IGxpbmVzOiAgOCwgbGVuZ3RoOiAyLCB3aWR0aDogMiwgcmFkaXVzOiAzIH1cbiAgLCBzbWFsbDogeyBsaW5lczogIDgsIGxlbmd0aDogNCwgd2lkdGg6IDMsIHJhZGl1czogNSB9XG4gICwgbGFyZ2U6IHsgbGluZXM6IDEwLCBsZW5ndGg6IDgsIHdpZHRoOiA0LCByYWRpdXM6IDggfVxuICB9XG5cbn0pKTtcbiIsIi8qKlxuICoganF1ZXJ5Lm1hc2suanNcbiAqIEB2ZXJzaW9uOiB2MS4xNC4xM1xuICogQGF1dGhvcjogSWdvciBFc2NvYmFyXG4gKlxuICogQ3JlYXRlZCBieSBJZ29yIEVzY29iYXIgb24gMjAxMi0wMy0xMC4gUGxlYXNlIHJlcG9ydCBhbnkgYnVnIGF0IGdpdGh1Yi5jb20vaWdvcmVzY29iYXIvalF1ZXJ5LU1hc2stUGx1Z2luXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIElnb3IgRXNjb2JhciBodHRwOi8vaWdvcmVzY29iYXIuY29tXG4gKlxuICogVGhlIE1JVCBMaWNlbnNlIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocClcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICogb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb25cbiAqIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dFxuICogcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsXG4gKiBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlXG4gKiBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZ1xuICogY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICogaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFU1xuICogT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkRcbiAqIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUXG4gKiBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSxcbiAqIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lOR1xuICogRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUlxuICogT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5cbi8qIGpzaGludCBsYXhicmVhazogdHJ1ZSAqL1xuLyoganNoaW50IG1heGNvbXBsZXhpdHk6MTcgKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuLy8gVU1EIChVbml2ZXJzYWwgTW9kdWxlIERlZmluaXRpb24pIHBhdHRlcm5zIGZvciBKYXZhU2NyaXB0IG1vZHVsZXMgdGhhdCB3b3JrIGV2ZXJ5d2hlcmUuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdW1kanMvdW1kL2Jsb2IvbWFzdGVyL3RlbXBsYXRlcy9qcXVlcnlQbHVnaW4uanNcbihmdW5jdGlvbiAoZmFjdG9yeSwgalF1ZXJ5LCBaZXB0bykge1xuXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmYWN0b3J5KGpRdWVyeSB8fCBaZXB0byk7XG4gICAgfVxuXG59KGZ1bmN0aW9uICgkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIE1hc2sgPSBmdW5jdGlvbiAoZWwsIG1hc2ssIG9wdGlvbnMpIHtcblxuICAgICAgICB2YXIgcCA9IHtcbiAgICAgICAgICAgIGludmFsaWQ6IFtdLFxuICAgICAgICAgICAgZ2V0Q2FyZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwgPSBlbC5nZXQoMCksXG4gICAgICAgICAgICAgICAgICAgICAgICBkU2VsID0gZG9jdW1lbnQuc2VsZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgY1NlbFN0YXJ0ID0gY3RybC5zZWxlY3Rpb25TdGFydDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBJRSBTdXBwb3J0XG4gICAgICAgICAgICAgICAgICAgIGlmIChkU2VsICYmIG5hdmlnYXRvci5hcHBWZXJzaW9uLmluZGV4T2YoJ01TSUUgMTAnKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbCA9IGRTZWwuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbC5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIC1wLnZhbCgpLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MgPSBzZWwudGV4dC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gRmlyZWZveCBzdXBwb3J0XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNTZWxTdGFydCB8fCBjU2VsU3RhcnQgPT09ICcwJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zID0gY1NlbFN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvcztcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldENhcmV0OiBmdW5jdGlvbihwb3MpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWwuaXMoJzpmb2N1cycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFuZ2UsIGN0cmwgPSBlbC5nZXQoMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpcmVmb3gsIFdlYktpdCwgZXRjLi5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdHJsLnNldFNlbGVjdGlvblJhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC5zZXRTZWxlY3Rpb25SYW5nZShwb3MsIHBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBJRVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlID0gY3RybC5jcmVhdGVUZXh0UmFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5tb3ZlRW5kKCdjaGFyYWN0ZXInLCBwb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgcG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXZlbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBlbFxuICAgICAgICAgICAgICAgIC5vbigna2V5ZG93bi5tYXNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlbC5kYXRhKCdtYXNrLWtleWNvZGUnLCBlLmtleUNvZGUgfHwgZS53aGljaCk7XG4gICAgICAgICAgICAgICAgICAgIGVsLmRhdGEoJ21hc2stcHJldml1cy12YWx1ZScsIGVsLnZhbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgZWwuZGF0YSgnbWFzay1wcmV2aXVzLWNhcmV0LXBvcycsIHAuZ2V0Q2FyZXQoKSk7XG4gICAgICAgICAgICAgICAgICAgIHAubWFza0RpZ2l0UG9zTWFwT2xkID0gcC5tYXNrRGlnaXRQb3NNYXA7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAub24oJC5qTWFza0dsb2JhbHMudXNlSW5wdXQgPyAnaW5wdXQubWFzaycgOiAna2V5dXAubWFzaycsIHAuYmVoYXZpb3VyKVxuICAgICAgICAgICAgICAgIC5vbigncGFzdGUubWFzayBkcm9wLm1hc2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmtleWRvd24oKS5rZXl1cCgpO1xuICAgICAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm9uKCdjaGFuZ2UubWFzaycsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGVsLmRhdGEoJ2NoYW5nZWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5vbignYmx1ci5tYXNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBwLnZhbCgpICYmICFlbC5kYXRhKCdjaGFuZ2VkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsLmRhdGEoJ2NoYW5nZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAvLyBpdCdzIHZlcnkgaW1wb3J0YW50IHRoYXQgdGhpcyBjYWxsYmFjayByZW1haW5zIGluIHRoaXMgcG9zaXRpb25cbiAgICAgICAgICAgICAgICAvLyBvdGhlcndoaXNlIG9sZFZhbHVlIGl0J3MgZ29pbmcgdG8gd29yayBidWdneVxuICAgICAgICAgICAgICAgIC5vbignYmx1ci5tYXNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gcC52YWwoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC8vIHNlbGVjdCBhbGwgdGV4dCBvbiBmb2N1c1xuICAgICAgICAgICAgICAgIC5vbignZm9jdXMubWFzaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNlbGVjdE9uRm9jdXMgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoZS50YXJnZXQpLnNlbGVjdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAvLyBjbGVhciB0aGUgdmFsdWUgaWYgaXQgbm90IGNvbXBsZXRlIHRoZSBtYXNrXG4gICAgICAgICAgICAgICAgLm9uKCdmb2N1c291dC5tYXNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmNsZWFySWZOb3RNYXRjaCAmJiAhcmVnZXhNYXNrLnRlc3QocC52YWwoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgcC52YWwoJycpO1xuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRSZWdleE1hc2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBtYXNrQ2h1bmtzID0gW10sIHRyYW5zbGF0aW9uLCBwYXR0ZXJuLCBvcHRpb25hbCwgcmVjdXJzaXZlLCBvUmVjdXJzaXZlLCByO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uID0gak1hc2sudHJhbnNsYXRpb25bbWFzay5jaGFyQXQoaSldO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2xhdGlvbikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuID0gdHJhbnNsYXRpb24ucGF0dGVybi50b1N0cmluZygpLnJlcGxhY2UoLy57MX0kfF4uezF9L2csICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsID0gdHJhbnNsYXRpb24ub3B0aW9uYWw7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWN1cnNpdmUgPSB0cmFuc2xhdGlvbi5yZWN1cnNpdmU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWN1cnNpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrQ2h1bmtzLnB1c2gobWFzay5jaGFyQXQoaSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9SZWN1cnNpdmUgPSB7ZGlnaXQ6IG1hc2suY2hhckF0KGkpLCBwYXR0ZXJuOiBwYXR0ZXJufTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0NodW5rcy5wdXNoKCFvcHRpb25hbCAmJiAhcmVjdXJzaXZlID8gcGF0dGVybiA6IChwYXR0ZXJuICsgJz8nKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tDaHVua3MucHVzaChtYXNrLmNoYXJBdChpKS5yZXBsYWNlKC9bLVxcL1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByID0gbWFza0NodW5rcy5qb2luKCcnKTtcblxuICAgICAgICAgICAgICAgIGlmIChvUmVjdXJzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHIgPSByLnJlcGxhY2UobmV3IFJlZ0V4cCgnKCcgKyBvUmVjdXJzaXZlLmRpZ2l0ICsgJyguKicgKyBvUmVjdXJzaXZlLmRpZ2l0ICsgJyk/KScpLCAnKCQxKT8nKVxuICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKG5ldyBSZWdFeHAob1JlY3Vyc2l2ZS5kaWdpdCwgJ2cnKSwgb1JlY3Vyc2l2ZS5wYXR0ZXJuKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChyKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXN0cm95RXZlbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBlbC5vZmYoWydpbnB1dCcsICdrZXlkb3duJywgJ2tleXVwJywgJ3Bhc3RlJywgJ2Ryb3AnLCAnYmx1cicsICdmb2N1c291dCcsICcnXS5qb2luKCcubWFzayAnKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmFsOiBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgICAgICAgdmFyIGlzSW5wdXQgPSBlbC5pcygnaW5wdXQnKSxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kID0gaXNJbnB1dCA/ICd2YWwnIDogJ3RleHQnLFxuICAgICAgICAgICAgICAgICAgICByO1xuXG4gICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbFttZXRob2RdKCkgIT09IHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsW21ldGhvZF0odik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgciA9IGVsO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHIgPSBlbFttZXRob2RdKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2FsY3VsYXRlQ2FyZXRQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9sZFZhbCA9IGVsLmRhdGEoJ21hc2stcHJldml1cy12YWx1ZScpIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICBuZXdWYWwgPSBwLmdldE1hc2tlZCgpLFxuICAgICAgICAgICAgICAgICAgICBjYXJldFBvc05ldyA9IHAuZ2V0Q2FyZXQoKTtcbiAgICAgICAgICAgICAgICBpZiAob2xkVmFsICE9PSBuZXdWYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zT2xkID0gZWwuZGF0YSgnbWFzay1wcmV2aXVzLWNhcmV0LXBvcycpIHx8IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWxMID0gbmV3VmFsLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbEwgPSBvbGRWYWwubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0c0JlZm9yZUNhcmV0ID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdHNBZnRlckNhcmV0ID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGxPbGQgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gY2FyZXRQb3NOZXc7IGkgPCBuZXdWYWxMOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcC5tYXNrRGlnaXRQb3NNYXBbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdHNBZnRlckNhcmV0Kys7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBjYXJldFBvc05ldyAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXAubWFza0RpZ2l0UG9zTWFwW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRzQmVmb3JlQ2FyZXQrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGNhcmV0UG9zTmV3IC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwLm1hc2tEaWdpdFBvc01hcFtpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gY2FyZXRQb3NPbGQgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHAubWFza0RpZ2l0UG9zTWFwT2xkW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0c0JlZm9yZUNhcmV0QWxsT2xkKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgY3Vyc29yIGlzIGF0IHRoZSBlbmQga2VlcCBpdCB0aGVyZVxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FyZXRQb3NOZXcgPiBvbGRWYWxMKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3NOZXcgPSBuZXdWYWxMICogMTA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2FyZXRQb3NPbGQgPj0gY2FyZXRQb3NOZXcgJiYgY2FyZXRQb3NPbGQgIT09IG9sZFZhbEwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcC5tYXNrRGlnaXRQb3NNYXBPbGRbY2FyZXRQb3NOZXddKSAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FyZXRQb3MgPSBjYXJldFBvc05ldztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3NOZXcgLT0gbWFza0RpZ2l0c0JlZm9yZUNhcmV0QWxsT2xkIC0gbWFza0RpZ2l0c0JlZm9yZUNhcmV0QWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvc05ldyAtPSBtYXNrRGlnaXRzQmVmb3JlQ2FyZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwLm1hc2tEaWdpdFBvc01hcFtjYXJldFBvc05ld10pICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3NOZXcgPSBjYXJldFBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNhcmV0UG9zTmV3ID4gY2FyZXRQb3NPbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zTmV3ICs9IG1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbCAtIG1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbE9sZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zTmV3ICs9IG1hc2tEaWdpdHNBZnRlckNhcmV0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjYXJldFBvc05ldztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBiZWhhdmlvdXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XG4gICAgICAgICAgICAgICAgcC5pbnZhbGlkID0gW107XG5cbiAgICAgICAgICAgICAgICB2YXIga2V5Q29kZSA9IGVsLmRhdGEoJ21hc2sta2V5Y29kZScpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCQuaW5BcnJheShrZXlDb2RlLCBqTWFzay5ieVBhc3NLZXlzKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1ZhbCAgID0gcC5nZXRNYXNrZWQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zID0gcC5nZXRDYXJldCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgYSBjb21wZW5zYXRpb24gdG8gZGV2aWNlcy9icm93c2VycyB0aGF0IGRvbid0IGNvbXBlbnNhdGVcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FyZXQgcG9zaXRpb25pbmcgdGhlIHJpZ2h0IHdheVxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgIHAuc2V0Q2FyZXQocC5jYWxjdWxhdGVDYXJldFBvc2l0aW9uKCkpO1xuICAgICAgICAgICAgICAgICAgICB9LCAxMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcC52YWwobmV3VmFsKTtcbiAgICAgICAgICAgICAgICAgICAgcC5zZXRDYXJldChjYXJldFBvcyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwLmNhbGxiYWNrcyhlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0TWFza2VkOiBmdW5jdGlvbihza2lwTWFza0NoYXJzLCB2YWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgYnVmID0gW10sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsID09PSB1bmRlZmluZWQgPyBwLnZhbCgpIDogdmFsICsgJycsXG4gICAgICAgICAgICAgICAgICAgIG0gPSAwLCBtYXNrTGVuID0gbWFzay5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIHYgPSAwLCB2YWxMZW4gPSB2YWx1ZS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDEsIGFkZE1ldGhvZCA9ICdwdXNoJyxcbiAgICAgICAgICAgICAgICAgICAgcmVzZXRQb3MgPSAtMSxcbiAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0Q291bnQgPSAwLFxuICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRQb3NBcnIgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgbGFzdE1hc2tDaGFyLFxuICAgICAgICAgICAgICAgICAgICBjaGVjaztcblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkTWV0aG9kID0gJ3Vuc2hpZnQnO1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgbGFzdE1hc2tDaGFyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgbSA9IG1hc2tMZW4gLSAxO1xuICAgICAgICAgICAgICAgICAgICB2ID0gdmFsTGVuIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbSA+IC0xICYmIHYgPiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsYXN0TWFza0NoYXIgPSBtYXNrTGVuIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbSA8IG1hc2tMZW4gJiYgdiA8IHZhbExlbjtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgbGFzdFVudHJhbnNsYXRlZE1hc2tDaGFyO1xuICAgICAgICAgICAgICAgIHdoaWxlIChjaGVjaygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXNrRGlnaXQgPSBtYXNrLmNoYXJBdChtKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbERpZ2l0ID0gdmFsdWUuY2hhckF0KHYpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb24gPSBqTWFzay50cmFuc2xhdGlvblttYXNrRGlnaXRdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2xhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbERpZ2l0Lm1hdGNoKHRyYW5zbGF0aW9uLnBhdHRlcm4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmW2FkZE1ldGhvZF0odmFsRGlnaXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNsYXRpb24ucmVjdXJzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNldFBvcyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0UG9zID0gbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtID09PSBsYXN0TWFza0NoYXIgJiYgbSAhPT0gcmVzZXRQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSByZXNldFBvcyAtIG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0TWFza0NoYXIgPT09IHJlc2V0UG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtIC09IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtICs9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsRGlnaXQgPT09IGxhc3RVbnRyYW5zbGF0ZWRNYXNrQ2hhcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hdGNoZWQgdGhlIGxhc3QgdW50cmFuc2xhdGVkIChyYXcpIG1hc2sgY2hhcmFjdGVyIHRoYXQgd2UgZW5jb3VudGVyZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaWtlbHkgYW4gaW5zZXJ0IG9mZnNldCB0aGUgbWFzayBjaGFyYWN0ZXIgZnJvbSB0aGUgbGFzdCBlbnRyeTsgZmFsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRocm91Z2ggYW5kIG9ubHkgaW5jcmVtZW50IHZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRDb3VudC0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RVbnRyYW5zbGF0ZWRNYXNrQ2hhciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRpb24ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtICs9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2IC09IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRpb24uZmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZbYWRkTWV0aG9kXSh0cmFuc2xhdGlvbi5mYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSArPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdiAtPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwLmludmFsaWQucHVzaCh7cDogdiwgdjogdmFsRGlnaXQsIGU6IHRyYW5zbGF0aW9uLnBhdHRlcm59KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHYgKz0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFza2lwTWFza0NoYXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmW2FkZE1ldGhvZF0obWFza0RpZ2l0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbERpZ2l0ID09PSBtYXNrRGlnaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRQb3NBcnIucHVzaCh2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ICs9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFVudHJhbnNsYXRlZE1hc2tDaGFyID0gbWFza0RpZ2l0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdFBvc0Fyci5wdXNoKHYgKyBtYXNrRGlnaXRDb3VudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0Q291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbSArPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgbGFzdE1hc2tDaGFyRGlnaXQgPSBtYXNrLmNoYXJBdChsYXN0TWFza0NoYXIpO1xuICAgICAgICAgICAgICAgIGlmIChtYXNrTGVuID09PSB2YWxMZW4gKyAxICYmICFqTWFzay50cmFuc2xhdGlvbltsYXN0TWFza0NoYXJEaWdpdF0pIHtcbiAgICAgICAgICAgICAgICAgICAgYnVmLnB1c2gobGFzdE1hc2tDaGFyRGlnaXQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBuZXdWYWwgPSBidWYuam9pbignJyk7XG4gICAgICAgICAgICAgICAgcC5tYXBNYXNrZGlnaXRQb3NpdGlvbnMobmV3VmFsLCBtYXNrRGlnaXRQb3NBcnIsIHZhbExlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld1ZhbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXBNYXNrZGlnaXRQb3NpdGlvbnM6IGZ1bmN0aW9uKG5ld1ZhbCwgbWFza0RpZ2l0UG9zQXJyLCB2YWxMZW4pIHtcbiAgICAgICAgICAgICAgdmFyIG1hc2tEaWZmID0gb3B0aW9ucy5yZXZlcnNlID8gbmV3VmFsLmxlbmd0aCAtIHZhbExlbiA6IDA7XG4gICAgICAgICAgICAgIHAubWFza0RpZ2l0UG9zTWFwID0ge307XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFza0RpZ2l0UG9zQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcC5tYXNrRGlnaXRQb3NNYXBbbWFza0RpZ2l0UG9zQXJyW2ldICsgbWFza0RpZmZdID0gMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhbGxiYWNrczogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gcC52YWwoKSxcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlZCA9IHZhbCAhPT0gb2xkVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRBcmdzID0gW3ZhbCwgZSwgZWwsIG9wdGlvbnNdLFxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uKG5hbWUsIGNyaXRlcmlhLCBhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnNbbmFtZV0gPT09ICdmdW5jdGlvbicgJiYgY3JpdGVyaWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zW25hbWVdLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soJ29uQ2hhbmdlJywgY2hhbmdlZCA9PT0gdHJ1ZSwgZGVmYXVsdEFyZ3MpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCdvbktleVByZXNzJywgY2hhbmdlZCA9PT0gdHJ1ZSwgZGVmYXVsdEFyZ3MpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCdvbkNvbXBsZXRlJywgdmFsLmxlbmd0aCA9PT0gbWFzay5sZW5ndGgsIGRlZmF1bHRBcmdzKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygnb25JbnZhbGlkJywgcC5pbnZhbGlkLmxlbmd0aCA+IDAsIFt2YWwsIGUsIGVsLCBwLmludmFsaWQsIG9wdGlvbnNdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBlbCA9ICQoZWwpO1xuICAgICAgICB2YXIgak1hc2sgPSB0aGlzLCBvbGRWYWx1ZSA9IHAudmFsKCksIHJlZ2V4TWFzaztcblxuICAgICAgICBtYXNrID0gdHlwZW9mIG1hc2sgPT09ICdmdW5jdGlvbicgPyBtYXNrKHAudmFsKCksIHVuZGVmaW5lZCwgZWwsICBvcHRpb25zKSA6IG1hc2s7XG5cbiAgICAgICAgLy8gcHVibGljIG1ldGhvZHNcbiAgICAgICAgak1hc2subWFzayA9IG1hc2s7XG4gICAgICAgIGpNYXNrLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBqTWFzay5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjYXJldCA9IHAuZ2V0Q2FyZXQoKTtcbiAgICAgICAgICAgIHAuZGVzdHJveUV2ZW50cygpO1xuICAgICAgICAgICAgcC52YWwoak1hc2suZ2V0Q2xlYW5WYWwoKSk7XG4gICAgICAgICAgICBwLnNldENhcmV0KGNhcmV0KTtcbiAgICAgICAgICAgIHJldHVybiBlbDtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBnZXQgdmFsdWUgd2l0aG91dCBtYXNrXG4gICAgICAgIGpNYXNrLmdldENsZWFuVmFsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIHJldHVybiBwLmdldE1hc2tlZCh0cnVlKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBnZXQgbWFza2VkIHZhbHVlIHdpdGhvdXQgdGhlIHZhbHVlIGJlaW5nIGluIHRoZSBpbnB1dCBvciBlbGVtZW50XG4gICAgICAgIGpNYXNrLmdldE1hc2tlZFZhbCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICByZXR1cm4gcC5nZXRNYXNrZWQoZmFsc2UsIHZhbCk7XG4gICAgICAgIH07XG5cbiAgICAgICBqTWFzay5pbml0ID0gZnVuY3Rpb24ob25seU1hc2spIHtcbiAgICAgICAgICAgIG9ubHlNYXNrID0gb25seU1hc2sgfHwgZmFsc2U7XG4gICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICAgICAgak1hc2suY2xlYXJJZk5vdE1hdGNoICA9ICQuak1hc2tHbG9iYWxzLmNsZWFySWZOb3RNYXRjaDtcbiAgICAgICAgICAgIGpNYXNrLmJ5UGFzc0tleXMgICAgICAgPSAkLmpNYXNrR2xvYmFscy5ieVBhc3NLZXlzO1xuICAgICAgICAgICAgak1hc2sudHJhbnNsYXRpb24gICAgICA9ICQuZXh0ZW5kKHt9LCAkLmpNYXNrR2xvYmFscy50cmFuc2xhdGlvbiwgb3B0aW9ucy50cmFuc2xhdGlvbik7XG5cbiAgICAgICAgICAgIGpNYXNrID0gJC5leHRlbmQodHJ1ZSwge30sIGpNYXNrLCBvcHRpb25zKTtcblxuICAgICAgICAgICAgcmVnZXhNYXNrID0gcC5nZXRSZWdleE1hc2soKTtcblxuICAgICAgICAgICAgaWYgKG9ubHlNYXNrKSB7XG4gICAgICAgICAgICAgICAgcC5ldmVudHMoKTtcbiAgICAgICAgICAgICAgICBwLnZhbChwLmdldE1hc2tlZCgpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuYXR0cigncGxhY2Vob2xkZXInICwgb3B0aW9ucy5wbGFjZWhvbGRlcik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnksIG90aGVyd2lzZSBpZiB0aGUgdXNlciBzdWJtaXQgdGhlIGZvcm1cbiAgICAgICAgICAgICAgICAvLyBhbmQgdGhlbiBwcmVzcyB0aGUgXCJiYWNrXCIgYnV0dG9uLCB0aGUgYXV0b2NvbXBsZXRlIHdpbGwgZXJhc2VcbiAgICAgICAgICAgICAgICAvLyB0aGUgZGF0YS4gV29ya3MgZmluZSBvbiBJRTkrLCBGRiwgT3BlcmEsIFNhZmFyaS5cbiAgICAgICAgICAgICAgICBpZiAoZWwuZGF0YSgnbWFzaycpKSB7XG4gICAgICAgICAgICAgICAgICBlbC5hdHRyKCdhdXRvY29tcGxldGUnLCAnb2ZmJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gZGV0ZWN0IGlmIGlzIG5lY2Vzc2FyeSBsZXQgdGhlIHVzZXIgdHlwZSBmcmVlbHkuXG4gICAgICAgICAgICAgICAgLy8gZm9yIGlzIGEgbG90IGZhc3RlciB0aGFuIGZvckVhY2guXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG1heGxlbmd0aCA9IHRydWU7IGkgPCBtYXNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2xhdGlvbiA9IGpNYXNrLnRyYW5zbGF0aW9uW21hc2suY2hhckF0KGkpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zbGF0aW9uICYmIHRyYW5zbGF0aW9uLnJlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4bGVuZ3RoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChtYXhsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuYXR0cignbWF4bGVuZ3RoJywgbWFzay5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHAuZGVzdHJveUV2ZW50cygpO1xuICAgICAgICAgICAgICAgIHAuZXZlbnRzKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgY2FyZXQgPSBwLmdldENhcmV0KCk7XG4gICAgICAgICAgICAgICAgcC52YWwocC5nZXRNYXNrZWQoKSk7XG4gICAgICAgICAgICAgICAgcC5zZXRDYXJldChjYXJldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgak1hc2suaW5pdCghZWwuaXMoJ2lucHV0JykpO1xuICAgIH07XG5cbiAgICAkLm1hc2tXYXRjaGVycyA9IHt9O1xuICAgIHZhciBIVE1MQXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gJCh0aGlzKSxcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fSxcbiAgICAgICAgICAgIHByZWZpeCA9ICdkYXRhLW1hc2stJyxcbiAgICAgICAgICAgIG1hc2sgPSBpbnB1dC5hdHRyKCdkYXRhLW1hc2snKTtcblxuICAgICAgICBpZiAoaW5wdXQuYXR0cihwcmVmaXggKyAncmV2ZXJzZScpKSB7XG4gICAgICAgICAgICBvcHRpb25zLnJldmVyc2UgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlucHV0LmF0dHIocHJlZml4ICsgJ2NsZWFyaWZub3RtYXRjaCcpKSB7XG4gICAgICAgICAgICBvcHRpb25zLmNsZWFySWZOb3RNYXRjaCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5wdXQuYXR0cihwcmVmaXggKyAnc2VsZWN0b25mb2N1cycpID09PSAndHJ1ZScpIHtcbiAgICAgICAgICAgb3B0aW9ucy5zZWxlY3RPbkZvY3VzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChub3RTYW1lTWFza09iamVjdChpbnB1dCwgbWFzaywgb3B0aW9ucykpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5kYXRhKCdtYXNrJywgbmV3IE1hc2sodGhpcywgbWFzaywgb3B0aW9ucykpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBub3RTYW1lTWFza09iamVjdCA9IGZ1bmN0aW9uKGZpZWxkLCBtYXNrLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB2YXIgbWFza09iamVjdCA9ICQoZmllbGQpLmRhdGEoJ21hc2snKSxcbiAgICAgICAgICAgIHN0cmluZ2lmeSA9IEpTT04uc3RyaW5naWZ5LFxuICAgICAgICAgICAgdmFsdWUgPSAkKGZpZWxkKS52YWwoKSB8fCAkKGZpZWxkKS50ZXh0KCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG1hc2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBtYXNrID0gbWFzayh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIG1hc2tPYmplY3QgIT09ICdvYmplY3QnIHx8IHN0cmluZ2lmeShtYXNrT2JqZWN0Lm9wdGlvbnMpICE9PSBzdHJpbmdpZnkob3B0aW9ucykgfHwgbWFza09iamVjdC5tYXNrICE9PSBtYXNrO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH0sXG4gICAgZXZlbnRTdXBwb3J0ZWQgPSBmdW5jdGlvbihldmVudE5hbWUpIHtcbiAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksIGlzU3VwcG9ydGVkO1xuXG4gICAgICAgIGV2ZW50TmFtZSA9ICdvbicgKyBldmVudE5hbWU7XG4gICAgICAgIGlzU3VwcG9ydGVkID0gKGV2ZW50TmFtZSBpbiBlbCk7XG5cbiAgICAgICAgaWYgKCAhaXNTdXBwb3J0ZWQgKSB7XG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoZXZlbnROYW1lLCAncmV0dXJuOycpO1xuICAgICAgICAgICAgaXNTdXBwb3J0ZWQgPSB0eXBlb2YgZWxbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgfVxuICAgICAgICBlbCA9IG51bGw7XG5cbiAgICAgICAgcmV0dXJuIGlzU3VwcG9ydGVkO1xuICAgIH07XG5cbiAgICAkLmZuLm1hc2sgPSBmdW5jdGlvbihtYXNrLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yLFxuICAgICAgICAgICAgZ2xvYmFscyA9ICQuak1hc2tHbG9iYWxzLFxuICAgICAgICAgICAgaW50ZXJ2YWwgPSBnbG9iYWxzLndhdGNoSW50ZXJ2YWwsXG4gICAgICAgICAgICB3YXRjaElucHV0cyA9IG9wdGlvbnMud2F0Y2hJbnB1dHMgfHwgZ2xvYmFscy53YXRjaElucHV0cyxcbiAgICAgICAgICAgIG1hc2tGdW5jdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmIChub3RTYW1lTWFza09iamVjdCh0aGlzLCBtYXNrLCBvcHRpb25zKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCh0aGlzKS5kYXRhKCdtYXNrJywgbmV3IE1hc2sodGhpcywgbWFzaywgb3B0aW9ucykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgJCh0aGlzKS5lYWNoKG1hc2tGdW5jdGlvbik7XG5cbiAgICAgICAgaWYgKHNlbGVjdG9yICYmIHNlbGVjdG9yICE9PSAnJyAmJiB3YXRjaElucHV0cykge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCgkLm1hc2tXYXRjaGVyc1tzZWxlY3Rvcl0pO1xuICAgICAgICAgICAgJC5tYXNrV2F0Y2hlcnNbc2VsZWN0b3JdID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5maW5kKHNlbGVjdG9yKS5lYWNoKG1hc2tGdW5jdGlvbik7XG4gICAgICAgICAgICB9LCBpbnRlcnZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgICQuZm4ubWFza2VkID0gZnVuY3Rpb24odmFsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEoJ21hc2snKS5nZXRNYXNrZWRWYWwodmFsKTtcbiAgICB9O1xuXG4gICAgJC5mbi51bm1hc2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCgkLm1hc2tXYXRjaGVyc1t0aGlzLnNlbGVjdG9yXSk7XG4gICAgICAgIGRlbGV0ZSAkLm1hc2tXYXRjaGVyc1t0aGlzLnNlbGVjdG9yXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkYXRhTWFzayA9ICQodGhpcykuZGF0YSgnbWFzaycpO1xuICAgICAgICAgICAgaWYgKGRhdGFNYXNrKSB7XG4gICAgICAgICAgICAgICAgZGF0YU1hc2sucmVtb3ZlKCkucmVtb3ZlRGF0YSgnbWFzaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJC5mbi5jbGVhblZhbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhKCdtYXNrJykuZ2V0Q2xlYW5WYWwoKTtcbiAgICB9O1xuXG4gICAgJC5hcHBseURhdGFNYXNrID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciB8fCAkLmpNYXNrR2xvYmFscy5tYXNrRWxlbWVudHM7XG4gICAgICAgIHZhciAkc2VsZWN0b3IgPSAoc2VsZWN0b3IgaW5zdGFuY2VvZiAkKSA/IHNlbGVjdG9yIDogJChzZWxlY3Rvcik7XG4gICAgICAgICRzZWxlY3Rvci5maWx0ZXIoJC5qTWFza0dsb2JhbHMuZGF0YU1hc2tBdHRyKS5lYWNoKEhUTUxBdHRyaWJ1dGVzKTtcbiAgICB9O1xuXG4gICAgdmFyIGdsb2JhbHMgPSB7XG4gICAgICAgIG1hc2tFbGVtZW50czogJ2lucHV0LHRkLHNwYW4sZGl2JyxcbiAgICAgICAgZGF0YU1hc2tBdHRyOiAnKltkYXRhLW1hc2tdJyxcbiAgICAgICAgZGF0YU1hc2s6IHRydWUsXG4gICAgICAgIHdhdGNoSW50ZXJ2YWw6IDMwMCxcbiAgICAgICAgd2F0Y2hJbnB1dHM6IHRydWUsXG4gICAgICAgIC8vIG9sZCB2ZXJzaW9ucyBvZiBjaHJvbWUgZG9udCB3b3JrIGdyZWF0IHdpdGggaW5wdXQgZXZlbnRcbiAgICAgICAgdXNlSW5wdXQ6ICEvQ2hyb21lXFwvWzItNF1bMC05XXxTYW1zdW5nQnJvd3Nlci8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgZXZlbnRTdXBwb3J0ZWQoJ2lucHV0JyksXG4gICAgICAgIHdhdGNoRGF0YU1hc2s6IGZhbHNlLFxuICAgICAgICBieVBhc3NLZXlzOiBbOSwgMTYsIDE3LCAxOCwgMzYsIDM3LCAzOCwgMzksIDQwLCA5MV0sXG4gICAgICAgIHRyYW5zbGF0aW9uOiB7XG4gICAgICAgICAgICAnMCc6IHtwYXR0ZXJuOiAvXFxkL30sXG4gICAgICAgICAgICAnOSc6IHtwYXR0ZXJuOiAvXFxkLywgb3B0aW9uYWw6IHRydWV9LFxuICAgICAgICAgICAgJyMnOiB7cGF0dGVybjogL1xcZC8sIHJlY3Vyc2l2ZTogdHJ1ZX0sXG4gICAgICAgICAgICAnQSc6IHtwYXR0ZXJuOiAvW2EtekEtWjAtOV0vfSxcbiAgICAgICAgICAgICdTJzoge3BhdHRlcm46IC9bYS16QS1aXS99XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgJC5qTWFza0dsb2JhbHMgPSAkLmpNYXNrR2xvYmFscyB8fCB7fTtcbiAgICBnbG9iYWxzID0gJC5qTWFza0dsb2JhbHMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgZ2xvYmFscywgJC5qTWFza0dsb2JhbHMpO1xuXG4gICAgLy8gbG9va2luZyBmb3IgaW5wdXRzIHdpdGggZGF0YS1tYXNrIGF0dHJpYnV0ZVxuICAgIGlmIChnbG9iYWxzLmRhdGFNYXNrKSB7XG4gICAgICAgICQuYXBwbHlEYXRhTWFzaygpO1xuICAgIH1cblxuICAgIHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoJC5qTWFza0dsb2JhbHMud2F0Y2hEYXRhTWFzaykge1xuICAgICAgICAgICAgJC5hcHBseURhdGFNYXNrKCk7XG4gICAgICAgIH1cbiAgICB9LCBnbG9iYWxzLndhdGNoSW50ZXJ2YWwpO1xufSwgd2luZG93LmpRdWVyeSwgd2luZG93LlplcHRvKSk7XG4iLCIvKlxuICAgICBfIF8gICAgICBfICAgICAgIF9cbiBfX198IChfKSBfX198IHwgX18gIChfKV9fX1xuLyBfX3wgfCB8LyBfX3wgfC8gLyAgfCAvIF9ffFxuXFxfXyBcXCB8IHwgKF9ffCAgIDwgXyB8IFxcX18gXFxcbnxfX18vX3xffFxcX19ffF98XFxfKF8pLyB8X19fL1xuICAgICAgICAgICAgICAgICAgIHxfXy9cblxuIFZlcnNpb246IDEuOC4xXG4gIEF1dGhvcjogS2VuIFdoZWVsZXJcbiBXZWJzaXRlOiBodHRwOi8va2Vud2hlZWxlci5naXRodWIuaW9cbiAgICBEb2NzOiBodHRwOi8va2Vud2hlZWxlci5naXRodWIuaW8vc2xpY2tcbiAgICBSZXBvOiBodHRwOi8vZ2l0aHViLmNvbS9rZW53aGVlbGVyL3NsaWNrXG4gIElzc3VlczogaHR0cDovL2dpdGh1Yi5jb20va2Vud2hlZWxlci9zbGljay9pc3N1ZXNcblxuICovXG4vKiBnbG9iYWwgd2luZG93LCBkb2N1bWVudCwgZGVmaW5lLCBqUXVlcnksIHNldEludGVydmFsLCBjbGVhckludGVydmFsICovXG47KGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmYWN0b3J5KGpRdWVyeSk7XG4gICAgfVxuXG59KGZ1bmN0aW9uKCQpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIFNsaWNrID0gd2luZG93LlNsaWNrIHx8IHt9O1xuXG4gICAgU2xpY2sgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIGluc3RhbmNlVWlkID0gMDtcblxuICAgICAgICBmdW5jdGlvbiBTbGljayhlbGVtZW50LCBzZXR0aW5ncykge1xuXG4gICAgICAgICAgICB2YXIgXyA9IHRoaXMsIGRhdGFTZXR0aW5ncztcblxuICAgICAgICAgICAgXy5kZWZhdWx0cyA9IHtcbiAgICAgICAgICAgICAgICBhY2Nlc3NpYmlsaXR5OiB0cnVlLFxuICAgICAgICAgICAgICAgIGFkYXB0aXZlSGVpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhcHBlbmRBcnJvd3M6ICQoZWxlbWVudCksXG4gICAgICAgICAgICAgICAgYXBwZW5kRG90czogJChlbGVtZW50KSxcbiAgICAgICAgICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgICAgICAgICAgYXNOYXZGb3I6IG51bGwsXG4gICAgICAgICAgICAgICAgcHJldkFycm93OiAnPGJ1dHRvbiBjbGFzcz1cInNsaWNrLXByZXZcIiBhcmlhLWxhYmVsPVwiUHJldmlvdXNcIiB0eXBlPVwiYnV0dG9uXCI+UHJldmlvdXM8L2J1dHRvbj4nLFxuICAgICAgICAgICAgICAgIG5leHRBcnJvdzogJzxidXR0b24gY2xhc3M9XCJzbGljay1uZXh0XCIgYXJpYS1sYWJlbD1cIk5leHRcIiB0eXBlPVwiYnV0dG9uXCI+TmV4dDwvYnV0dG9uPicsXG4gICAgICAgICAgICAgICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGF1dG9wbGF5U3BlZWQ6IDMwMDAsXG4gICAgICAgICAgICAgICAgY2VudGVyTW9kZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgY2VudGVyUGFkZGluZzogJzUwcHgnLFxuICAgICAgICAgICAgICAgIGNzc0Vhc2U6ICdlYXNlJyxcbiAgICAgICAgICAgICAgICBjdXN0b21QYWdpbmc6IGZ1bmN0aW9uKHNsaWRlciwgaSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgLz4nKS50ZXh0KGkgKyAxKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRvdHNDbGFzczogJ3NsaWNrLWRvdHMnLFxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlYXNpbmc6ICdsaW5lYXInLFxuICAgICAgICAgICAgICAgIGVkZ2VGcmljdGlvbjogMC4zNSxcbiAgICAgICAgICAgICAgICBmYWRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBmb2N1c09uU2VsZWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBmb2N1c09uQ2hhbmdlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpbml0aWFsU2xpZGU6IDAsXG4gICAgICAgICAgICAgICAgbGF6eUxvYWQ6ICdvbmRlbWFuZCcsXG4gICAgICAgICAgICAgICAgbW9iaWxlRmlyc3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHBhdXNlT25Ib3ZlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXVzZU9uRm9jdXM6IHRydWUsXG4gICAgICAgICAgICAgICAgcGF1c2VPbkRvdHNIb3ZlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVzcG9uZFRvOiAnd2luZG93JyxcbiAgICAgICAgICAgICAgICByZXNwb25zaXZlOiBudWxsLFxuICAgICAgICAgICAgICAgIHJvd3M6IDEsXG4gICAgICAgICAgICAgICAgcnRsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzbGlkZTogJycsXG4gICAgICAgICAgICAgICAgc2xpZGVzUGVyUm93OiAxLFxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgICAgICAgICAgICBzcGVlZDogNTAwLFxuICAgICAgICAgICAgICAgIHN3aXBlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHN3aXBlVG9TbGlkZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgdG91Y2hNb3ZlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRvdWNoVGhyZXNob2xkOiA1LFxuICAgICAgICAgICAgICAgIHVzZUNTUzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB1c2VUcmFuc2Zvcm06IHRydWUsXG4gICAgICAgICAgICAgICAgdmFyaWFibGVXaWR0aDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmVydGljYWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHZlcnRpY2FsU3dpcGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgd2FpdEZvckFuaW1hdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgekluZGV4OiAxMDAwXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBfLmluaXRpYWxzID0ge1xuICAgICAgICAgICAgICAgIGFuaW1hdGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgZHJhZ2dpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGF1dG9QbGF5VGltZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgY3VycmVudERpcmVjdGlvbjogMCxcbiAgICAgICAgICAgICAgICBjdXJyZW50TGVmdDogbnVsbCxcbiAgICAgICAgICAgICAgICBjdXJyZW50U2xpZGU6IDAsXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAxLFxuICAgICAgICAgICAgICAgICRkb3RzOiBudWxsLFxuICAgICAgICAgICAgICAgIGxpc3RXaWR0aDogbnVsbCxcbiAgICAgICAgICAgICAgICBsaXN0SGVpZ2h0OiBudWxsLFxuICAgICAgICAgICAgICAgIGxvYWRJbmRleDogMCxcbiAgICAgICAgICAgICAgICAkbmV4dEFycm93OiBudWxsLFxuICAgICAgICAgICAgICAgICRwcmV2QXJyb3c6IG51bGwsXG4gICAgICAgICAgICAgICAgc2Nyb2xsaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzbGlkZUNvdW50OiBudWxsLFxuICAgICAgICAgICAgICAgIHNsaWRlV2lkdGg6IG51bGwsXG4gICAgICAgICAgICAgICAgJHNsaWRlVHJhY2s6IG51bGwsXG4gICAgICAgICAgICAgICAgJHNsaWRlczogbnVsbCxcbiAgICAgICAgICAgICAgICBzbGlkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldDogMCxcbiAgICAgICAgICAgICAgICBzd2lwZUxlZnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgc3dpcGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgJGxpc3Q6IG51bGwsXG4gICAgICAgICAgICAgICAgdG91Y2hPYmplY3Q6IHt9LFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybXNFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB1bnNsaWNrZWQ6IGZhbHNlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkLmV4dGVuZChfLCBfLmluaXRpYWxzKTtcblxuICAgICAgICAgICAgXy5hY3RpdmVCcmVha3BvaW50ID0gbnVsbDtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSBudWxsO1xuICAgICAgICAgICAgXy5hbmltUHJvcCA9IG51bGw7XG4gICAgICAgICAgICBfLmJyZWFrcG9pbnRzID0gW107XG4gICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5ncyA9IFtdO1xuICAgICAgICAgICAgXy5jc3NUcmFuc2l0aW9ucyA9IGZhbHNlO1xuICAgICAgICAgICAgXy5mb2N1c3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgXy5oaWRkZW4gPSAnaGlkZGVuJztcbiAgICAgICAgICAgIF8ucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIF8ucG9zaXRpb25Qcm9wID0gbnVsbDtcbiAgICAgICAgICAgIF8ucmVzcG9uZFRvID0gbnVsbDtcbiAgICAgICAgICAgIF8ucm93Q291bnQgPSAxO1xuICAgICAgICAgICAgXy5zaG91bGRDbGljayA9IHRydWU7XG4gICAgICAgICAgICBfLiRzbGlkZXIgPSAkKGVsZW1lbnQpO1xuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBudWxsO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gbnVsbDtcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSBudWxsO1xuICAgICAgICAgICAgXy52aXNpYmlsaXR5Q2hhbmdlID0gJ3Zpc2liaWxpdHljaGFuZ2UnO1xuICAgICAgICAgICAgXy53aW5kb3dXaWR0aCA9IDA7XG4gICAgICAgICAgICBfLndpbmRvd1RpbWVyID0gbnVsbDtcblxuICAgICAgICAgICAgZGF0YVNldHRpbmdzID0gJChlbGVtZW50KS5kYXRhKCdzbGljaycpIHx8IHt9O1xuXG4gICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgXy5kZWZhdWx0cywgc2V0dGluZ3MsIGRhdGFTZXR0aW5ncyk7XG5cbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5vcHRpb25zLmluaXRpYWxTbGlkZTtcblxuICAgICAgICAgICAgXy5vcmlnaW5hbFNldHRpbmdzID0gXy5vcHRpb25zO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50Lm1vekhpZGRlbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBfLmhpZGRlbiA9ICdtb3pIaWRkZW4nO1xuICAgICAgICAgICAgICAgIF8udmlzaWJpbGl0eUNoYW5nZSA9ICdtb3p2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50LndlYmtpdEhpZGRlbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBfLmhpZGRlbiA9ICd3ZWJraXRIaWRkZW4nO1xuICAgICAgICAgICAgICAgIF8udmlzaWJpbGl0eUNoYW5nZSA9ICd3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5hdXRvUGxheSA9ICQucHJveHkoXy5hdXRvUGxheSwgXyk7XG4gICAgICAgICAgICBfLmF1dG9QbGF5Q2xlYXIgPSAkLnByb3h5KF8uYXV0b1BsYXlDbGVhciwgXyk7XG4gICAgICAgICAgICBfLmF1dG9QbGF5SXRlcmF0b3IgPSAkLnByb3h5KF8uYXV0b1BsYXlJdGVyYXRvciwgXyk7XG4gICAgICAgICAgICBfLmNoYW5nZVNsaWRlID0gJC5wcm94eShfLmNoYW5nZVNsaWRlLCBfKTtcbiAgICAgICAgICAgIF8uY2xpY2tIYW5kbGVyID0gJC5wcm94eShfLmNsaWNrSGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLnNlbGVjdEhhbmRsZXIgPSAkLnByb3h5KF8uc2VsZWN0SGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLnNldFBvc2l0aW9uID0gJC5wcm94eShfLnNldFBvc2l0aW9uLCBfKTtcbiAgICAgICAgICAgIF8uc3dpcGVIYW5kbGVyID0gJC5wcm94eShfLnN3aXBlSGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLmRyYWdIYW5kbGVyID0gJC5wcm94eShfLmRyYWdIYW5kbGVyLCBfKTtcbiAgICAgICAgICAgIF8ua2V5SGFuZGxlciA9ICQucHJveHkoXy5rZXlIYW5kbGVyLCBfKTtcblxuICAgICAgICAgICAgXy5pbnN0YW5jZVVpZCA9IGluc3RhbmNlVWlkKys7XG5cbiAgICAgICAgICAgIC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG4gICAgICAgICAgICAvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAobXVzdCBzdGFydCB3aXRoIDwpXG4gICAgICAgICAgICAvLyBFeHRyYWN0ZWQgZnJvbSBqUXVlcnkgdjEuMTEgc291cmNlXG4gICAgICAgICAgICBfLmh0bWxFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qKSQvO1xuXG5cbiAgICAgICAgICAgIF8ucmVnaXN0ZXJCcmVha3BvaW50cygpO1xuICAgICAgICAgICAgXy5pbml0KHRydWUpO1xuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gU2xpY2s7XG5cbiAgICB9KCkpO1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFjdGl2YXRlQURBID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1hY3RpdmUnKS5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWhpZGRlbic6ICdmYWxzZSdcbiAgICAgICAgfSkuZmluZCgnYSwgaW5wdXQsIGJ1dHRvbiwgc2VsZWN0JykuYXR0cih7XG4gICAgICAgICAgICAndGFiaW5kZXgnOiAnMCdcbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFkZFNsaWRlID0gU2xpY2sucHJvdG90eXBlLnNsaWNrQWRkID0gZnVuY3Rpb24obWFya3VwLCBpbmRleCwgYWRkQmVmb3JlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICh0eXBlb2YoaW5kZXgpID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGFkZEJlZm9yZSA9IGluZGV4O1xuICAgICAgICAgICAgaW5kZXggPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGluZGV4IDwgMCB8fCAoaW5kZXggPj0gXy5zbGlkZUNvdW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgXy51bmxvYWQoKTtcblxuICAgICAgICBpZiAodHlwZW9mKGluZGV4KSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCAmJiBfLiRzbGlkZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhZGRCZWZvcmUpIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuaW5zZXJ0QmVmb3JlKF8uJHNsaWRlcy5lcShpbmRleCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuaW5zZXJ0QWZ0ZXIoXy4kc2xpZGVzLmVxKGluZGV4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYWRkQmVmb3JlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLnByZXBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVzID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmFwcGVuZChfLiRzbGlkZXMpO1xuXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICAkKGVsZW1lbnQpLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBpbmRleCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlc0NhY2hlID0gXy4kc2xpZGVzO1xuXG4gICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFuaW1hdGVIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMSAmJiBfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldEhlaWdodCA9IF8uJHNsaWRlcy5lcShfLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgICBfLiRsaXN0LmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIGhlaWdodDogdGFyZ2V0SGVpZ2h0XG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hbmltYXRlU2xpZGUgPSBmdW5jdGlvbih0YXJnZXRMZWZ0LCBjYWxsYmFjaykge1xuXG4gICAgICAgIHZhciBhbmltUHJvcHMgPSB7fSxcbiAgICAgICAgICAgIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYW5pbWF0ZUhlaWdodCgpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlICYmIF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAtdGFyZ2V0TGVmdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy50cmFuc2Zvcm1zRW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogdGFyZ2V0TGVmdFxuICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCwgXy5vcHRpb25zLmVhc2luZywgY2FsbGJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICB0b3A6IHRhcmdldExlZnRcbiAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRMZWZ0ID0gLShfLmN1cnJlbnRMZWZ0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJCh7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1TdGFydDogXy5jdXJyZW50TGVmdFxuICAgICAgICAgICAgICAgIH0pLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICBhbmltU3RhcnQ6IHRhcmdldExlZnRcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBfLm9wdGlvbnMuc3BlZWQsXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogXy5vcHRpb25zLmVhc2luZyxcbiAgICAgICAgICAgICAgICAgICAgc3RlcDogZnVuY3Rpb24obm93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub3cgPSBNYXRoLmNlaWwobm93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm93ICsgJ3B4LCAwcHgpJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhhbmltUHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlKDBweCwnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm93ICsgJ3B4KSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoYW5pbVByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBfLmFwcGx5VHJhbnNpdGlvbigpO1xuICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSBNYXRoLmNlaWwodGFyZ2V0TGVmdCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlM2QoJyArIHRhcmdldExlZnQgKyAncHgsIDBweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKDBweCwnICsgdGFyZ2V0TGVmdCArICdweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKGFuaW1Qcm9wcyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgXy5kaXNhYmxlVHJhbnNpdGlvbigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXROYXZUYXJnZXQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBhc05hdkZvciA9IF8ub3B0aW9ucy5hc05hdkZvcjtcblxuICAgICAgICBpZiAoIGFzTmF2Rm9yICYmIGFzTmF2Rm9yICE9PSBudWxsICkge1xuICAgICAgICAgICAgYXNOYXZGb3IgPSAkKGFzTmF2Rm9yKS5ub3QoXy4kc2xpZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhc05hdkZvcjtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXNOYXZGb3IgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGFzTmF2Rm9yID0gXy5nZXROYXZUYXJnZXQoKTtcblxuICAgICAgICBpZiAoIGFzTmF2Rm9yICE9PSBudWxsICYmIHR5cGVvZiBhc05hdkZvciA9PT0gJ29iamVjdCcgKSB7XG4gICAgICAgICAgICBhc05hdkZvci5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAkKHRoaXMpLnNsaWNrKCdnZXRTbGljaycpO1xuICAgICAgICAgICAgICAgIGlmKCF0YXJnZXQudW5zbGlja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5zbGlkZUhhbmRsZXIoaW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFwcGx5VHJhbnNpdGlvbiA9IGZ1bmN0aW9uKHNsaWRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdHJhbnNpdGlvbiA9IHt9O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSBfLnRyYW5zZm9ybVR5cGUgKyAnICcgKyBfLm9wdGlvbnMuc3BlZWQgKyAnbXMgJyArIF8ub3B0aW9ucy5jc3NFYXNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJhbnNpdGlvbltfLnRyYW5zaXRpb25UeXBlXSA9ICdvcGFjaXR5ICcgKyBfLm9wdGlvbnMuc3BlZWQgKyAnbXMgJyArIF8ub3B0aW9ucy5jc3NFYXNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGUpLmNzcyh0cmFuc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hdXRvUGxheSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5Q2xlYXIoKTtcblxuICAgICAgICBpZiAoIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XG4gICAgICAgICAgICBfLmF1dG9QbGF5VGltZXIgPSBzZXRJbnRlcnZhbCggXy5hdXRvUGxheUl0ZXJhdG9yLCBfLm9wdGlvbnMuYXV0b3BsYXlTcGVlZCApO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmF1dG9QbGF5Q2xlYXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uYXV0b1BsYXlUaW1lcikge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChfLmF1dG9QbGF5VGltZXIpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmF1dG9QbGF5SXRlcmF0b3IgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBzbGlkZVRvID0gXy5jdXJyZW50U2xpZGUgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgaWYgKCAhXy5wYXVzZWQgJiYgIV8uaW50ZXJydXB0ZWQgJiYgIV8uZm9jdXNzZWQgKSB7XG5cbiAgICAgICAgICAgIGlmICggXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSApIHtcblxuICAgICAgICAgICAgICAgIGlmICggXy5kaXJlY3Rpb24gPT09IDEgJiYgKCBfLmN1cnJlbnRTbGlkZSArIDEgKSA9PT0gKCBfLnNsaWRlQ291bnQgLSAxICkpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5kaXJlY3Rpb24gPSAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCBfLmRpcmVjdGlvbiA9PT0gMCApIHtcblxuICAgICAgICAgICAgICAgICAgICBzbGlkZVRvID0gXy5jdXJyZW50U2xpZGUgLSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBfLmN1cnJlbnRTbGlkZSAtIDEgPT09IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmRpcmVjdGlvbiA9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLnNsaWRlSGFuZGxlciggc2xpZGVUbyApO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRBcnJvd3MgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgKSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdyA9ICQoXy5vcHRpb25zLnByZXZBcnJvdykuYWRkQ2xhc3MoJ3NsaWNrLWFycm93Jyk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cgPSAkKF8ub3B0aW9ucy5uZXh0QXJyb3cpLmFkZENsYXNzKCdzbGljay1hcnJvdycpO1xuXG4gICAgICAgICAgICBpZiggXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcblxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2staGlkZGVuJykucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gdGFiaW5kZXgnKTtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWhpZGRlbicpLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIHRhYmluZGV4Jyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5wcmV2QXJyb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5wcmVwZW5kVG8oXy5vcHRpb25zLmFwcGVuZEFycm93cyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMubmV4dEFycm93KSkge1xuICAgICAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cuYXBwZW5kVG8oXy5vcHRpb25zLmFwcGVuZEFycm93cyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3dcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5hZGQoIF8uJG5leHRBcnJvdyApXG5cbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1oaWRkZW4nKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICAgICAnYXJpYS1kaXNhYmxlZCc6ICd0cnVlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkRG90cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGksIGRvdDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLWRvdHRlZCcpO1xuXG4gICAgICAgICAgICBkb3QgPSAkKCc8dWwgLz4nKS5hZGRDbGFzcyhfLm9wdGlvbnMuZG90c0NsYXNzKTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8PSBfLmdldERvdENvdW50KCk7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGRvdC5hcHBlbmQoJCgnPGxpIC8+JykuYXBwZW5kKF8ub3B0aW9ucy5jdXN0b21QYWdpbmcuY2FsbCh0aGlzLCBfLCBpKSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLiRkb3RzID0gZG90LmFwcGVuZFRvKF8ub3B0aW9ucy5hcHBlbmREb3RzKTtcblxuICAgICAgICAgICAgXy4kZG90cy5maW5kKCdsaScpLmZpcnN0KCkuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRPdXQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVzID1cbiAgICAgICAgICAgIF8uJHNsaWRlclxuICAgICAgICAgICAgICAgIC5jaGlsZHJlbiggXy5vcHRpb25zLnNsaWRlICsgJzpub3QoLnNsaWNrLWNsb25lZCknKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stc2xpZGUnKTtcblxuICAgICAgICBfLnNsaWRlQ291bnQgPSBfLiRzbGlkZXMubGVuZ3RoO1xuXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICAkKGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBpbmRleClcbiAgICAgICAgICAgICAgICAuZGF0YSgnb3JpZ2luYWxTdHlsaW5nJywgJChlbGVtZW50KS5hdHRyKCdzdHlsZScpIHx8ICcnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay1zbGlkZXInKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrID0gKF8uc2xpZGVDb3VudCA9PT0gMCkgP1xuICAgICAgICAgICAgJCgnPGRpdiBjbGFzcz1cInNsaWNrLXRyYWNrXCIvPicpLmFwcGVuZFRvKF8uJHNsaWRlcikgOlxuICAgICAgICAgICAgXy4kc2xpZGVzLndyYXBBbGwoJzxkaXYgY2xhc3M9XCJzbGljay10cmFja1wiLz4nKS5wYXJlbnQoKTtcblxuICAgICAgICBfLiRsaXN0ID0gXy4kc2xpZGVUcmFjay53cmFwKFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzbGljay1saXN0XCIvPicpLnBhcmVudCgpO1xuICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcygnb3BhY2l0eScsIDApO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSB8fCBfLm9wdGlvbnMuc3dpcGVUb1NsaWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgJCgnaW1nW2RhdGEtbGF6eV0nLCBfLiRzbGlkZXIpLm5vdCgnW3NyY10nKS5hZGRDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgICAgIF8uc2V0dXBJbmZpbml0ZSgpO1xuXG4gICAgICAgIF8uYnVpbGRBcnJvd3MoKTtcblxuICAgICAgICBfLmJ1aWxkRG90cygpO1xuXG4gICAgICAgIF8udXBkYXRlRG90cygpO1xuXG5cbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXModHlwZW9mIF8uY3VycmVudFNsaWRlID09PSAnbnVtYmVyJyA/IF8uY3VycmVudFNsaWRlIDogMCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kcmFnZ2FibGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJGxpc3QuYWRkQ2xhc3MoJ2RyYWdnYWJsZScpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkUm93cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgYSwgYiwgYywgbmV3U2xpZGVzLCBudW1PZlNsaWRlcywgb3JpZ2luYWxTbGlkZXMsc2xpZGVzUGVyU2VjdGlvbjtcblxuICAgICAgICBuZXdTbGlkZXMgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgIG9yaWdpbmFsU2xpZGVzID0gXy4kc2xpZGVyLmNoaWxkcmVuKCk7XG5cbiAgICAgICAgaWYoXy5vcHRpb25zLnJvd3MgPiAwKSB7XG5cbiAgICAgICAgICAgIHNsaWRlc1BlclNlY3Rpb24gPSBfLm9wdGlvbnMuc2xpZGVzUGVyUm93ICogXy5vcHRpb25zLnJvd3M7XG4gICAgICAgICAgICBudW1PZlNsaWRlcyA9IE1hdGguY2VpbChcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFNsaWRlcy5sZW5ndGggLyBzbGlkZXNQZXJTZWN0aW9uXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBmb3IoYSA9IDA7IGEgPCBudW1PZlNsaWRlczsgYSsrKXtcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBmb3IoYiA9IDA7IGIgPCBfLm9wdGlvbnMucm93czsgYisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGMgPSAwOyBjIDwgXy5vcHRpb25zLnNsaWRlc1BlclJvdzsgYysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gKGEgKiBzbGlkZXNQZXJTZWN0aW9uICsgKChiICogXy5vcHRpb25zLnNsaWRlc1BlclJvdykgKyBjKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxTbGlkZXMuZ2V0KHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQob3JpZ2luYWxTbGlkZXMuZ2V0KHRhcmdldCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlLmFwcGVuZENoaWxkKHJvdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5ld1NsaWRlcy5hcHBlbmRDaGlsZChzbGlkZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci5lbXB0eSgpLmFwcGVuZChuZXdTbGlkZXMpO1xuICAgICAgICAgICAgXy4kc2xpZGVyLmNoaWxkcmVuKCkuY2hpbGRyZW4oKS5jaGlsZHJlbigpXG4gICAgICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICd3aWR0aCc6KDEwMCAvIF8ub3B0aW9ucy5zbGlkZXNQZXJSb3cpICsgJyUnLFxuICAgICAgICAgICAgICAgICAgICAnZGlzcGxheSc6ICdpbmxpbmUtYmxvY2snXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jaGVja1Jlc3BvbnNpdmUgPSBmdW5jdGlvbihpbml0aWFsLCBmb3JjZVVwZGF0ZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGJyZWFrcG9pbnQsIHRhcmdldEJyZWFrcG9pbnQsIHJlc3BvbmRUb1dpZHRoLCB0cmlnZ2VyQnJlYWtwb2ludCA9IGZhbHNlO1xuICAgICAgICB2YXIgc2xpZGVyV2lkdGggPSBfLiRzbGlkZXIud2lkdGgoKTtcbiAgICAgICAgdmFyIHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGggfHwgJCh3aW5kb3cpLndpZHRoKCk7XG5cbiAgICAgICAgaWYgKF8ucmVzcG9uZFRvID09PSAnd2luZG93Jykge1xuICAgICAgICAgICAgcmVzcG9uZFRvV2lkdGggPSB3aW5kb3dXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChfLnJlc3BvbmRUbyA9PT0gJ3NsaWRlcicpIHtcbiAgICAgICAgICAgIHJlc3BvbmRUb1dpZHRoID0gc2xpZGVyV2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5yZXNwb25kVG8gPT09ICdtaW4nKSB7XG4gICAgICAgICAgICByZXNwb25kVG9XaWR0aCA9IE1hdGgubWluKHdpbmRvd1dpZHRoLCBzbGlkZXJXaWR0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5yZXNwb25zaXZlICYmXG4gICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGggJiZcbiAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQgPSBudWxsO1xuXG4gICAgICAgICAgICBmb3IgKGJyZWFrcG9pbnQgaW4gXy5icmVha3BvaW50cykge1xuICAgICAgICAgICAgICAgIGlmIChfLmJyZWFrcG9pbnRzLmhhc093blByb3BlcnR5KGJyZWFrcG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLm9yaWdpbmFsU2V0dGluZ3MubW9iaWxlRmlyc3QgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uZFRvV2lkdGggPCBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uZFRvV2lkdGggPiBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0YXJnZXRCcmVha3BvaW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYWN0aXZlQnJlYWtwb2ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0QnJlYWtwb2ludCAhPT0gXy5hY3RpdmVCcmVha3BvaW50IHx8IGZvcmNlVXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5icmVha3BvaW50U2V0dGluZ3NbdGFyZ2V0QnJlYWtwb2ludF0gPT09ICd1bnNsaWNrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8udW5zbGljayh0YXJnZXRCcmVha3BvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8ub3JpZ2luYWxTZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5icmVha3BvaW50U2V0dGluZ3NbdGFyZ2V0QnJlYWtwb2ludF0gPT09ICd1bnNsaWNrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy51bnNsaWNrKHRhcmdldEJyZWFrcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8ub3JpZ2luYWxTZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5nc1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYWN0aXZlQnJlYWtwb2ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSBfLm9yaWdpbmFsU2V0dGluZ3M7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXy5yZWZyZXNoKGluaXRpYWwpO1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBvbmx5IHRyaWdnZXIgYnJlYWtwb2ludHMgZHVyaW5nIGFuIGFjdHVhbCBicmVhay4gbm90IG9uIGluaXRpYWxpemUuXG4gICAgICAgICAgICBpZiggIWluaXRpYWwgJiYgdHJpZ2dlckJyZWFrcG9pbnQgIT09IGZhbHNlICkge1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdicmVha3BvaW50JywgW18sIHRyaWdnZXJCcmVha3BvaW50XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2hhbmdlU2xpZGUgPSBmdW5jdGlvbihldmVudCwgZG9udEFuaW1hdGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICAkdGFyZ2V0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KSxcbiAgICAgICAgICAgIGluZGV4T2Zmc2V0LCBzbGlkZU9mZnNldCwgdW5ldmVuT2Zmc2V0O1xuXG4gICAgICAgIC8vIElmIHRhcmdldCBpcyBhIGxpbmssIHByZXZlbnQgZGVmYXVsdCBhY3Rpb24uXG4gICAgICAgIGlmKCR0YXJnZXQuaXMoJ2EnKSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRhcmdldCBpcyBub3QgdGhlIDxsaT4gZWxlbWVudCAoaWU6IGEgY2hpbGQpLCBmaW5kIHRoZSA8bGk+LlxuICAgICAgICBpZighJHRhcmdldC5pcygnbGknKSkge1xuICAgICAgICAgICAgJHRhcmdldCA9ICR0YXJnZXQuY2xvc2VzdCgnbGknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVuZXZlbk9mZnNldCA9IChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApO1xuICAgICAgICBpbmRleE9mZnNldCA9IHVuZXZlbk9mZnNldCA/IDAgOiAoXy5zbGlkZUNvdW50IC0gXy5jdXJyZW50U2xpZGUpICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgIHN3aXRjaCAoZXZlbnQuZGF0YS5tZXNzYWdlKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ3ByZXZpb3VzJzpcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldCA9IGluZGV4T2Zmc2V0ID09PSAwID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIGluZGV4T2Zmc2V0O1xuICAgICAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKF8uY3VycmVudFNsaWRlIC0gc2xpZGVPZmZzZXQsIGZhbHNlLCBkb250QW5pbWF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICduZXh0JzpcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldCA9IGluZGV4T2Zmc2V0ID09PSAwID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogaW5kZXhPZmZzZXQ7XG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jdXJyZW50U2xpZGUgKyBzbGlkZU9mZnNldCwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2luZGV4JzpcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBldmVudC5kYXRhLmluZGV4ID09PSAwID8gMCA6XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXggfHwgJHRhcmdldC5pbmRleCgpICogXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jaGVja05hdmlnYWJsZShpbmRleCksIGZhbHNlLCBkb250QW5pbWF0ZSk7XG4gICAgICAgICAgICAgICAgJHRhcmdldC5jaGlsZHJlbigpLnRyaWdnZXIoJ2ZvY3VzJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNoZWNrTmF2aWdhYmxlID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBuYXZpZ2FibGVzLCBwcmV2TmF2aWdhYmxlO1xuXG4gICAgICAgIG5hdmlnYWJsZXMgPSBfLmdldE5hdmlnYWJsZUluZGV4ZXMoKTtcbiAgICAgICAgcHJldk5hdmlnYWJsZSA9IDA7XG4gICAgICAgIGlmIChpbmRleCA+IG5hdmlnYWJsZXNbbmF2aWdhYmxlcy5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgaW5kZXggPSBuYXZpZ2FibGVzW25hdmlnYWJsZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuIGluIG5hdmlnYWJsZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCBuYXZpZ2FibGVzW25dKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gcHJldk5hdmlnYWJsZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByZXZOYXZpZ2FibGUgPSBuYXZpZ2FibGVzW25dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xlYW5VcEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgJiYgXy4kZG90cyAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICAkKCdsaScsIF8uJGRvdHMpXG4gICAgICAgICAgICAgICAgLm9mZignY2xpY2suc2xpY2snLCBfLmNoYW5nZVNsaWRlKVxuICAgICAgICAgICAgICAgIC5vZmYoJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSlcbiAgICAgICAgICAgICAgICAub2ZmKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kZG90cy5vZmYoJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVyLm9mZignZm9jdXMuc2xpY2sgYmx1ci5zbGljaycpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uJHByZXZBcnJvdyAmJiBfLiRwcmV2QXJyb3cub2ZmKCdjbGljay5zbGljaycsIF8uY2hhbmdlU2xpZGUpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93ICYmIF8uJG5leHRBcnJvdy5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jaGFuZ2VTbGlkZSk7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdyAmJiBfLiRwcmV2QXJyb3cub2ZmKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cgJiYgXy4kbmV4dEFycm93Lm9mZigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hlbmQuc2xpY2sgbW91c2V1cC5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG5cbiAgICAgICAgXy4kbGlzdC5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jbGlja0hhbmRsZXIpO1xuXG4gICAgICAgICQoZG9jdW1lbnQpLm9mZihfLnZpc2liaWxpdHlDaGFuZ2UsIF8udmlzaWJpbGl0eSk7XG5cbiAgICAgICAgXy5jbGVhblVwU2xpZGVFdmVudHMoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJGxpc3Qub2ZmKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9mZignY2xpY2suc2xpY2snLCBfLnNlbGVjdEhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh3aW5kb3cpLm9mZignb3JpZW50YXRpb25jaGFuZ2Uuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8ub3JpZW50YXRpb25DaGFuZ2UpO1xuXG4gICAgICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5yZXNpemUpO1xuXG4gICAgICAgICQoJ1tkcmFnZ2FibGUhPXRydWVdJywgXy4kc2xpZGVUcmFjaykub2ZmKCdkcmFnc3RhcnQnLCBfLnByZXZlbnREZWZhdWx0KTtcblxuICAgICAgICAkKHdpbmRvdykub2ZmKCdsb2FkLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnNldFBvc2l0aW9uKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xlYW5VcFNsaWRlRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJGxpc3Qub2ZmKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpO1xuICAgICAgICBfLiRsaXN0Lm9mZignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsZWFuVXBSb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBvcmlnaW5hbFNsaWRlcztcblxuICAgICAgICBpZihfLm9wdGlvbnMucm93cyA+IDApIHtcbiAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzID0gXy4kc2xpZGVzLmNoaWxkcmVuKCkuY2hpbGRyZW4oKTtcbiAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAgICAgICBfLiRzbGlkZXIuZW1wdHkoKS5hcHBlbmQob3JpZ2luYWxTbGlkZXMpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLnNob3VsZENsaWNrID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKHJlZnJlc2gpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xuXG4gICAgICAgIF8uY2xlYW5VcEV2ZW50cygpO1xuXG4gICAgICAgICQoJy5zbGljay1jbG9uZWQnLCBfLiRzbGlkZXIpLmRldGFjaCgpO1xuXG4gICAgICAgIGlmIChfLiRkb3RzKSB7XG4gICAgICAgICAgICBfLiRkb3RzLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLiRwcmV2QXJyb3cgJiYgXy4kcHJldkFycm93Lmxlbmd0aCApIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93XG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCBzbGljay1hcnJvdyBzbGljay1oaWRkZW4nKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiBhcmlhLWRpc2FibGVkIHRhYmluZGV4JylcbiAgICAgICAgICAgICAgICAuY3NzKCdkaXNwbGF5JywnJyk7XG5cbiAgICAgICAgICAgIGlmICggXy5odG1sRXhwci50ZXN0KCBfLm9wdGlvbnMucHJldkFycm93ICkpIHtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8uJG5leHRBcnJvdyAmJiBfLiRuZXh0QXJyb3cubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBfLiRuZXh0QXJyb3dcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXgnKVxuICAgICAgICAgICAgICAgIC5jc3MoJ2Rpc3BsYXknLCcnKTtcblxuICAgICAgICAgICAgaWYgKCBfLmh0bWxFeHByLnRlc3QoIF8ub3B0aW9ucy5uZXh0QXJyb3cgKSkge1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKF8uJHNsaWRlcykge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLXNsaWRlIHNsaWNrLWFjdGl2ZSBzbGljay1jZW50ZXIgc2xpY2stdmlzaWJsZSBzbGljay1jdXJyZW50JylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4nKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXNsaWNrLWluZGV4JylcbiAgICAgICAgICAgICAgICAuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoJ3N0eWxlJywgJCh0aGlzKS5kYXRhKCdvcmlnaW5hbFN0eWxpbmcnKSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kbGlzdC5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLmFwcGVuZChfLiRzbGlkZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5jbGVhblVwUm93cygpO1xuXG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stc2xpZGVyJyk7XG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2staW5pdGlhbGl6ZWQnKTtcbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1kb3R0ZWQnKTtcblxuICAgICAgICBfLnVuc2xpY2tlZCA9IHRydWU7XG5cbiAgICAgICAgaWYoIXJlZnJlc2gpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdkZXN0cm95JywgW19dKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5kaXNhYmxlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKHNsaWRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdHJhbnNpdGlvbiA9IHt9O1xuXG4gICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSAnJztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyh0cmFuc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZSkuY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZhZGVTbGlkZSA9IGZ1bmN0aW9uKHNsaWRlSW5kZXgsIGNhbGxiYWNrKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuY3NzKHtcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXhcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nLCBjYWxsYmFjayk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgXy5hcHBseVRyYW5zaXRpb24oc2xpZGVJbmRleCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5jc3Moe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBfLmRpc2FibGVUcmFuc2l0aW9uKHNsaWRlSW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoKTtcbiAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZmFkZVNsaWRlT3V0ID0gZnVuY3Rpb24oc2xpZGVJbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMlxuICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBfLmFwcGx5VHJhbnNpdGlvbihzbGlkZUluZGV4KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmNzcyh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZpbHRlclNsaWRlcyA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0ZpbHRlciA9IGZ1bmN0aW9uKGZpbHRlcikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoZmlsdGVyICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlID0gXy4kc2xpZGVzO1xuXG4gICAgICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlLmZpbHRlcihmaWx0ZXIpLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuXG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZm9jdXNIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJHNsaWRlclxuICAgICAgICAgICAgLm9mZignZm9jdXMuc2xpY2sgYmx1ci5zbGljaycpXG4gICAgICAgICAgICAub24oJ2ZvY3VzLnNsaWNrIGJsdXIuc2xpY2snLCAnKicsIGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgdmFyICRzZiA9ICQodGhpcyk7XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnBhdXNlT25Gb2N1cyApIHtcbiAgICAgICAgICAgICAgICAgICAgXy5mb2N1c3NlZCA9ICRzZi5pcygnOmZvY3VzJyk7XG4gICAgICAgICAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sIDApO1xuXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0Q3VycmVudCA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0N1cnJlbnRTbGlkZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgcmV0dXJuIF8uY3VycmVudFNsaWRlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXREb3RDb3VudCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICB2YXIgYnJlYWtQb2ludCA9IDA7XG4gICAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgICAgdmFyIHBhZ2VyUXR5ID0gMDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgKytwYWdlclF0eTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgKytwYWdlclF0eTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50ZXIgKz0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcGFnZXJRdHkgPSBfLnNsaWRlQ291bnQ7XG4gICAgICAgIH0gZWxzZSBpZighXy5vcHRpb25zLmFzTmF2Rm9yKSB7XG4gICAgICAgICAgICBwYWdlclF0eSA9IDEgKyBNYXRoLmNlaWwoKF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIC8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKTtcbiAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICArK3BhZ2VyUXR5O1xuICAgICAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICAgICAgICAgIGNvdW50ZXIgKz0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhZ2VyUXR5IC0gMTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TGVmdCA9IGZ1bmN0aW9uKHNsaWRlSW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0YXJnZXRMZWZ0LFxuICAgICAgICAgICAgdmVydGljYWxIZWlnaHQsXG4gICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9IDAsXG4gICAgICAgICAgICB0YXJnZXRTbGlkZSxcbiAgICAgICAgICAgIGNvZWY7XG5cbiAgICAgICAgXy5zbGlkZU9mZnNldCA9IDA7XG4gICAgICAgIHZlcnRpY2FsSGVpZ2h0ID0gXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQodHJ1ZSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKF8uc2xpZGVXaWR0aCAqIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpICogLTE7XG4gICAgICAgICAgICAgICAgY29lZiA9IC0xXG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSB0cnVlICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2VmID0gLTEuNTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2VmID0gLTJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9ICh2ZXJ0aWNhbEhlaWdodCAqIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpICogY29lZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA+IF8uc2xpZGVDb3VudCAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ID4gXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gKHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpKSAqIF8uc2xpZGVXaWR0aCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gKHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpKSAqIHZlcnRpY2FsSGVpZ2h0KSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9ICgoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSAqIF8uc2xpZGVXaWR0aCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpICogdmVydGljYWxIZWlnaHQpICogLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPiBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLSBfLnNsaWRlQ291bnQpICogXy5zbGlkZVdpZHRoO1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLSBfLnNsaWRlQ291bnQpICogdmVydGljYWxIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAwO1xuICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpKSAvIDIpIC0gKChfLnNsaWRlV2lkdGggKiBfLnNsaWRlQ291bnQpIC8gMik7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgJiYgXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ICs9IF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpIC0gXy5zbGlkZVdpZHRoO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgKz0gXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICgoc2xpZGVJbmRleCAqIF8uc2xpZGVXaWR0aCkgKiAtMSkgKyBfLnNsaWRlT2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICgoc2xpZGVJbmRleCAqIHZlcnRpY2FsSGVpZ2h0KSAqIC0xKSArIHZlcnRpY2FsT2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52YXJpYWJsZVdpZHRoID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyB8fCBfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldFNsaWRlWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAoXy4kc2xpZGVUcmFjay53aWR0aCgpIC0gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAtIHRhcmdldFNsaWRlLndpZHRoKCkpICogLTE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IHRhcmdldFNsaWRlWzBdID8gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAqIC0xIDogMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93IHx8IF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldFNsaWRlWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKF8uJHNsaWRlVHJhY2sud2lkdGgoKSAtIHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgLSB0YXJnZXRTbGlkZS53aWR0aCgpKSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IHRhcmdldFNsaWRlWzBdID8gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAqIC0xIDogMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ICs9IChfLiRsaXN0LndpZHRoKCkgLSB0YXJnZXRTbGlkZS5vdXRlcldpZHRoKCkpIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXRMZWZ0O1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRPcHRpb24gPSBTbGljay5wcm90b3R5cGUuc2xpY2tHZXRPcHRpb24gPSBmdW5jdGlvbihvcHRpb24pIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIF8ub3B0aW9uc1tvcHRpb25dO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXROYXZpZ2FibGVJbmRleGVzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYnJlYWtQb2ludCA9IDAsXG4gICAgICAgICAgICBjb3VudGVyID0gMCxcbiAgICAgICAgICAgIGluZGV4ZXMgPSBbXSxcbiAgICAgICAgICAgIG1heDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbWF4ID0gXy5zbGlkZUNvdW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWtQb2ludCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAqIC0xO1xuICAgICAgICAgICAgY291bnRlciA9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAqIC0xO1xuICAgICAgICAgICAgbWF4ID0gXy5zbGlkZUNvdW50ICogMjtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChicmVha1BvaW50IDwgbWF4KSB7XG4gICAgICAgICAgICBpbmRleGVzLnB1c2goYnJlYWtQb2ludCk7XG4gICAgICAgICAgICBicmVha1BvaW50ID0gY291bnRlciArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgICAgIGNvdW50ZXIgKz0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluZGV4ZXM7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldFNsaWNrID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldFNsaWRlQ291bnQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBzbGlkZXNUcmF2ZXJzZWQsIHN3aXBlZFNsaWRlLCBjZW50ZXJPZmZzZXQ7XG5cbiAgICAgICAgY2VudGVyT2Zmc2V0ID0gXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgPyBfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKSA6IDA7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLXNsaWRlJykuZWFjaChmdW5jdGlvbihpbmRleCwgc2xpZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2xpZGUub2Zmc2V0TGVmdCAtIGNlbnRlck9mZnNldCArICgkKHNsaWRlKS5vdXRlcldpZHRoKCkgLyAyKSA+IChfLnN3aXBlTGVmdCAqIC0xKSkge1xuICAgICAgICAgICAgICAgICAgICBzd2lwZWRTbGlkZSA9IHNsaWRlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHNsaWRlc1RyYXZlcnNlZCA9IE1hdGguYWJzKCQoc3dpcGVkU2xpZGUpLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnKSAtIF8uY3VycmVudFNsaWRlKSB8fCAxO1xuXG4gICAgICAgICAgICByZXR1cm4gc2xpZGVzVHJhdmVyc2VkO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdvVG8gPSBTbGljay5wcm90b3R5cGUuc2xpY2tHb1RvID0gZnVuY3Rpb24oc2xpZGUsIGRvbnRBbmltYXRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCcsXG4gICAgICAgICAgICAgICAgaW5kZXg6IHBhcnNlSW50KHNsaWRlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBkb250QW5pbWF0ZSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbihjcmVhdGlvbikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoISQoXy4kc2xpZGVyKS5oYXNDbGFzcygnc2xpY2staW5pdGlhbGl6ZWQnKSkge1xuXG4gICAgICAgICAgICAkKF8uJHNsaWRlcikuYWRkQ2xhc3MoJ3NsaWNrLWluaXRpYWxpemVkJyk7XG5cbiAgICAgICAgICAgIF8uYnVpbGRSb3dzKCk7XG4gICAgICAgICAgICBfLmJ1aWxkT3V0KCk7XG4gICAgICAgICAgICBfLnNldFByb3BzKCk7XG4gICAgICAgICAgICBfLnN0YXJ0TG9hZCgpO1xuICAgICAgICAgICAgXy5sb2FkU2xpZGVyKCk7XG4gICAgICAgICAgICBfLmluaXRpYWxpemVFdmVudHMoKTtcbiAgICAgICAgICAgIF8udXBkYXRlQXJyb3dzKCk7XG4gICAgICAgICAgICBfLnVwZGF0ZURvdHMoKTtcbiAgICAgICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKHRydWUpO1xuICAgICAgICAgICAgXy5mb2N1c0hhbmRsZXIoKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNyZWF0aW9uKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignaW5pdCcsIFtfXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uaW5pdEFEQSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG5cbiAgICAgICAgICAgIF8ucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0QURBID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgICAgICBudW1Eb3RHcm91cHMgPSBNYXRoLmNlaWwoXy5zbGlkZUNvdW50IC8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyksXG4gICAgICAgICAgICAgICAgdGFiQ29udHJvbEluZGV4ZXMgPSBfLmdldE5hdmlnYWJsZUluZGV4ZXMoKS5maWx0ZXIoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAodmFsID49IDApICYmICh2YWwgPCBfLnNsaWRlQ291bnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlcy5hZGQoXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stY2xvbmVkJykpLmF0dHIoe1xuICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLFxuICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICB9KS5maW5kKCdhLCBpbnB1dCwgYnV0dG9uLCBzZWxlY3QnKS5hdHRyKHtcbiAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5ub3QoXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stY2xvbmVkJykpLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgIHZhciBzbGlkZUNvbnRyb2xJbmRleCA9IHRhYkNvbnRyb2xJbmRleGVzLmluZGV4T2YoaSk7XG5cbiAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAncm9sZSc6ICd0YWJwYW5lbCcsXG4gICAgICAgICAgICAgICAgICAgICdpZCc6ICdzbGljay1zbGlkZScgKyBfLmluc3RhbmNlVWlkICsgaSxcbiAgICAgICAgICAgICAgICAgICAgJ3RhYmluZGV4JzogLTFcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChzbGlkZUNvbnRyb2xJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICB2YXIgYXJpYUJ1dHRvbkNvbnRyb2wgPSAnc2xpY2stc2xpZGUtY29udHJvbCcgKyBfLmluc3RhbmNlVWlkICsgc2xpZGVDb250cm9sSW5kZXhcbiAgICAgICAgICAgICAgICAgICBpZiAoJCgnIycgKyBhcmlhQnV0dG9uQ29udHJvbCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogYXJpYUJ1dHRvbkNvbnRyb2xcbiAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgXy4kZG90cy5hdHRyKCdyb2xlJywgJ3RhYmxpc3QnKS5maW5kKCdsaScpLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgIHZhciBtYXBwZWRTbGlkZUluZGV4ID0gdGFiQ29udHJvbEluZGV4ZXNbaV07XG5cbiAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAncm9sZSc6ICdwcmVzZW50YXRpb24nXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAkKHRoaXMpLmZpbmQoJ2J1dHRvbicpLmZpcnN0KCkuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICdyb2xlJzogJ3RhYicsXG4gICAgICAgICAgICAgICAgICAgICdpZCc6ICdzbGljay1zbGlkZS1jb250cm9sJyArIF8uaW5zdGFuY2VVaWQgKyBpLFxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1jb250cm9scyc6ICdzbGljay1zbGlkZScgKyBfLmluc3RhbmNlVWlkICsgbWFwcGVkU2xpZGVJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgJ2FyaWEtbGFiZWwnOiAoaSArIDEpICsgJyBvZiAnICsgbnVtRG90R3JvdXBzLFxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1zZWxlY3RlZCc6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSkuZXEoXy5jdXJyZW50U2xpZGUpLmZpbmQoJ2J1dHRvbicpLmF0dHIoe1xuICAgICAgICAgICAgICAgICdhcmlhLXNlbGVjdGVkJzogJ3RydWUnLFxuICAgICAgICAgICAgICAgICd0YWJpbmRleCc6ICcwJ1xuICAgICAgICAgICAgfSkuZW5kKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpPV8uY3VycmVudFNsaWRlLCBtYXg9aStfLm9wdGlvbnMuc2xpZGVzVG9TaG93OyBpIDwgbWF4OyBpKyspIHtcbiAgICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25DaGFuZ2UpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShpKS5hdHRyKHsndGFiaW5kZXgnOiAnMCd9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKGkpLnJlbW92ZUF0dHIoJ3RhYmluZGV4Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy5hY3RpdmF0ZUFEQSgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0QXJyb3dFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy4kcHJldkFycm93XG4gICAgICAgICAgICAgICAub2ZmKCdjbGljay5zbGljaycpXG4gICAgICAgICAgICAgICAub24oJ2NsaWNrLnNsaWNrJywge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAncHJldmlvdXMnXG4gICAgICAgICAgICAgICB9LCBfLmNoYW5nZVNsaWRlKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvd1xuICAgICAgICAgICAgICAgLm9mZignY2xpY2suc2xpY2snKVxuICAgICAgICAgICAgICAgLm9uKCdjbGljay5zbGljaycsIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ25leHQnXG4gICAgICAgICAgICAgICB9LCBfLmNoYW5nZVNsaWRlKTtcblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93Lm9uKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cub24oJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXREb3RFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICQoJ2xpJywgXy4kZG90cykub24oJ2NsaWNrLnNsaWNrJywge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCdcbiAgICAgICAgICAgIH0sIF8uY2hhbmdlU2xpZGUpO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRkb3RzLm9uKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMucGF1c2VPbkRvdHNIb3ZlciA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICQoJ2xpJywgXy4kZG90cylcbiAgICAgICAgICAgICAgICAub24oJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSlcbiAgICAgICAgICAgICAgICAub24oJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdFNsaWRlRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLnBhdXNlT25Ib3ZlciApIHtcblxuICAgICAgICAgICAgXy4kbGlzdC5vbignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKTtcbiAgICAgICAgICAgIF8uJGxpc3Qub24oJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdGlhbGl6ZUV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmluaXRBcnJvd0V2ZW50cygpO1xuXG4gICAgICAgIF8uaW5pdERvdEV2ZW50cygpO1xuICAgICAgICBfLmluaXRTbGlkZUV2ZW50cygpO1xuXG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNoc3RhcnQuc2xpY2sgbW91c2Vkb3duLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnc3RhcnQnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2htb3ZlLnNsaWNrIG1vdXNlbW92ZS5zbGljaycsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ21vdmUnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2hlbmQuc2xpY2sgbW91c2V1cC5zbGljaycsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ2VuZCdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaGNhbmNlbC5zbGljayBtb3VzZWxlYXZlLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnZW5kJ1xuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XG5cbiAgICAgICAgXy4kbGlzdC5vbignY2xpY2suc2xpY2snLCBfLmNsaWNrSGFuZGxlcik7XG5cbiAgICAgICAgJChkb2N1bWVudCkub24oXy52aXNpYmlsaXR5Q2hhbmdlLCAkLnByb3h5KF8udmlzaWJpbGl0eSwgXykpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kbGlzdC5vbigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25TZWxlY3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgICQoXy4kc2xpZGVUcmFjaykuY2hpbGRyZW4oKS5vbignY2xpY2suc2xpY2snLCBfLnNlbGVjdEhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh3aW5kb3cpLm9uKCdvcmllbnRhdGlvbmNoYW5nZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgJC5wcm94eShfLm9yaWVudGF0aW9uQ2hhbmdlLCBfKSk7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsICQucHJveHkoXy5yZXNpemUsIF8pKTtcblxuICAgICAgICAkKCdbZHJhZ2dhYmxlIT10cnVlXScsIF8uJHNsaWRlVHJhY2spLm9uKCdkcmFnc3RhcnQnLCBfLnByZXZlbnREZWZhdWx0KTtcblxuICAgICAgICAkKHdpbmRvdykub24oJ2xvYWQuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8uc2V0UG9zaXRpb24pO1xuICAgICAgICAkKF8uc2V0UG9zaXRpb24pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0VUkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cuc2hvdygpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93LnNob3coKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kZG90cy5zaG93KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5rZXlIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgICAvL0RvbnQgc2xpZGUgaWYgdGhlIGN1cnNvciBpcyBpbnNpZGUgdGhlIGZvcm0gZmllbGRzIGFuZCBhcnJvdyBrZXlzIGFyZSBwcmVzc2VkXG4gICAgICAgIGlmKCFldmVudC50YXJnZXQudGFnTmFtZS5tYXRjaCgnVEVYVEFSRUF8SU5QVVR8U0VMRUNUJykpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAzNyAmJiBfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBfLm9wdGlvbnMucnRsID09PSB0cnVlID8gJ25leHQnIDogICdwcmV2aW91cydcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5rZXlDb2RlID09PSAzOSAmJiBfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBfLm9wdGlvbnMucnRsID09PSB0cnVlID8gJ3ByZXZpb3VzJyA6ICduZXh0J1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUubGF6eUxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBsb2FkUmFuZ2UsIGNsb25lUmFuZ2UsIHJhbmdlU3RhcnQsIHJhbmdlRW5kO1xuXG4gICAgICAgIGZ1bmN0aW9uIGxvYWRJbWFnZXMoaW1hZ2VzU2NvcGUpIHtcblxuICAgICAgICAgICAgJCgnaW1nW2RhdGEtbGF6eV0nLCBpbWFnZXNTY29wZSkuZWFjaChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgIGltYWdlU291cmNlID0gJCh0aGlzKS5hdHRyKCdkYXRhLWxhenknKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTcmNTZXQgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtc3Jjc2V0JyksXG4gICAgICAgICAgICAgICAgICAgIGltYWdlU2l6ZXMgID0gJCh0aGlzKS5hdHRyKCdkYXRhLXNpemVzJykgfHwgXy4kc2xpZGVyLmF0dHIoJ2RhdGEtc2l6ZXMnKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcblxuICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAuYW5pbWF0ZSh7IG9wYWNpdHk6IDAgfSwgMTAwLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZVNyY1NldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NyY3NldCcsIGltYWdlU3JjU2V0ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlU2l6ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NpemVzJywgaW1hZ2VTaXplcyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NyYycsIGltYWdlU291cmNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYW5pbWF0ZSh7IG9wYWNpdHk6IDEgfSwgMjAwLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtbGF6eSBkYXRhLXNyY3NldCBkYXRhLXNpemVzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkZWQnLCBbXywgaW1hZ2UsIGltYWdlU291cmNlXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCAnZGF0YS1sYXp5JyApXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoICdzbGljay1sb2FkaW5nJyApXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoICdzbGljay1sYXp5bG9hZC1lcnJvcicgKTtcblxuICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRFcnJvcicsIFsgXywgaW1hZ2UsIGltYWdlU291cmNlIF0pO1xuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkLnNyYyA9IGltYWdlU291cmNlO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmFuZ2VTdGFydCA9IF8uY3VycmVudFNsaWRlICsgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyICsgMSk7XG4gICAgICAgICAgICAgICAgcmFuZ2VFbmQgPSByYW5nZVN0YXJ0ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIDI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJhbmdlU3RhcnQgPSBNYXRoLm1heCgwLCBfLmN1cnJlbnRTbGlkZSAtIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMiArIDEpKTtcbiAgICAgICAgICAgICAgICByYW5nZUVuZCA9IDIgKyAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIgKyAxKSArIF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmFuZ2VTdGFydCA9IF8ub3B0aW9ucy5pbmZpbml0ZSA/IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyBfLmN1cnJlbnRTbGlkZSA6IF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgcmFuZ2VFbmQgPSBNYXRoLmNlaWwocmFuZ2VTdGFydCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlU3RhcnQgPiAwKSByYW5nZVN0YXJ0LS07XG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlRW5kIDw9IF8uc2xpZGVDb3VudCkgcmFuZ2VFbmQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxvYWRSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stc2xpZGUnKS5zbGljZShyYW5nZVN0YXJ0LCByYW5nZUVuZCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ2FudGljaXBhdGVkJykge1xuICAgICAgICAgICAgdmFyIHByZXZTbGlkZSA9IHJhbmdlU3RhcnQgLSAxLFxuICAgICAgICAgICAgICAgIG5leHRTbGlkZSA9IHJhbmdlRW5kLFxuICAgICAgICAgICAgICAgICRzbGlkZXMgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLXNsaWRlJyk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAocHJldlNsaWRlIDwgMCkgcHJldlNsaWRlID0gXy5zbGlkZUNvdW50IC0gMTtcbiAgICAgICAgICAgICAgICBsb2FkUmFuZ2UgPSBsb2FkUmFuZ2UuYWRkKCRzbGlkZXMuZXEocHJldlNsaWRlKSk7XG4gICAgICAgICAgICAgICAgbG9hZFJhbmdlID0gbG9hZFJhbmdlLmFkZCgkc2xpZGVzLmVxKG5leHRTbGlkZSkpO1xuICAgICAgICAgICAgICAgIHByZXZTbGlkZS0tO1xuICAgICAgICAgICAgICAgIG5leHRTbGlkZSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbG9hZEltYWdlcyhsb2FkUmFuZ2UpO1xuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgY2xvbmVSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stc2xpZGUnKTtcbiAgICAgICAgICAgIGxvYWRJbWFnZXMoY2xvbmVSYW5nZSk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgY2xvbmVSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stY2xvbmVkJykuc2xpY2UoMCwgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBsb2FkSW1hZ2VzKGNsb25lUmFuZ2UpO1xuICAgICAgICB9IGVsc2UgaWYgKF8uY3VycmVudFNsaWRlID09PSAwKSB7XG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1jbG9uZWQnKS5zbGljZShfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICogLTEpO1xuICAgICAgICAgICAgbG9hZEltYWdlcyhjbG9uZVJhbmdlKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5sb2FkU2xpZGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uc2V0UG9zaXRpb24oKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyh7XG4gICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgICAgIF8uaW5pdFVJKCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ3Byb2dyZXNzaXZlJykge1xuICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUubmV4dCA9IFNsaWNrLnByb3RvdHlwZS5zbGlja05leHQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ25leHQnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5vcmllbnRhdGlvbkNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZSgpO1xuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnBhdXNlID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUGF1c2UgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XG4gICAgICAgIF8ucGF1c2VkID0gdHJ1ZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucGxheSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1BsYXkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICBfLm9wdGlvbnMuYXV0b3BsYXkgPSB0cnVlO1xuICAgICAgICBfLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICBfLmZvY3Vzc2VkID0gZmFsc2U7XG4gICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucG9zdFNsaWRlID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYoICFfLnVuc2xpY2tlZCApIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2FmdGVyQ2hhbmdlJywgW18sIGluZGV4XSk7XG5cbiAgICAgICAgICAgIF8uYW5pbWF0aW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuICAgICAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5pbml0QURBKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25DaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICRjdXJyZW50U2xpZGUgPSAkKF8uJHNsaWRlcy5nZXQoXy5jdXJyZW50U2xpZGUpKTtcbiAgICAgICAgICAgICAgICAgICAgJGN1cnJlbnRTbGlkZS5hdHRyKCd0YWJpbmRleCcsIDApLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJldiA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1ByZXYgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ3ByZXZpb3VzJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnByb2dyZXNzaXZlTGF6eUxvYWQgPSBmdW5jdGlvbiggdHJ5Q291bnQgKSB7XG5cbiAgICAgICAgdHJ5Q291bnQgPSB0cnlDb3VudCB8fCAxO1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgICRpbWdzVG9Mb2FkID0gJCggJ2ltZ1tkYXRhLWxhenldJywgXy4kc2xpZGVyICksXG4gICAgICAgICAgICBpbWFnZSxcbiAgICAgICAgICAgIGltYWdlU291cmNlLFxuICAgICAgICAgICAgaW1hZ2VTcmNTZXQsXG4gICAgICAgICAgICBpbWFnZVNpemVzLFxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQ7XG5cbiAgICAgICAgaWYgKCAkaW1nc1RvTG9hZC5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIGltYWdlID0gJGltZ3NUb0xvYWQuZmlyc3QoKTtcbiAgICAgICAgICAgIGltYWdlU291cmNlID0gaW1hZ2UuYXR0cignZGF0YS1sYXp5Jyk7XG4gICAgICAgICAgICBpbWFnZVNyY1NldCA9IGltYWdlLmF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICAgICAgICBpbWFnZVNpemVzICA9IGltYWdlLmF0dHIoJ2RhdGEtc2l6ZXMnKSB8fCBfLiRzbGlkZXIuYXR0cignZGF0YS1zaXplcycpO1xuICAgICAgICAgICAgaW1hZ2VUb0xvYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcblxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25sb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW1hZ2VTcmNTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzcmNzZXQnLCBpbWFnZVNyY1NldCApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZVNpemVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzaXplcycsIGltYWdlU2l6ZXMgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCAnc3JjJywgaW1hZ2VTb3VyY2UgKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1sYXp5IGRhdGEtc3Jjc2V0IGRhdGEtc2l6ZXMnKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgICAgICAgICAgICAgIGlmICggXy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ID09PSB0cnVlICkge1xuICAgICAgICAgICAgICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkZWQnLCBbIF8sIGltYWdlLCBpbWFnZVNvdXJjZSBdKTtcbiAgICAgICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoKTtcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCB0cnlDb3VudCA8IDMgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIHRyeSB0byBsb2FkIHRoZSBpbWFnZSAzIHRpbWVzLFxuICAgICAgICAgICAgICAgICAgICAgKiBsZWF2ZSBhIHNsaWdodCBkZWxheSBzbyB3ZSBkb24ndCBnZXRcbiAgICAgICAgICAgICAgICAgICAgICogc2VydmVycyBibG9ja2luZyB0aGUgcmVxdWVzdC5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCB0cnlDb3VudCArIDEgKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgNTAwICk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0ciggJ2RhdGEtbGF6eScgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCAnc2xpY2stbG9hZGluZycgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCAnc2xpY2stbGF6eWxvYWQtZXJyb3InICk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkRXJyb3InLCBbIF8sIGltYWdlLCBpbWFnZVNvdXJjZSBdKTtcblxuICAgICAgICAgICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQuc3JjID0gaW1hZ2VTb3VyY2U7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2FsbEltYWdlc0xvYWRlZCcsIFsgXyBdKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiggaW5pdGlhbGl6aW5nICkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgY3VycmVudFNsaWRlLCBsYXN0VmlzaWJsZUluZGV4O1xuXG4gICAgICAgIGxhc3RWaXNpYmxlSW5kZXggPSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuXG4gICAgICAgIC8vIGluIG5vbi1pbmZpbml0ZSBzbGlkZXJzLCB3ZSBkb24ndCB3YW50IHRvIGdvIHBhc3QgdGhlXG4gICAgICAgIC8vIGxhc3QgdmlzaWJsZSBpbmRleC5cbiAgICAgICAgaWYoICFfLm9wdGlvbnMuaW5maW5pdGUgJiYgKCBfLmN1cnJlbnRTbGlkZSA+IGxhc3RWaXNpYmxlSW5kZXggKSkge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBsYXN0VmlzaWJsZUluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgbGVzcyBzbGlkZXMgdGhhbiB0byBzaG93LCBnbyB0byBzdGFydC5cbiAgICAgICAgaWYgKCBfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gMDtcblxuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XG5cbiAgICAgICAgXy5kZXN0cm95KHRydWUpO1xuXG4gICAgICAgICQuZXh0ZW5kKF8sIF8uaW5pdGlhbHMsIHsgY3VycmVudFNsaWRlOiBjdXJyZW50U2xpZGUgfSk7XG5cbiAgICAgICAgXy5pbml0KCk7XG5cbiAgICAgICAgaWYoICFpbml0aWFsaXppbmcgKSB7XG5cbiAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luZGV4JyxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGN1cnJlbnRTbGlkZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZhbHNlKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlZ2lzdGVyQnJlYWtwb2ludHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsIGJyZWFrcG9pbnQsIGN1cnJlbnRCcmVha3BvaW50LCBsLFxuICAgICAgICAgICAgcmVzcG9uc2l2ZVNldHRpbmdzID0gXy5vcHRpb25zLnJlc3BvbnNpdmUgfHwgbnVsbDtcblxuICAgICAgICBpZiAoICQudHlwZShyZXNwb25zaXZlU2V0dGluZ3MpID09PSAnYXJyYXknICYmIHJlc3BvbnNpdmVTZXR0aW5ncy5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIF8ucmVzcG9uZFRvID0gXy5vcHRpb25zLnJlc3BvbmRUbyB8fCAnd2luZG93JztcblxuICAgICAgICAgICAgZm9yICggYnJlYWtwb2ludCBpbiByZXNwb25zaXZlU2V0dGluZ3MgKSB7XG5cbiAgICAgICAgICAgICAgICBsID0gXy5icmVha3BvaW50cy5sZW5ndGgtMTtcblxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zaXZlU2V0dGluZ3MuaGFzT3duUHJvcGVydHkoYnJlYWtwb2ludCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEJyZWFrcG9pbnQgPSByZXNwb25zaXZlU2V0dGluZ3NbYnJlYWtwb2ludF0uYnJlYWtwb2ludDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIGJyZWFrcG9pbnRzIGFuZCBjdXQgb3V0IGFueSBleGlzdGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBvbmVzIHdpdGggdGhlIHNhbWUgYnJlYWtwb2ludCBudW1iZXIsIHdlIGRvbid0IHdhbnQgZHVwZXMuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKCBsID49IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggXy5icmVha3BvaW50c1tsXSAmJiBfLmJyZWFrcG9pbnRzW2xdID09PSBjdXJyZW50QnJlYWtwb2ludCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRzLnNwbGljZShsLDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50cy5wdXNoKGN1cnJlbnRCcmVha3BvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbY3VycmVudEJyZWFrcG9pbnRdID0gcmVzcG9uc2l2ZVNldHRpbmdzW2JyZWFrcG9pbnRdLnNldHRpbmdzO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uYnJlYWtwb2ludHMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICggXy5vcHRpb25zLm1vYmlsZUZpcnN0ICkgPyBhLWIgOiBiLWE7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlaW5pdCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZXMgPVxuICAgICAgICAgICAgXy4kc2xpZGVUcmFja1xuICAgICAgICAgICAgICAgIC5jaGlsZHJlbihfLm9wdGlvbnMuc2xpZGUpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1zbGlkZScpO1xuXG4gICAgICAgIF8uc2xpZGVDb3VudCA9IF8uJHNsaWRlcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAmJiBfLmN1cnJlbnRTbGlkZSAhPT0gMCkge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLmN1cnJlbnRTbGlkZSAtIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5yZWdpc3RlckJyZWFrcG9pbnRzKCk7XG5cbiAgICAgICAgXy5zZXRQcm9wcygpO1xuICAgICAgICBfLnNldHVwSW5maW5pdGUoKTtcbiAgICAgICAgXy5idWlsZEFycm93cygpO1xuICAgICAgICBfLnVwZGF0ZUFycm93cygpO1xuICAgICAgICBfLmluaXRBcnJvd0V2ZW50cygpO1xuICAgICAgICBfLmJ1aWxkRG90cygpO1xuICAgICAgICBfLnVwZGF0ZURvdHMoKTtcbiAgICAgICAgXy5pbml0RG90RXZlbnRzKCk7XG4gICAgICAgIF8uY2xlYW5VcFNsaWRlRXZlbnRzKCk7XG4gICAgICAgIF8uaW5pdFNsaWRlRXZlbnRzKCk7XG5cbiAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUoZmFsc2UsIHRydWUpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBfLnNldFNsaWRlQ2xhc3Nlcyh0eXBlb2YgXy5jdXJyZW50U2xpZGUgPT09ICdudW1iZXInID8gXy5jdXJyZW50U2xpZGUgOiAwKTtcblxuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG4gICAgICAgIF8uZm9jdXNIYW5kbGVyKCk7XG5cbiAgICAgICAgXy5wYXVzZWQgPSAhXy5vcHRpb25zLmF1dG9wbGF5O1xuICAgICAgICBfLmF1dG9QbGF5KCk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3JlSW5pdCcsIFtfXSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgIT09IF8ud2luZG93V2lkdGgpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChfLndpbmRvd0RlbGF5KTtcbiAgICAgICAgICAgIF8ud2luZG93RGVsYXkgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfLndpbmRvd1dpZHRoID0gJCh3aW5kb3cpLndpZHRoKCk7XG4gICAgICAgICAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUoKTtcbiAgICAgICAgICAgICAgICBpZiggIV8udW5zbGlja2VkICkgeyBfLnNldFBvc2l0aW9uKCk7IH1cbiAgICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVtb3ZlU2xpZGUgPSBTbGljay5wcm90b3R5cGUuc2xpY2tSZW1vdmUgPSBmdW5jdGlvbihpbmRleCwgcmVtb3ZlQmVmb3JlLCByZW1vdmVBbGwpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHR5cGVvZihpbmRleCkgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgcmVtb3ZlQmVmb3JlID0gaW5kZXg7XG4gICAgICAgICAgICBpbmRleCA9IHJlbW92ZUJlZm9yZSA9PT0gdHJ1ZSA/IDAgOiBfLnNsaWRlQ291bnQgLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5kZXggPSByZW1vdmVCZWZvcmUgPT09IHRydWUgPyAtLWluZGV4IDogaW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDwgMSB8fCBpbmRleCA8IDAgfHwgaW5kZXggPiBfLnNsaWRlQ291bnQgLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgIGlmIChyZW1vdmVBbGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oKS5yZW1vdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5lcShpbmRleCkucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXMgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suYXBwZW5kKF8uJHNsaWRlcyk7XG5cbiAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XG5cbiAgICAgICAgXy5yZWluaXQoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0Q1NTID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBwb3NpdGlvblByb3BzID0ge30sXG4gICAgICAgICAgICB4LCB5O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IC1wb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB4ID0gXy5wb3NpdGlvblByb3AgPT0gJ2xlZnQnID8gTWF0aC5jZWlsKHBvc2l0aW9uKSArICdweCcgOiAnMHB4JztcbiAgICAgICAgeSA9IF8ucG9zaXRpb25Qcm9wID09ICd0b3AnID8gTWF0aC5jZWlsKHBvc2l0aW9uKSArICdweCcgOiAnMHB4JztcblxuICAgICAgICBwb3NpdGlvblByb3BzW18ucG9zaXRpb25Qcm9wXSA9IHBvc2l0aW9uO1xuXG4gICAgICAgIGlmIChfLnRyYW5zZm9ybXNFbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MocG9zaXRpb25Qcm9wcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb3NpdGlvblByb3BzID0ge307XG4gICAgICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgnICsgeCArICcsICcgKyB5ICsgJyknO1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHBvc2l0aW9uUHJvcHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKCcgKyB4ICsgJywgJyArIHkgKyAnLCAwcHgpJztcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhwb3NpdGlvblByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXREaW1lbnNpb25zID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRsaXN0LmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICgnMHB4ICcgKyBfLm9wdGlvbnMuY2VudGVyUGFkZGluZylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJGxpc3QuaGVpZ2h0KF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpICogXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRsaXN0LmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IChfLm9wdGlvbnMuY2VudGVyUGFkZGluZyArICcgMHB4JylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8ubGlzdFdpZHRoID0gXy4kbGlzdC53aWR0aCgpO1xuICAgICAgICBfLmxpc3RIZWlnaHQgPSBfLiRsaXN0LmhlaWdodCgpO1xuXG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UgJiYgXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLnNsaWRlV2lkdGggPSBNYXRoLmNlaWwoXy5saXN0V2lkdGggLyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2sud2lkdGgoTWF0aC5jZWlsKChfLnNsaWRlV2lkdGggKiBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5sZW5ndGgpKSk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay53aWR0aCg1MDAwICogXy5zbGlkZUNvdW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc2xpZGVXaWR0aCA9IE1hdGguY2VpbChfLmxpc3RXaWR0aCk7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmhlaWdodChNYXRoLmNlaWwoKF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpICogXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykubGVuZ3RoKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9mZnNldCA9IF8uJHNsaWRlcy5maXJzdCgpLm91dGVyV2lkdGgodHJ1ZSkgLSBfLiRzbGlkZXMuZmlyc3QoKS53aWR0aCgpO1xuICAgICAgICBpZiAoXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IGZhbHNlKSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS53aWR0aChfLnNsaWRlV2lkdGggLSBvZmZzZXQpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRGYWRlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdGFyZ2V0TGVmdDtcblxuICAgICAgICBfLiRzbGlkZXMuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IChfLnNsaWRlV2lkdGggKiBpbmRleCkgKiAtMTtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgJChlbGVtZW50KS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHRhcmdldExlZnQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMixcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0YXJnZXRMZWZ0LFxuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVxKF8uY3VycmVudFNsaWRlKS5jc3Moe1xuICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMSxcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMSAmJiBfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldEhlaWdodCA9IF8uJHNsaWRlcy5lcShfLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgICBfLiRsaXN0LmNzcygnaGVpZ2h0JywgdGFyZ2V0SGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRPcHRpb24gPVxuICAgIFNsaWNrLnByb3RvdHlwZS5zbGlja1NldE9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhY2NlcHRzIGFyZ3VtZW50cyBpbiBmb3JtYXQgb2Y6XG4gICAgICAgICAqXG4gICAgICAgICAqICAtIGZvciBjaGFuZ2luZyBhIHNpbmdsZSBvcHRpb24ncyB2YWx1ZTpcbiAgICAgICAgICogICAgIC5zbGljayhcInNldE9wdGlvblwiLCBvcHRpb24sIHZhbHVlLCByZWZyZXNoIClcbiAgICAgICAgICpcbiAgICAgICAgICogIC0gZm9yIGNoYW5naW5nIGEgc2V0IG9mIHJlc3BvbnNpdmUgb3B0aW9uczpcbiAgICAgICAgICogICAgIC5zbGljayhcInNldE9wdGlvblwiLCAncmVzcG9uc2l2ZScsIFt7fSwgLi4uXSwgcmVmcmVzaCApXG4gICAgICAgICAqXG4gICAgICAgICAqICAtIGZvciB1cGRhdGluZyBtdWx0aXBsZSB2YWx1ZXMgYXQgb25jZSAobm90IHJlc3BvbnNpdmUpXG4gICAgICAgICAqICAgICAuc2xpY2soXCJzZXRPcHRpb25cIiwgeyAnb3B0aW9uJzogdmFsdWUsIC4uLiB9LCByZWZyZXNoIClcbiAgICAgICAgICovXG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBsLCBpdGVtLCBvcHRpb24sIHZhbHVlLCByZWZyZXNoID0gZmFsc2UsIHR5cGU7XG5cbiAgICAgICAgaWYoICQudHlwZSggYXJndW1lbnRzWzBdICkgPT09ICdvYmplY3QnICkge1xuXG4gICAgICAgICAgICBvcHRpb24gPSAgYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgcmVmcmVzaCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIHR5cGUgPSAnbXVsdGlwbGUnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoICQudHlwZSggYXJndW1lbnRzWzBdICkgPT09ICdzdHJpbmcnICkge1xuXG4gICAgICAgICAgICBvcHRpb24gPSAgYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgdmFsdWUgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICByZWZyZXNoID0gYXJndW1lbnRzWzJdO1xuXG4gICAgICAgICAgICBpZiAoIGFyZ3VtZW50c1swXSA9PT0gJ3Jlc3BvbnNpdmUnICYmICQudHlwZSggYXJndW1lbnRzWzFdICkgPT09ICdhcnJheScgKSB7XG5cbiAgICAgICAgICAgICAgICB0eXBlID0gJ3Jlc3BvbnNpdmUnO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB0eXBlb2YgYXJndW1lbnRzWzFdICE9PSAndW5kZWZpbmVkJyApIHtcblxuICAgICAgICAgICAgICAgIHR5cGUgPSAnc2luZ2xlJztcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHR5cGUgPT09ICdzaW5nbGUnICkge1xuXG4gICAgICAgICAgICBfLm9wdGlvbnNbb3B0aW9uXSA9IHZhbHVlO1xuXG5cbiAgICAgICAgfSBlbHNlIGlmICggdHlwZSA9PT0gJ211bHRpcGxlJyApIHtcblxuICAgICAgICAgICAgJC5lYWNoKCBvcHRpb24gLCBmdW5jdGlvbiggb3B0LCB2YWwgKSB7XG5cbiAgICAgICAgICAgICAgICBfLm9wdGlvbnNbb3B0XSA9IHZhbDtcblxuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICB9IGVsc2UgaWYgKCB0eXBlID09PSAncmVzcG9uc2l2ZScgKSB7XG5cbiAgICAgICAgICAgIGZvciAoIGl0ZW0gaW4gdmFsdWUgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiggJC50eXBlKCBfLm9wdGlvbnMucmVzcG9uc2l2ZSApICE9PSAnYXJyYXknICkge1xuXG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlID0gWyB2YWx1ZVtpdGVtXSBdO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBsID0gXy5vcHRpb25zLnJlc3BvbnNpdmUubGVuZ3RoLTE7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHRoZSByZXNwb25zaXZlIG9iamVjdCBhbmQgc3BsaWNlIG91dCBkdXBsaWNhdGVzLlxuICAgICAgICAgICAgICAgICAgICB3aGlsZSggbCA+PSAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnJlc3BvbnNpdmVbbF0uYnJlYWtwb2ludCA9PT0gdmFsdWVbaXRlbV0uYnJlYWtwb2ludCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlLnNwbGljZShsLDEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGwtLTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUucHVzaCggdmFsdWVbaXRlbV0gKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHJlZnJlc2ggKSB7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0UG9zaXRpb24gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5zZXREaW1lbnNpb25zKCk7XG5cbiAgICAgICAgXy5zZXRIZWlnaHQoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLnNldENTUyhfLmdldExlZnQoXy5jdXJyZW50U2xpZGUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc2V0RmFkZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3NldFBvc2l0aW9uJywgW19dKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0UHJvcHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBib2R5U3R5bGUgPSBkb2N1bWVudC5ib2R5LnN0eWxlO1xuXG4gICAgICAgIF8ucG9zaXRpb25Qcm9wID0gXy5vcHRpb25zLnZlcnRpY2FsID09PSB0cnVlID8gJ3RvcCcgOiAnbGVmdCc7XG5cbiAgICAgICAgaWYgKF8ucG9zaXRpb25Qcm9wID09PSAndG9wJykge1xuICAgICAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay12ZXJ0aWNhbCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay12ZXJ0aWNhbCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5XZWJraXRUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIGJvZHlTdHlsZS5Nb3pUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIGJvZHlTdHlsZS5tc1RyYW5zaXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy51c2VDU1MgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmNzc1RyYW5zaXRpb25zID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmZhZGUgKSB7XG4gICAgICAgICAgICBpZiAoIHR5cGVvZiBfLm9wdGlvbnMuekluZGV4ID09PSAnbnVtYmVyJyApIHtcbiAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnpJbmRleCA8IDMgKSB7XG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy56SW5kZXggPSAzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy5vcHRpb25zLnpJbmRleCA9IF8uZGVmYXVsdHMuekluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5PVHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnT1RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW8tdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnT1RyYW5zaXRpb24nO1xuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5wZXJzcGVjdGl2ZVByb3BlcnR5ID09PSB1bmRlZmluZWQgJiYgYm9keVN0eWxlLndlYmtpdFBlcnNwZWN0aXZlID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLk1velRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ01velRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW1vei10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICdNb3pUcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUucGVyc3BlY3RpdmVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICYmIGJvZHlTdHlsZS5Nb3pQZXJzcGVjdGl2ZSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS53ZWJraXRUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICd3ZWJraXRUcmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJy13ZWJraXQtdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnd2Via2l0VHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLnBlcnNwZWN0aXZlUHJvcGVydHkgPT09IHVuZGVmaW5lZCAmJiBib2R5U3R5bGUud2Via2l0UGVyc3BlY3RpdmUgPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5U3R5bGUubXNUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICdtc1RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW1zLXRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ21zVHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLm1zVHJhbnNmb3JtID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLnRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkICYmIF8uYW5pbVR5cGUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ3RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAndHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAndHJhbnNpdGlvbic7XG4gICAgICAgIH1cbiAgICAgICAgXy50cmFuc2Zvcm1zRW5hYmxlZCA9IF8ub3B0aW9ucy51c2VUcmFuc2Zvcm0gJiYgKF8uYW5pbVR5cGUgIT09IG51bGwgJiYgXy5hbmltVHlwZSAhPT0gZmFsc2UpO1xuICAgIH07XG5cblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRTbGlkZUNsYXNzZXMgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGNlbnRlck9mZnNldCwgYWxsU2xpZGVzLCBpbmRleE9mZnNldCwgcmVtYWluZGVyO1xuXG4gICAgICAgIGFsbFNsaWRlcyA9IF8uJHNsaWRlclxuICAgICAgICAgICAgLmZpbmQoJy5zbGljay1zbGlkZScpXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWFjdGl2ZSBzbGljay1jZW50ZXIgc2xpY2stY3VycmVudCcpXG4gICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXG4gICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgLmVxKGluZGV4KVxuICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jdXJyZW50Jyk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgIHZhciBldmVuQ29lZiA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgJSAyID09PSAwID8gMSA6IDA7XG5cbiAgICAgICAgICAgIGNlbnRlck9mZnNldCA9IE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gY2VudGVyT2Zmc2V0ICYmIGluZGV4IDw9IChfLnNsaWRlQ291bnQgLSAxKSAtIGNlbnRlck9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleCAtIGNlbnRlck9mZnNldCArIGV2ZW5Db2VmLCBpbmRleCArIGNlbnRlck9mZnNldCArIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW5kZXhPZmZzZXQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0IC0gY2VudGVyT2Zmc2V0ICsgMSArIGV2ZW5Db2VmLCBpbmRleE9mZnNldCArIGNlbnRlck9mZnNldCArIDIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLmVxKGFsbFNsaWRlcy5sZW5ndGggLSAxIC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSBfLnNsaWRlQ291bnQgLSAxKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuZXEoXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAgICAgLmVxKGluZGV4KVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPD0gKF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4LCBpbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxsU2xpZGVzLmxlbmd0aCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIHJlbWFpbmRlciA9IF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICAgICAgaW5kZXhPZmZzZXQgPSBfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUgPyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgaW5kZXggOiBpbmRleDtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAmJiAoXy5zbGlkZUNvdW50IC0gaW5kZXgpIDwgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0IC0gKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSByZW1haW5kZXIpLCBpbmRleE9mZnNldCArIHJlbWFpbmRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleE9mZnNldCwgaW5kZXhPZmZzZXQgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ29uZGVtYW5kJyB8fCBfLm9wdGlvbnMubGF6eUxvYWQgPT09ICdhbnRpY2lwYXRlZCcpIHtcbiAgICAgICAgICAgIF8ubGF6eUxvYWQoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0dXBJbmZpbml0ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGksIHNsaWRlSW5kZXgsIGluZmluaXRlQ291bnQ7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLm9wdGlvbnMuY2VudGVyTW9kZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgc2xpZGVJbmRleCA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyAxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluZmluaXRlQ291bnQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IF8uc2xpZGVDb3VudDsgaSA+IChfLnNsaWRlQ291bnQgLVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCk7IGkgLT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZUluZGV4ID0gaSAtIDE7XG4gICAgICAgICAgICAgICAgICAgICQoXy4kc2xpZGVzW3NsaWRlSW5kZXhdKS5jbG9uZSh0cnVlKS5hdHRyKCdpZCcsICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBzbGlkZUluZGV4IC0gXy5zbGlkZUNvdW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnByZXBlbmRUbyhfLiRzbGlkZVRyYWNrKS5hZGRDbGFzcygnc2xpY2stY2xvbmVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbmZpbml0ZUNvdW50ICArIF8uc2xpZGVDb3VudDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgICAkKF8uJHNsaWRlc1tzbGlkZUluZGV4XSkuY2xvbmUodHJ1ZSkuYXR0cignaWQnLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4Jywgc2xpZGVJbmRleCArIF8uc2xpZGVDb3VudClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKS5hZGRDbGFzcygnc2xpY2stY2xvbmVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWNsb25lZCcpLmZpbmQoJ1tpZF0nKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoJ2lkJywgJycpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbnRlcnJ1cHQgPSBmdW5jdGlvbiggdG9nZ2xlICkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiggIXRvZ2dsZSApIHtcbiAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgfVxuICAgICAgICBfLmludGVycnVwdGVkID0gdG9nZ2xlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZWxlY3RIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHRhcmdldEVsZW1lbnQgPVxuICAgICAgICAgICAgJChldmVudC50YXJnZXQpLmlzKCcuc2xpY2stc2xpZGUnKSA/XG4gICAgICAgICAgICAgICAgJChldmVudC50YXJnZXQpIDpcbiAgICAgICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkucGFyZW50cygnLnNsaWNrLXNsaWRlJyk7XG5cbiAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQodGFyZ2V0RWxlbWVudC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JykpO1xuXG4gICAgICAgIGlmICghaW5kZXgpIGluZGV4ID0gMDtcblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoaW5kZXgsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB9XG5cbiAgICAgICAgXy5zbGlkZUhhbmRsZXIoaW5kZXgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zbGlkZUhhbmRsZXIgPSBmdW5jdGlvbihpbmRleCwgc3luYywgZG9udEFuaW1hdGUpIHtcblxuICAgICAgICB2YXIgdGFyZ2V0U2xpZGUsIGFuaW1TbGlkZSwgb2xkU2xpZGUsIHNsaWRlTGVmdCwgdGFyZ2V0TGVmdCA9IG51bGwsXG4gICAgICAgICAgICBfID0gdGhpcywgbmF2VGFyZ2V0O1xuXG4gICAgICAgIHN5bmMgPSBzeW5jIHx8IGZhbHNlO1xuXG4gICAgICAgIGlmIChfLmFuaW1hdGluZyA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMud2FpdEZvckFuaW1hdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSAmJiBfLmN1cnJlbnRTbGlkZSA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzeW5jID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5hc05hdkZvcihpbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXRTbGlkZSA9IGluZGV4O1xuICAgICAgICB0YXJnZXRMZWZ0ID0gXy5nZXRMZWZ0KHRhcmdldFNsaWRlKTtcbiAgICAgICAgc2xpZGVMZWZ0ID0gXy5nZXRMZWZ0KF8uY3VycmVudFNsaWRlKTtcblxuICAgICAgICBfLmN1cnJlbnRMZWZ0ID0gXy5zd2lwZUxlZnQgPT09IG51bGwgPyBzbGlkZUxlZnQgOiBfLnN3aXBlTGVmdDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gZmFsc2UgJiYgKGluZGV4IDwgMCB8fCBpbmRleCA+IF8uZ2V0RG90Q291bnQoKSAqIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYW5pbWF0ZVNsaWRlKHNsaWRlTGVmdCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSAmJiAoaW5kZXggPCAwIHx8IGluZGV4ID4gKF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICAgICBfLmFuaW1hdGVTbGlkZShzbGlkZUxlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKF8uYXV0b1BsYXlUaW1lcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0U2xpZGUgPCAwKSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gXy5zbGlkZUNvdW50IC0gKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IF8uc2xpZGVDb3VudCArIHRhcmdldFNsaWRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldFNsaWRlID49IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IHRhcmdldFNsaWRlIC0gXy5zbGlkZUNvdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5pbVNsaWRlID0gdGFyZ2V0U2xpZGU7XG4gICAgICAgIH1cblxuICAgICAgICBfLmFuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2JlZm9yZUNoYW5nZScsIFtfLCBfLmN1cnJlbnRTbGlkZSwgYW5pbVNsaWRlXSk7XG5cbiAgICAgICAgb2xkU2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBhbmltU2xpZGU7XG5cbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXMoXy5jdXJyZW50U2xpZGUpO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmFzTmF2Rm9yICkge1xuXG4gICAgICAgICAgICBuYXZUYXJnZXQgPSBfLmdldE5hdlRhcmdldCgpO1xuICAgICAgICAgICAgbmF2VGFyZ2V0ID0gbmF2VGFyZ2V0LnNsaWNrKCdnZXRTbGljaycpO1xuXG4gICAgICAgICAgICBpZiAoIG5hdlRhcmdldC5zbGlkZUNvdW50IDw9IG5hdlRhcmdldC5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcbiAgICAgICAgICAgICAgICBuYXZUYXJnZXQuc2V0U2xpZGVDbGFzc2VzKF8uY3VycmVudFNsaWRlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgXy51cGRhdGVEb3RzKCk7XG4gICAgICAgIF8udXBkYXRlQXJyb3dzKCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgIF8uZmFkZVNsaWRlT3V0KG9sZFNsaWRlKTtcblxuICAgICAgICAgICAgICAgIF8uZmFkZVNsaWRlKGFuaW1TbGlkZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF8uYW5pbWF0ZUhlaWdodCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uYW5pbWF0ZVNsaWRlKHRhcmdldExlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3RhcnRMb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93LmhpZGUoKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5oaWRlKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJGRvdHMuaGlkZSgpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVEaXJlY3Rpb24gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgeERpc3QsIHlEaXN0LCByLCBzd2lwZUFuZ2xlLCBfID0gdGhpcztcblxuICAgICAgICB4RGlzdCA9IF8udG91Y2hPYmplY3Quc3RhcnRYIC0gXy50b3VjaE9iamVjdC5jdXJYO1xuICAgICAgICB5RGlzdCA9IF8udG91Y2hPYmplY3Quc3RhcnRZIC0gXy50b3VjaE9iamVjdC5jdXJZO1xuICAgICAgICByID0gTWF0aC5hdGFuMih5RGlzdCwgeERpc3QpO1xuXG4gICAgICAgIHN3aXBlQW5nbGUgPSBNYXRoLnJvdW5kKHIgKiAxODAgLyBNYXRoLlBJKTtcbiAgICAgICAgaWYgKHN3aXBlQW5nbGUgPCAwKSB7XG4gICAgICAgICAgICBzd2lwZUFuZ2xlID0gMzYwIC0gTWF0aC5hYnMoc3dpcGVBbmdsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPD0gNDUpICYmIChzd2lwZUFuZ2xlID49IDApKSB7XG4gICAgICAgICAgICByZXR1cm4gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gJ2xlZnQnIDogJ3JpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzd2lwZUFuZ2xlIDw9IDM2MCkgJiYgKHN3aXBlQW5nbGUgPj0gMzE1KSkge1xuICAgICAgICAgICAgcmV0dXJuIChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/ICdsZWZ0JyA6ICdyaWdodCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc3dpcGVBbmdsZSA+PSAxMzUpICYmIChzd2lwZUFuZ2xlIDw9IDIyNSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAncmlnaHQnIDogJ2xlZnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKChzd2lwZUFuZ2xlID49IDM1KSAmJiAoc3dpcGVBbmdsZSA8PSAxMzUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkb3duJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd1cCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJ3ZlcnRpY2FsJztcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVFbmQgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHNsaWRlQ291bnQsXG4gICAgICAgICAgICBkaXJlY3Rpb247XG5cbiAgICAgICAgXy5kcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICBfLnN3aXBpbmcgPSBmYWxzZTtcblxuICAgICAgICBpZiAoXy5zY3JvbGxpbmcpIHtcbiAgICAgICAgICAgIF8uc2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLmludGVycnVwdGVkID0gZmFsc2U7XG4gICAgICAgIF8uc2hvdWxkQ2xpY2sgPSAoIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPiAxMCApID8gZmFsc2UgOiB0cnVlO1xuXG4gICAgICAgIGlmICggXy50b3VjaE9iamVjdC5jdXJYID09PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8udG91Y2hPYmplY3QuZWRnZUhpdCA9PT0gdHJ1ZSApIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdlZGdlJywgW18sIF8uc3dpcGVEaXJlY3Rpb24oKSBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+PSBfLnRvdWNoT2JqZWN0Lm1pblN3aXBlICkge1xuXG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBfLnN3aXBlRGlyZWN0aW9uKCk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoIGRpcmVjdGlvbiApIHtcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2Rvd24nOlxuXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlQ291bnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jaGVja05hdmlnYWJsZSggXy5jdXJyZW50U2xpZGUgKyBfLmdldFNsaWRlQ291bnQoKSApIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSArIF8uZ2V0U2xpZGVDb3VudCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uY3VycmVudERpcmVjdGlvbiA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndXAnOlxuXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlQ291bnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jaGVja05hdmlnYWJsZSggXy5jdXJyZW50U2xpZGUgLSBfLmdldFNsaWRlQ291bnQoKSApIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSAtIF8uZ2V0U2xpZGVDb3VudCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uY3VycmVudERpcmVjdGlvbiA9IDE7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoIGRpcmVjdGlvbiAhPSAndmVydGljYWwnICkge1xuXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoIHNsaWRlQ291bnQgKTtcbiAgICAgICAgICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3N3aXBlJywgW18sIGRpcmVjdGlvbiBdKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmICggXy50b3VjaE9iamVjdC5zdGFydFggIT09IF8udG91Y2hPYmplY3QuY3VyWCApIHtcblxuICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKCBfLmN1cnJlbnRTbGlkZSApO1xuICAgICAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKChfLm9wdGlvbnMuc3dpcGUgPT09IGZhbHNlKSB8fCAoJ29udG91Y2hlbmQnIGluIGRvY3VtZW50ICYmIF8ub3B0aW9ucy5zd2lwZSA9PT0gZmFsc2UpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmRyYWdnYWJsZSA9PT0gZmFsc2UgJiYgZXZlbnQudHlwZS5pbmRleE9mKCdtb3VzZScpICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5maW5nZXJDb3VudCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQgJiYgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzICE9PSB1bmRlZmluZWQgP1xuICAgICAgICAgICAgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzLmxlbmd0aCA6IDE7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5taW5Td2lwZSA9IF8ubGlzdFdpZHRoIC8gXy5vcHRpb25zXG4gICAgICAgICAgICAudG91Y2hUaHJlc2hvbGQ7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3QubWluU3dpcGUgPSBfLmxpc3RIZWlnaHQgLyBfLm9wdGlvbnNcbiAgICAgICAgICAgICAgICAudG91Y2hUaHJlc2hvbGQ7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGV2ZW50LmRhdGEuYWN0aW9uKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgICAgICAgICAgICBfLnN3aXBlU3RhcnQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdtb3ZlJzpcbiAgICAgICAgICAgICAgICBfLnN3aXBlTW92ZShldmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICAgICAgXy5zd2lwZUVuZChldmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZU1vdmUgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGVkZ2VXYXNIaXQgPSBmYWxzZSxcbiAgICAgICAgICAgIGN1ckxlZnQsIHN3aXBlRGlyZWN0aW9uLCBzd2lwZUxlbmd0aCwgcG9zaXRpb25PZmZzZXQsIHRvdWNoZXMsIHZlcnRpY2FsU3dpcGVMZW5ndGg7XG5cbiAgICAgICAgdG91Y2hlcyA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCA/IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyA6IG51bGw7XG5cbiAgICAgICAgaWYgKCFfLmRyYWdnaW5nIHx8IF8uc2Nyb2xsaW5nIHx8IHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1ckxlZnQgPSBfLmdldExlZnQoXy5jdXJyZW50U2xpZGUpO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QuY3VyWCA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXNbMF0ucGFnZVggOiBldmVudC5jbGllbnRYO1xuICAgICAgICBfLnRvdWNoT2JqZWN0LmN1clkgPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzWzBdLnBhZ2VZIDogZXZlbnQuY2xpZW50WTtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoXG4gICAgICAgICAgICBNYXRoLnBvdyhfLnRvdWNoT2JqZWN0LmN1clggLSBfLnRvdWNoT2JqZWN0LnN0YXJ0WCwgMikpKTtcblxuICAgICAgICB2ZXJ0aWNhbFN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoXG4gICAgICAgICAgICBNYXRoLnBvdyhfLnRvdWNoT2JqZWN0LmN1clkgLSBfLnRvdWNoT2JqZWN0LnN0YXJ0WSwgMikpKTtcblxuICAgICAgICBpZiAoIV8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgJiYgIV8uc3dpcGluZyAmJiB2ZXJ0aWNhbFN3aXBlTGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgXy5zY3JvbGxpbmcgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPSB2ZXJ0aWNhbFN3aXBlTGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpcGVEaXJlY3Rpb24gPSBfLnN3aXBlRGlyZWN0aW9uKCk7XG5cbiAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCAmJiBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgXy5zd2lwaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBwb3NpdGlvbk9mZnNldCA9IChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/IDEgOiAtMSkgKiAoXy50b3VjaE9iamVjdC5jdXJYID4gXy50b3VjaE9iamVjdC5zdGFydFggPyAxIDogLTEpO1xuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcG9zaXRpb25PZmZzZXQgPSBfLnRvdWNoT2JqZWN0LmN1clkgPiBfLnRvdWNoT2JqZWN0LnN0YXJ0WSA/IDEgOiAtMTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgc3dpcGVMZW5ndGggPSBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QuZWRnZUhpdCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoKF8uY3VycmVudFNsaWRlID09PSAwICYmIHN3aXBlRGlyZWN0aW9uID09PSAncmlnaHQnKSB8fCAoXy5jdXJyZW50U2xpZGUgPj0gXy5nZXREb3RDb3VudCgpICYmIHN3aXBlRGlyZWN0aW9uID09PSAnbGVmdCcpKSB7XG4gICAgICAgICAgICAgICAgc3dpcGVMZW5ndGggPSBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoICogXy5vcHRpb25zLmVkZ2VGcmljdGlvbjtcbiAgICAgICAgICAgICAgICBfLnRvdWNoT2JqZWN0LmVkZ2VIaXQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gY3VyTGVmdCArIHN3aXBlTGVuZ3RoICogcG9zaXRpb25PZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IGN1ckxlZnQgKyAoc3dpcGVMZW5ndGggKiAoXy4kbGlzdC5oZWlnaHQoKSAvIF8ubGlzdFdpZHRoKSkgKiBwb3NpdGlvbk9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBjdXJMZWZ0ICsgc3dpcGVMZW5ndGggKiBwb3NpdGlvbk9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSB8fCBfLm9wdGlvbnMudG91Y2hNb3ZlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uYW5pbWF0aW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLnNldENTUyhfLnN3aXBlTGVmdCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlU3RhcnQgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRvdWNoZXM7XG5cbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IHRydWU7XG5cbiAgICAgICAgaWYgKF8udG91Y2hPYmplY3QuZmluZ2VyQ291bnQgIT09IDEgfHwgXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5vcmlnaW5hbEV2ZW50ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRvdWNoZXMgPSBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbMF07XG4gICAgICAgIH1cblxuICAgICAgICBfLnRvdWNoT2JqZWN0LnN0YXJ0WCA9IF8udG91Y2hPYmplY3QuY3VyWCA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXMucGFnZVggOiBldmVudC5jbGllbnRYO1xuICAgICAgICBfLnRvdWNoT2JqZWN0LnN0YXJ0WSA9IF8udG91Y2hPYmplY3QuY3VyWSA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXMucGFnZVkgOiBldmVudC5jbGllbnRZO1xuXG4gICAgICAgIF8uZHJhZ2dpbmcgPSB0cnVlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51bmZpbHRlclNsaWRlcyA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1VuZmlsdGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLiRzbGlkZXNDYWNoZSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuXG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudW5sb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgICQoJy5zbGljay1jbG9uZWQnLCBfLiRzbGlkZXIpLnJlbW92ZSgpO1xuXG4gICAgICAgIGlmIChfLiRkb3RzKSB7XG4gICAgICAgICAgICBfLiRkb3RzLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uJHByZXZBcnJvdyAmJiBfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLnByZXZBcnJvdykpIHtcbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLiRuZXh0QXJyb3cgJiYgXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5uZXh0QXJyb3cpKSB7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stc2xpZGUgc2xpY2stYWN0aXZlIHNsaWNrLXZpc2libGUgc2xpY2stY3VycmVudCcpXG4gICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpXG4gICAgICAgICAgICAuY3NzKCd3aWR0aCcsICcnKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudW5zbGljayA9IGZ1bmN0aW9uKGZyb21CcmVha3BvaW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcigndW5zbGljaycsIFtfLCBmcm9tQnJlYWtwb2ludF0pO1xuICAgICAgICBfLmRlc3Ryb3koKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudXBkYXRlQXJyb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgY2VudGVyT2Zmc2V0O1xuXG4gICAgICAgIGNlbnRlck9mZnNldCA9IE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAmJlxuICAgICAgICAgICAgIV8ub3B0aW9ucy5pbmZpbml0ZSApIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIGlmIChfLmN1cnJlbnRTbGlkZSA9PT0gMCkge1xuXG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAtIDEgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51cGRhdGVEb3RzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLiRkb3RzICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIF8uJGRvdHNcbiAgICAgICAgICAgICAgICAuZmluZCgnbGknKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgIC5lbmQoKTtcblxuICAgICAgICAgICAgXy4kZG90c1xuICAgICAgICAgICAgICAgIC5maW5kKCdsaScpXG4gICAgICAgICAgICAgICAgLmVxKE1hdGguZmxvb3IoXy5jdXJyZW50U2xpZGUgLyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJyk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS52aXNpYmlsaXR5ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuXG4gICAgICAgICAgICBpZiAoIGRvY3VtZW50W18uaGlkZGVuXSApIHtcblxuICAgICAgICAgICAgICAgIF8uaW50ZXJydXB0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgICQuZm4uc2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgb3B0ID0gYXJndW1lbnRzWzBdLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICBsID0gXy5sZW5ndGgsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgcmV0O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdCA9PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb3B0ID09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgICAgIF9baV0uc2xpY2sgPSBuZXcgU2xpY2soX1tpXSwgb3B0KTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXQgPSBfW2ldLnNsaWNrW29wdF0uYXBwbHkoX1tpXS5zbGljaywgYXJncyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJldCAhPSAndW5kZWZpbmVkJykgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXztcbiAgICB9O1xuXG59KSk7XG4iLCIvKlxuICAgIEEgc2ltcGxlIGpRdWVyeSBtb2RhbCAoaHR0cDovL2dpdGh1Yi5jb20va3lsZWZveC9qcXVlcnktbW9kYWwpXG4gICAgVmVyc2lvbiAwLjkuMVxuKi9cblxuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gIC8vIE1ha2luZyB5b3VyIGpRdWVyeSBwbHVnaW4gd29yayBiZXR0ZXIgd2l0aCBucG0gdG9vbHNcbiAgLy8gaHR0cDovL2Jsb2cubnBtanMub3JnL3Bvc3QvMTEyNzEyMTY5ODMwL21ha2luZy15b3VyLWpxdWVyeS1wbHVnaW4td29yay1iZXR0ZXItd2l0aC1ucG1cbiAgaWYodHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBmYWN0b3J5KHJlcXVpcmUoXCJqcXVlcnlcIiksIHdpbmRvdywgZG9jdW1lbnQpO1xuICB9XG4gIGVsc2Uge1xuICAgIGZhY3RvcnkoalF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcbiAgfVxufShmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcblxuICB2YXIgbW9kYWxzID0gW10sXG4gICAgICBnZXRDdXJyZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBtb2RhbHMubGVuZ3RoID8gbW9kYWxzW21vZGFscy5sZW5ndGggLSAxXSA6IG51bGw7XG4gICAgICB9LFxuICAgICAgc2VsZWN0Q3VycmVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIHNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgIGZvciAoaT1tb2RhbHMubGVuZ3RoLTE7IGk+PTA7IGktLSkge1xuICAgICAgICAgIGlmIChtb2RhbHNbaV0uJGJsb2NrZXIpIHtcbiAgICAgICAgICAgIG1vZGFsc1tpXS4kYmxvY2tlci50b2dnbGVDbGFzcygnY3VycmVudCcsIXNlbGVjdGVkKS50b2dnbGVDbGFzcygnYmVoaW5kJyxzZWxlY3RlZCk7XG4gICAgICAgICAgICBzZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICQubW9kYWwgPSBmdW5jdGlvbihlbCwgb3B0aW9ucykge1xuICAgIHZhciByZW1vdmUsIHRhcmdldDtcbiAgICB0aGlzLiRib2R5ID0gJCgnYm9keScpO1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCAkLm1vZGFsLmRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICB0aGlzLm9wdGlvbnMuZG9GYWRlID0gIWlzTmFOKHBhcnNlSW50KHRoaXMub3B0aW9ucy5mYWRlRHVyYXRpb24sIDEwKSk7XG4gICAgdGhpcy4kYmxvY2tlciA9IG51bGw7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZUV4aXN0aW5nKVxuICAgICAgd2hpbGUgKCQubW9kYWwuaXNBY3RpdmUoKSlcbiAgICAgICAgJC5tb2RhbC5jbG9zZSgpOyAvLyBDbG9zZSBhbnkgb3BlbiBtb2RhbHMuXG4gICAgbW9kYWxzLnB1c2godGhpcyk7XG4gICAgaWYgKGVsLmlzKCdhJykpIHtcbiAgICAgIHRhcmdldCA9IGVsLmF0dHIoJ2hyZWYnKTtcbiAgICAgIHRoaXMuYW5jaG9yID0gZWw7XG4gICAgICAvL1NlbGVjdCBlbGVtZW50IGJ5IGlkIGZyb20gaHJlZlxuICAgICAgaWYgKC9eIy8udGVzdCh0YXJnZXQpKSB7XG4gICAgICAgIHRoaXMuJGVsbSA9ICQodGFyZ2V0KTtcbiAgICAgICAgaWYgKHRoaXMuJGVsbS5sZW5ndGggIT09IDEpIHJldHVybiBudWxsO1xuICAgICAgICB0aGlzLiRib2R5LmFwcGVuZCh0aGlzLiRlbG0pO1xuICAgICAgICB0aGlzLm9wZW4oKTtcbiAgICAgIC8vQUpBWFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kZWxtID0gJCgnPGRpdj4nKTtcbiAgICAgICAgdGhpcy4kYm9keS5hcHBlbmQodGhpcy4kZWxtKTtcbiAgICAgICAgcmVtb3ZlID0gZnVuY3Rpb24oZXZlbnQsIG1vZGFsKSB7IG1vZGFsLmVsbS5yZW1vdmUoKTsgfTtcbiAgICAgICAgdGhpcy5zaG93U3Bpbm5lcigpO1xuICAgICAgICBlbC50cmlnZ2VyKCQubW9kYWwuQUpBWF9TRU5EKTtcbiAgICAgICAgJC5nZXQodGFyZ2V0KS5kb25lKGZ1bmN0aW9uKGh0bWwpIHtcbiAgICAgICAgICBpZiAoISQubW9kYWwuaXNBY3RpdmUoKSkgcmV0dXJuO1xuICAgICAgICAgIGVsLnRyaWdnZXIoJC5tb2RhbC5BSkFYX1NVQ0NFU1MpO1xuICAgICAgICAgIHZhciBjdXJyZW50ID0gZ2V0Q3VycmVudCgpO1xuICAgICAgICAgIGN1cnJlbnQuJGVsbS5lbXB0eSgpLmFwcGVuZChodG1sKS5vbigkLm1vZGFsLkNMT1NFLCByZW1vdmUpO1xuICAgICAgICAgIGN1cnJlbnQuaGlkZVNwaW5uZXIoKTtcbiAgICAgICAgICBjdXJyZW50Lm9wZW4oKTtcbiAgICAgICAgICBlbC50cmlnZ2VyKCQubW9kYWwuQUpBWF9DT01QTEVURSk7XG4gICAgICAgIH0pLmZhaWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWwudHJpZ2dlcigkLm1vZGFsLkFKQVhfRkFJTCk7XG4gICAgICAgICAgdmFyIGN1cnJlbnQgPSBnZXRDdXJyZW50KCk7XG4gICAgICAgICAgY3VycmVudC5oaWRlU3Bpbm5lcigpO1xuICAgICAgICAgIG1vZGFscy5wb3AoKTsgLy8gcmVtb3ZlIGV4cGVjdGVkIG1vZGFsIGZyb20gdGhlIGxpc3RcbiAgICAgICAgICBlbC50cmlnZ2VyKCQubW9kYWwuQUpBWF9DT01QTEVURSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRlbG0gPSBlbDtcbiAgICAgIHRoaXMuYW5jaG9yID0gZWw7XG4gICAgICB0aGlzLiRib2R5LmFwcGVuZCh0aGlzLiRlbG0pO1xuICAgICAgdGhpcy5vcGVuKCk7XG4gICAgfVxuICB9O1xuXG4gICQubW9kYWwucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiAkLm1vZGFsLFxuXG4gICAgb3BlbjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbSA9IHRoaXM7XG4gICAgICB0aGlzLmJsb2NrKCk7XG4gICAgICB0aGlzLmFuY2hvci5ibHVyKCk7XG4gICAgICBpZih0aGlzLm9wdGlvbnMuZG9GYWRlKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbS5zaG93KCk7XG4gICAgICAgIH0sIHRoaXMub3B0aW9ucy5mYWRlRHVyYXRpb24gKiB0aGlzLm9wdGlvbnMuZmFkZURlbGF5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgfVxuICAgICAgJChkb2N1bWVudCkub2ZmKCdrZXlkb3duLm1vZGFsJykub24oJ2tleWRvd24ubW9kYWwnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICB2YXIgY3VycmVudCA9IGdldEN1cnJlbnQoKTtcbiAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSAyNyAmJiBjdXJyZW50Lm9wdGlvbnMuZXNjYXBlQ2xvc2UpIGN1cnJlbnQuY2xvc2UoKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbGlja0Nsb3NlKVxuICAgICAgICB0aGlzLiRibG9ja2VyLmNsaWNrKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IHRoaXMpXG4gICAgICAgICAgICAkLm1vZGFsLmNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICBtb2RhbHMucG9wKCk7XG4gICAgICB0aGlzLnVuYmxvY2soKTtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgaWYgKCEkLm1vZGFsLmlzQWN0aXZlKCkpXG4gICAgICAgICQoZG9jdW1lbnQpLm9mZigna2V5ZG93bi5tb2RhbCcpO1xuICAgIH0sXG5cbiAgICBibG9jazogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRlbG0udHJpZ2dlcigkLm1vZGFsLkJFRk9SRV9CTE9DSywgW3RoaXMuX2N0eCgpXSk7XG4gICAgICB0aGlzLiRib2R5LmNzcygnb3ZlcmZsb3cnLCdoaWRkZW4nKTtcbiAgICAgIHRoaXMuJGJsb2NrZXIgPSAkKCc8ZGl2IGNsYXNzPVwiJyArIHRoaXMub3B0aW9ucy5ibG9ja2VyQ2xhc3MgKyAnIGJsb2NrZXIgY3VycmVudFwiPjwvZGl2PicpLmFwcGVuZFRvKHRoaXMuJGJvZHkpO1xuICAgICAgc2VsZWN0Q3VycmVudCgpO1xuICAgICAgaWYodGhpcy5vcHRpb25zLmRvRmFkZSkge1xuICAgICAgICB0aGlzLiRibG9ja2VyLmNzcygnb3BhY2l0eScsMCkuYW5pbWF0ZSh7b3BhY2l0eTogMX0sIHRoaXMub3B0aW9ucy5mYWRlRHVyYXRpb24pO1xuICAgICAgfVxuICAgICAgdGhpcy4kZWxtLnRyaWdnZXIoJC5tb2RhbC5CTE9DSywgW3RoaXMuX2N0eCgpXSk7XG4gICAgfSxcblxuICAgIHVuYmxvY2s6IGZ1bmN0aW9uKG5vdykge1xuICAgICAgaWYgKCFub3cgJiYgdGhpcy5vcHRpb25zLmRvRmFkZSlcbiAgICAgICAgdGhpcy4kYmxvY2tlci5mYWRlT3V0KHRoaXMub3B0aW9ucy5mYWRlRHVyYXRpb24sIHRoaXMudW5ibG9jay5iaW5kKHRoaXMsdHJ1ZSkpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuJGJsb2NrZXIuY2hpbGRyZW4oKS5hcHBlbmRUbyh0aGlzLiRib2R5KTtcbiAgICAgICAgdGhpcy4kYmxvY2tlci5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy4kYmxvY2tlciA9IG51bGw7XG4gICAgICAgIHNlbGVjdEN1cnJlbnQoKTtcbiAgICAgICAgaWYgKCEkLm1vZGFsLmlzQWN0aXZlKCkpXG4gICAgICAgICAgdGhpcy4kYm9keS5jc3MoJ292ZXJmbG93JywnJyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHNob3c6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kZWxtLnRyaWdnZXIoJC5tb2RhbC5CRUZPUkVfT1BFTiwgW3RoaXMuX2N0eCgpXSk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dDbG9zZSkge1xuICAgICAgICB0aGlzLmNsb3NlQnV0dG9uID0gJCgnPGEgaHJlZj1cIiNjbG9zZS1tb2RhbFwiIHJlbD1cIm1vZGFsOmNsb3NlXCIgY2xhc3M9XCJjbG9zZS1tb2RhbCAnICsgdGhpcy5vcHRpb25zLmNsb3NlQ2xhc3MgKyAnXCI+JyArIHRoaXMub3B0aW9ucy5jbG9zZVRleHQgKyAnPC9hPicpO1xuICAgICAgICB0aGlzLiRlbG0uYXBwZW5kKHRoaXMuY2xvc2VCdXR0b24pO1xuICAgICAgfVxuICAgICAgdGhpcy4kZWxtLmFkZENsYXNzKHRoaXMub3B0aW9ucy5tb2RhbENsYXNzKS5hcHBlbmRUbyh0aGlzLiRibG9ja2VyKTtcbiAgICAgIGlmKHRoaXMub3B0aW9ucy5kb0ZhZGUpIHtcbiAgICAgICAgdGhpcy4kZWxtLmNzcyh7b3BhY2l0eTogMCwgZGlzcGxheTogJ2lubGluZS1ibG9jayd9KS5hbmltYXRlKHtvcGFjaXR5OiAxfSwgdGhpcy5vcHRpb25zLmZhZGVEdXJhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRlbG0uY3NzKCdkaXNwbGF5JywgJ2lubGluZS1ibG9jaycpO1xuICAgICAgfVxuICAgICAgdGhpcy4kZWxtLnRyaWdnZXIoJC5tb2RhbC5PUEVOLCBbdGhpcy5fY3R4KCldKTtcbiAgICB9LFxuXG4gICAgaGlkZTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRlbG0udHJpZ2dlcigkLm1vZGFsLkJFRk9SRV9DTE9TRSwgW3RoaXMuX2N0eCgpXSk7XG4gICAgICBpZiAodGhpcy5jbG9zZUJ1dHRvbikgdGhpcy5jbG9zZUJ1dHRvbi5yZW1vdmUoKTtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICBpZih0aGlzLm9wdGlvbnMuZG9GYWRlKSB7XG4gICAgICAgIHRoaXMuJGVsbS5mYWRlT3V0KHRoaXMub3B0aW9ucy5mYWRlRHVyYXRpb24sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy4kZWxtLnRyaWdnZXIoJC5tb2RhbC5BRlRFUl9DTE9TRSwgW190aGlzLl9jdHgoKV0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJGVsbS5oaWRlKDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy4kZWxtLnRyaWdnZXIoJC5tb2RhbC5BRlRFUl9DTE9TRSwgW190aGlzLl9jdHgoKV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuJGVsbS50cmlnZ2VyKCQubW9kYWwuQ0xPU0UsIFt0aGlzLl9jdHgoKV0pO1xuICAgIH0sXG5cbiAgICBzaG93U3Bpbm5lcjogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5zaG93U3Bpbm5lcikgcmV0dXJuO1xuICAgICAgdGhpcy5zcGlubmVyID0gdGhpcy5zcGlubmVyIHx8ICQoJzxkaXYgY2xhc3M9XCInICsgdGhpcy5vcHRpb25zLm1vZGFsQ2xhc3MgKyAnLXNwaW5uZXJcIj48L2Rpdj4nKVxuICAgICAgICAuYXBwZW5kKHRoaXMub3B0aW9ucy5zcGlubmVySHRtbCk7XG4gICAgICB0aGlzLiRib2R5LmFwcGVuZCh0aGlzLnNwaW5uZXIpO1xuICAgICAgdGhpcy5zcGlubmVyLnNob3coKTtcbiAgICB9LFxuXG4gICAgaGlkZVNwaW5uZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuc3Bpbm5lcikgdGhpcy5zcGlubmVyLnJlbW92ZSgpO1xuICAgIH0sXG5cbiAgICAvL1JldHVybiBjb250ZXh0IGZvciBjdXN0b20gZXZlbnRzXG4gICAgX2N0eDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4geyBlbG06IHRoaXMuJGVsbSwgJGVsbTogdGhpcy4kZWxtLCAkYmxvY2tlcjogdGhpcy4kYmxvY2tlciwgb3B0aW9uczogdGhpcy5vcHRpb25zIH07XG4gICAgfVxuICB9O1xuXG4gICQubW9kYWwuY2xvc2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgIGlmICghJC5tb2RhbC5pc0FjdGl2ZSgpKSByZXR1cm47XG4gICAgaWYgKGV2ZW50KSBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHZhciBjdXJyZW50ID0gZ2V0Q3VycmVudCgpO1xuICAgIGN1cnJlbnQuY2xvc2UoKTtcbiAgICByZXR1cm4gY3VycmVudC4kZWxtO1xuICB9O1xuXG4gIC8vIFJldHVybnMgaWYgdGhlcmUgY3VycmVudGx5IGlzIGFuIGFjdGl2ZSBtb2RhbFxuICAkLm1vZGFsLmlzQWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtb2RhbHMubGVuZ3RoID4gMDtcbiAgfTtcblxuICAkLm1vZGFsLmdldEN1cnJlbnQgPSBnZXRDdXJyZW50O1xuXG4gICQubW9kYWwuZGVmYXVsdHMgPSB7XG4gICAgY2xvc2VFeGlzdGluZzogdHJ1ZSxcbiAgICBlc2NhcGVDbG9zZTogdHJ1ZSxcbiAgICBjbGlja0Nsb3NlOiB0cnVlLFxuICAgIGNsb3NlVGV4dDogJ0Nsb3NlJyxcbiAgICBjbG9zZUNsYXNzOiAnJyxcbiAgICBtb2RhbENsYXNzOiBcIm1vZGFsXCIsXG4gICAgYmxvY2tlckNsYXNzOiBcImpxdWVyeS1tb2RhbFwiLFxuICAgIHNwaW5uZXJIdG1sOiAnPGRpdiBjbGFzcz1cInJlY3QxXCI+PC9kaXY+PGRpdiBjbGFzcz1cInJlY3QyXCI+PC9kaXY+PGRpdiBjbGFzcz1cInJlY3QzXCI+PC9kaXY+PGRpdiBjbGFzcz1cInJlY3Q0XCI+PC9kaXY+JyxcbiAgICBzaG93U3Bpbm5lcjogdHJ1ZSxcbiAgICBzaG93Q2xvc2U6IHRydWUsXG4gICAgZmFkZUR1cmF0aW9uOiBudWxsLCAgIC8vIE51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhlIGZhZGUgYW5pbWF0aW9uIHRha2VzLlxuICAgIGZhZGVEZWxheTogMS4wICAgICAgICAvLyBQb2ludCBkdXJpbmcgdGhlIG92ZXJsYXkncyBmYWRlLWluIHRoYXQgdGhlIG1vZGFsIGJlZ2lucyB0byBmYWRlIGluICguNSA9IDUwJSwgMS41ID0gMTUwJSwgZXRjLilcbiAgfTtcblxuICAvLyBFdmVudCBjb25zdGFudHNcbiAgJC5tb2RhbC5CRUZPUkVfQkxPQ0sgPSAnbW9kYWw6YmVmb3JlLWJsb2NrJztcbiAgJC5tb2RhbC5CTE9DSyA9ICdtb2RhbDpibG9jayc7XG4gICQubW9kYWwuQkVGT1JFX09QRU4gPSAnbW9kYWw6YmVmb3JlLW9wZW4nO1xuICAkLm1vZGFsLk9QRU4gPSAnbW9kYWw6b3Blbic7XG4gICQubW9kYWwuQkVGT1JFX0NMT1NFID0gJ21vZGFsOmJlZm9yZS1jbG9zZSc7XG4gICQubW9kYWwuQ0xPU0UgPSAnbW9kYWw6Y2xvc2UnO1xuICAkLm1vZGFsLkFGVEVSX0NMT1NFID0gJ21vZGFsOmFmdGVyLWNsb3NlJztcbiAgJC5tb2RhbC5BSkFYX1NFTkQgPSAnbW9kYWw6YWpheDpzZW5kJztcbiAgJC5tb2RhbC5BSkFYX1NVQ0NFU1MgPSAnbW9kYWw6YWpheDpzdWNjZXNzJztcbiAgJC5tb2RhbC5BSkFYX0ZBSUwgPSAnbW9kYWw6YWpheDpmYWlsJztcbiAgJC5tb2RhbC5BSkFYX0NPTVBMRVRFID0gJ21vZGFsOmFqYXg6Y29tcGxldGUnO1xuXG4gICQuZm4ubW9kYWwgPSBmdW5jdGlvbihvcHRpb25zKXtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIG5ldyAkLm1vZGFsKHRoaXMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBBdXRvbWF0aWNhbGx5IGJpbmQgbGlua3Mgd2l0aCByZWw9XCJtb2RhbDpjbG9zZVwiIHRvLCB3ZWxsLCBjbG9zZSB0aGUgbW9kYWwuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5tb2RhbCcsICdhW3JlbH49XCJtb2RhbDpjbG9zZVwiXScsICQubW9kYWwuY2xvc2UpO1xuICAkKGRvY3VtZW50KS5vbignY2xpY2subW9kYWwnLCAnYVtyZWx+PVwibW9kYWw6b3BlblwiXScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAkKHRoaXMpLm1vZGFsKCk7XG4gIH0pO1xufSkpO1xuIiwiLyohXHJcbiAqIGpRdWVyeSBWYWxpZGF0aW9uIFBsdWdpbiB2MS4xNy4wXHJcbiAqXHJcbiAqIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNyBKw7ZybiBaYWVmZmVyZXJcclxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXHJcbiAqL1xyXG4oZnVuY3Rpb24oIGZhY3RvcnkgKSB7XHJcblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcclxuXHRcdGRlZmluZSggW1wianF1ZXJ5XCJdLCBmYWN0b3J5ICk7XHJcblx0fSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIG1vZHVsZS5leHBvcnRzKSB7XHJcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoIHJlcXVpcmUoIFwianF1ZXJ5XCIgKSApO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRmYWN0b3J5KCBqUXVlcnkgKTtcclxuXHR9XHJcbn0oZnVuY3Rpb24oICQgKSB7XHJcblxyXG4kLmV4dGVuZCggJC5mbiwge1xuXG5cdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvdmFsaWRhdGUvXG5cdHZhbGlkYXRlOiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIG5vdGhpbmcgaXMgc2VsZWN0ZWQsIHJldHVybiBub3RoaW5nOyBjYW4ndCBjaGFpbiBhbnl3YXlcblx0XHRpZiAoICF0aGlzLmxlbmd0aCApIHtcblx0XHRcdGlmICggb3B0aW9ucyAmJiBvcHRpb25zLmRlYnVnICYmIHdpbmRvdy5jb25zb2xlICkge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oIFwiTm90aGluZyBzZWxlY3RlZCwgY2FuJ3QgdmFsaWRhdGUsIHJldHVybmluZyBub3RoaW5nLlwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgaWYgYSB2YWxpZGF0b3IgZm9yIHRoaXMgZm9ybSB3YXMgYWxyZWFkeSBjcmVhdGVkXG5cdFx0dmFyIHZhbGlkYXRvciA9ICQuZGF0YSggdGhpc1sgMCBdLCBcInZhbGlkYXRvclwiICk7XG5cdFx0aWYgKCB2YWxpZGF0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdmFsaWRhdG9yO1xuXHRcdH1cblxuXHRcdC8vIEFkZCBub3ZhbGlkYXRlIHRhZyBpZiBIVE1MNS5cblx0XHR0aGlzLmF0dHIoIFwibm92YWxpZGF0ZVwiLCBcIm5vdmFsaWRhdGVcIiApO1xuXG5cdFx0dmFsaWRhdG9yID0gbmV3ICQudmFsaWRhdG9yKCBvcHRpb25zLCB0aGlzWyAwIF0gKTtcblx0XHQkLmRhdGEoIHRoaXNbIDAgXSwgXCJ2YWxpZGF0b3JcIiwgdmFsaWRhdG9yICk7XG5cblx0XHRpZiAoIHZhbGlkYXRvci5zZXR0aW5ncy5vbnN1Ym1pdCApIHtcblxuXHRcdFx0dGhpcy5vbiggXCJjbGljay52YWxpZGF0ZVwiLCBcIjpzdWJtaXRcIiwgZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFRyYWNrIHRoZSB1c2VkIHN1Ym1pdCBidXR0b24gdG8gcHJvcGVybHkgaGFuZGxlIHNjcmlwdGVkXG5cdFx0XHRcdC8vIHN1Ym1pdHMgbGF0ZXIuXG5cdFx0XHRcdHZhbGlkYXRvci5zdWJtaXRCdXR0b24gPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuXG5cdFx0XHRcdC8vIEFsbG93IHN1cHByZXNzaW5nIHZhbGlkYXRpb24gYnkgYWRkaW5nIGEgY2FuY2VsIGNsYXNzIHRvIHRoZSBzdWJtaXQgYnV0dG9uXG5cdFx0XHRcdGlmICggJCggdGhpcyApLmhhc0NsYXNzKCBcImNhbmNlbFwiICkgKSB7XG5cdFx0XHRcdFx0dmFsaWRhdG9yLmNhbmNlbFN1Ym1pdCA9IHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBbGxvdyBzdXBwcmVzc2luZyB2YWxpZGF0aW9uIGJ5IGFkZGluZyB0aGUgaHRtbDUgZm9ybW5vdmFsaWRhdGUgYXR0cmlidXRlIHRvIHRoZSBzdWJtaXQgYnV0dG9uXG5cdFx0XHRcdGlmICggJCggdGhpcyApLmF0dHIoIFwiZm9ybW5vdmFsaWRhdGVcIiApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dmFsaWRhdG9yLmNhbmNlbFN1Ym1pdCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblxuXHRcdFx0Ly8gVmFsaWRhdGUgdGhlIGZvcm0gb24gc3VibWl0XG5cdFx0XHR0aGlzLm9uKCBcInN1Ym1pdC52YWxpZGF0ZVwiLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdGlmICggdmFsaWRhdG9yLnNldHRpbmdzLmRlYnVnICkge1xuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCBmb3JtIHN1Ym1pdCB0byBiZSBhYmxlIHRvIHNlZSBjb25zb2xlIG91dHB1dFxuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZnVuY3Rpb24gaGFuZGxlKCkge1xuXHRcdFx0XHRcdHZhciBoaWRkZW4sIHJlc3VsdDtcblxuXHRcdFx0XHRcdC8vIEluc2VydCBhIGhpZGRlbiBpbnB1dCBhcyBhIHJlcGxhY2VtZW50IGZvciB0aGUgbWlzc2luZyBzdWJtaXQgYnV0dG9uXG5cdFx0XHRcdFx0Ly8gVGhlIGhpZGRlbiBpbnB1dCBpcyBpbnNlcnRlZCBpbiB0d28gY2FzZXM6XG5cdFx0XHRcdFx0Ly8gICAtIEEgdXNlciBkZWZpbmVkIGEgYHN1Ym1pdEhhbmRsZXJgXG5cdFx0XHRcdFx0Ly8gICAtIFRoZXJlIHdhcyBhIHBlbmRpbmcgcmVxdWVzdCBkdWUgdG8gYHJlbW90ZWAgbWV0aG9kIGFuZCBgc3RvcFJlcXVlc3QoKWBcblx0XHRcdFx0XHQvLyAgICAgd2FzIGNhbGxlZCB0byBzdWJtaXQgdGhlIGZvcm0gaW4gY2FzZSBpdCdzIHZhbGlkXG5cdFx0XHRcdFx0aWYgKCB2YWxpZGF0b3Iuc3VibWl0QnV0dG9uICYmICggdmFsaWRhdG9yLnNldHRpbmdzLnN1Ym1pdEhhbmRsZXIgfHwgdmFsaWRhdG9yLmZvcm1TdWJtaXR0ZWQgKSApIHtcblx0XHRcdFx0XHRcdGhpZGRlbiA9ICQoIFwiPGlucHV0IHR5cGU9J2hpZGRlbicvPlwiIClcblx0XHRcdFx0XHRcdFx0LmF0dHIoIFwibmFtZVwiLCB2YWxpZGF0b3Iuc3VibWl0QnV0dG9uLm5hbWUgKVxuXHRcdFx0XHRcdFx0XHQudmFsKCAkKCB2YWxpZGF0b3Iuc3VibWl0QnV0dG9uICkudmFsKCkgKVxuXHRcdFx0XHRcdFx0XHQuYXBwZW5kVG8oIHZhbGlkYXRvci5jdXJyZW50Rm9ybSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggdmFsaWRhdG9yLnNldHRpbmdzLnN1Ym1pdEhhbmRsZXIgKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB2YWxpZGF0b3Iuc2V0dGluZ3Muc3VibWl0SGFuZGxlci5jYWxsKCB2YWxpZGF0b3IsIHZhbGlkYXRvci5jdXJyZW50Rm9ybSwgZXZlbnQgKTtcblx0XHRcdFx0XHRcdGlmICggaGlkZGVuICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFuZCBjbGVhbiB1cCBhZnRlcndhcmRzOyB0aGFua3MgdG8gbm8tYmxvY2stc2NvcGUsIGhpZGRlbiBjYW4gYmUgcmVmZXJlbmNlZFxuXHRcdFx0XHRcdFx0XHRoaWRkZW4ucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIHJlc3VsdCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByZXZlbnQgc3VibWl0IGZvciBpbnZhbGlkIGZvcm1zIG9yIGN1c3RvbSBzdWJtaXQgaGFuZGxlcnNcblx0XHRcdFx0aWYgKCB2YWxpZGF0b3IuY2FuY2VsU3VibWl0ICkge1xuXHRcdFx0XHRcdHZhbGlkYXRvci5jYW5jZWxTdWJtaXQgPSBmYWxzZTtcblx0XHRcdFx0XHRyZXR1cm4gaGFuZGxlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCB2YWxpZGF0b3IuZm9ybSgpICkge1xuXHRcdFx0XHRcdGlmICggdmFsaWRhdG9yLnBlbmRpbmdSZXF1ZXN0ICkge1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLmZvcm1TdWJtaXR0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gaGFuZGxlKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFsaWRhdG9yLmZvY3VzSW52YWxpZCgpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWxpZGF0b3I7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy92YWxpZC9cblx0dmFsaWQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB2YWxpZCwgdmFsaWRhdG9yLCBlcnJvckxpc3Q7XG5cblx0XHRpZiAoICQoIHRoaXNbIDAgXSApLmlzKCBcImZvcm1cIiApICkge1xuXHRcdFx0dmFsaWQgPSB0aGlzLnZhbGlkYXRlKCkuZm9ybSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlcnJvckxpc3QgPSBbXTtcblx0XHRcdHZhbGlkID0gdHJ1ZTtcblx0XHRcdHZhbGlkYXRvciA9ICQoIHRoaXNbIDAgXS5mb3JtICkudmFsaWRhdGUoKTtcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhbGlkID0gdmFsaWRhdG9yLmVsZW1lbnQoIHRoaXMgKSAmJiB2YWxpZDtcblx0XHRcdFx0aWYgKCAhdmFsaWQgKSB7XG5cdFx0XHRcdFx0ZXJyb3JMaXN0ID0gZXJyb3JMaXN0LmNvbmNhdCggdmFsaWRhdG9yLmVycm9yTGlzdCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0XHR2YWxpZGF0b3IuZXJyb3JMaXN0ID0gZXJyb3JMaXN0O1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsaWQ7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9ydWxlcy9cblx0cnVsZXM6IGZ1bmN0aW9uKCBjb21tYW5kLCBhcmd1bWVudCApIHtcblx0XHR2YXIgZWxlbWVudCA9IHRoaXNbIDAgXSxcblx0XHRcdHNldHRpbmdzLCBzdGF0aWNSdWxlcywgZXhpc3RpbmdSdWxlcywgZGF0YSwgcGFyYW0sIGZpbHRlcmVkO1xuXG5cdFx0Ly8gSWYgbm90aGluZyBpcyBzZWxlY3RlZCwgcmV0dXJuIGVtcHR5IG9iamVjdDsgY2FuJ3QgY2hhaW4gYW55d2F5XG5cdFx0aWYgKCBlbGVtZW50ID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCAhZWxlbWVudC5mb3JtICYmIGVsZW1lbnQuaGFzQXR0cmlidXRlKCBcImNvbnRlbnRlZGl0YWJsZVwiICkgKSB7XG5cdFx0XHRlbGVtZW50LmZvcm0gPSB0aGlzLmNsb3Nlc3QoIFwiZm9ybVwiIClbIDAgXTtcblx0XHRcdGVsZW1lbnQubmFtZSA9IHRoaXMuYXR0ciggXCJuYW1lXCIgKTtcblx0XHR9XG5cblx0XHRpZiAoIGVsZW1lbnQuZm9ybSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggY29tbWFuZCApIHtcblx0XHRcdHNldHRpbmdzID0gJC5kYXRhKCBlbGVtZW50LmZvcm0sIFwidmFsaWRhdG9yXCIgKS5zZXR0aW5ncztcblx0XHRcdHN0YXRpY1J1bGVzID0gc2V0dGluZ3MucnVsZXM7XG5cdFx0XHRleGlzdGluZ1J1bGVzID0gJC52YWxpZGF0b3Iuc3RhdGljUnVsZXMoIGVsZW1lbnQgKTtcblx0XHRcdHN3aXRjaCAoIGNvbW1hbmQgKSB7XG5cdFx0XHRjYXNlIFwiYWRkXCI6XG5cdFx0XHRcdCQuZXh0ZW5kKCBleGlzdGluZ1J1bGVzLCAkLnZhbGlkYXRvci5ub3JtYWxpemVSdWxlKCBhcmd1bWVudCApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIG1lc3NhZ2VzIGZyb20gcnVsZXMsIGJ1dCBhbGxvdyB0aGVtIHRvIGJlIHNldCBzZXBhcmF0ZWx5XG5cdFx0XHRcdGRlbGV0ZSBleGlzdGluZ1J1bGVzLm1lc3NhZ2VzO1xuXHRcdFx0XHRzdGF0aWNSdWxlc1sgZWxlbWVudC5uYW1lIF0gPSBleGlzdGluZ1J1bGVzO1xuXHRcdFx0XHRpZiAoIGFyZ3VtZW50Lm1lc3NhZ2VzICkge1xuXHRcdFx0XHRcdHNldHRpbmdzLm1lc3NhZ2VzWyBlbGVtZW50Lm5hbWUgXSA9ICQuZXh0ZW5kKCBzZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF0sIGFyZ3VtZW50Lm1lc3NhZ2VzICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwicmVtb3ZlXCI6XG5cdFx0XHRcdGlmICggIWFyZ3VtZW50ICkge1xuXHRcdFx0XHRcdGRlbGV0ZSBzdGF0aWNSdWxlc1sgZWxlbWVudC5uYW1lIF07XG5cdFx0XHRcdFx0cmV0dXJuIGV4aXN0aW5nUnVsZXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZmlsdGVyZWQgPSB7fTtcblx0XHRcdFx0JC5lYWNoKCBhcmd1bWVudC5zcGxpdCggL1xccy8gKSwgZnVuY3Rpb24oIGluZGV4LCBtZXRob2QgKSB7XG5cdFx0XHRcdFx0ZmlsdGVyZWRbIG1ldGhvZCBdID0gZXhpc3RpbmdSdWxlc1sgbWV0aG9kIF07XG5cdFx0XHRcdFx0ZGVsZXRlIGV4aXN0aW5nUnVsZXNbIG1ldGhvZCBdO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiBmaWx0ZXJlZDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRkYXRhID0gJC52YWxpZGF0b3Iubm9ybWFsaXplUnVsZXMoXG5cdFx0JC5leHRlbmQoXG5cdFx0XHR7fSxcblx0XHRcdCQudmFsaWRhdG9yLmNsYXNzUnVsZXMoIGVsZW1lbnQgKSxcblx0XHRcdCQudmFsaWRhdG9yLmF0dHJpYnV0ZVJ1bGVzKCBlbGVtZW50ICksXG5cdFx0XHQkLnZhbGlkYXRvci5kYXRhUnVsZXMoIGVsZW1lbnQgKSxcblx0XHRcdCQudmFsaWRhdG9yLnN0YXRpY1J1bGVzKCBlbGVtZW50IClcblx0XHQpLCBlbGVtZW50ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgcmVxdWlyZWQgaXMgYXQgZnJvbnRcblx0XHRpZiAoIGRhdGEucmVxdWlyZWQgKSB7XG5cdFx0XHRwYXJhbSA9IGRhdGEucmVxdWlyZWQ7XG5cdFx0XHRkZWxldGUgZGF0YS5yZXF1aXJlZDtcblx0XHRcdGRhdGEgPSAkLmV4dGVuZCggeyByZXF1aXJlZDogcGFyYW0gfSwgZGF0YSApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSByZW1vdGUgaXMgYXQgYmFja1xuXHRcdGlmICggZGF0YS5yZW1vdGUgKSB7XG5cdFx0XHRwYXJhbSA9IGRhdGEucmVtb3RlO1xuXHRcdFx0ZGVsZXRlIGRhdGEucmVtb3RlO1xuXHRcdFx0ZGF0YSA9ICQuZXh0ZW5kKCBkYXRhLCB7IHJlbW90ZTogcGFyYW0gfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG59ICk7XG5cbi8vIEN1c3RvbSBzZWxlY3RvcnNcbiQuZXh0ZW5kKCAkLmV4cHIucHNldWRvcyB8fCAkLmV4cHJbIFwiOlwiIF0sIHtcdFx0Ly8gJ3x8ICQuZXhwclsgXCI6XCIgXScgaGVyZSBlbmFibGVzIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHRvIGpRdWVyeSAxLjcuIENhbiBiZSByZW1vdmVkIHdoZW4gZHJvcHBpbmcgalEgMS43Lnggc3VwcG9ydFxuXG5cdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvYmxhbmstc2VsZWN0b3IvXG5cdGJsYW5rOiBmdW5jdGlvbiggYSApIHtcblx0XHRyZXR1cm4gISQudHJpbSggXCJcIiArICQoIGEgKS52YWwoKSApO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvZmlsbGVkLXNlbGVjdG9yL1xuXHRmaWxsZWQ6IGZ1bmN0aW9uKCBhICkge1xuXHRcdHZhciB2YWwgPSAkKCBhICkudmFsKCk7XG5cdFx0cmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhISQudHJpbSggXCJcIiArIHZhbCApO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvdW5jaGVja2VkLXNlbGVjdG9yL1xuXHR1bmNoZWNrZWQ6IGZ1bmN0aW9uKCBhICkge1xuXHRcdHJldHVybiAhJCggYSApLnByb3AoIFwiY2hlY2tlZFwiICk7XG5cdH1cbn0gKTtcblxuLy8gQ29uc3RydWN0b3IgZm9yIHZhbGlkYXRvclxuJC52YWxpZGF0b3IgPSBmdW5jdGlvbiggb3B0aW9ucywgZm9ybSApIHtcblx0dGhpcy5zZXR0aW5ncyA9ICQuZXh0ZW5kKCB0cnVlLCB7fSwgJC52YWxpZGF0b3IuZGVmYXVsdHMsIG9wdGlvbnMgKTtcblx0dGhpcy5jdXJyZW50Rm9ybSA9IGZvcm07XG5cdHRoaXMuaW5pdCgpO1xufTtcblxuLy8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9qUXVlcnkudmFsaWRhdG9yLmZvcm1hdC9cbiQudmFsaWRhdG9yLmZvcm1hdCA9IGZ1bmN0aW9uKCBzb3VyY2UsIHBhcmFtcyApIHtcblx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID09PSAxICkge1xuXHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBhcmdzID0gJC5tYWtlQXJyYXkoIGFyZ3VtZW50cyApO1xuXHRcdFx0YXJncy51bnNoaWZ0KCBzb3VyY2UgKTtcblx0XHRcdHJldHVybiAkLnZhbGlkYXRvci5mb3JtYXQuYXBwbHkoIHRoaXMsIGFyZ3MgKTtcblx0XHR9O1xuXHR9XG5cdGlmICggcGFyYW1zID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cmV0dXJuIHNvdXJjZTtcblx0fVxuXHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIHBhcmFtcy5jb25zdHJ1Y3RvciAhPT0gQXJyYXkgICkge1xuXHRcdHBhcmFtcyA9ICQubWFrZUFycmF5KCBhcmd1bWVudHMgKS5zbGljZSggMSApO1xuXHR9XG5cdGlmICggcGFyYW1zLmNvbnN0cnVjdG9yICE9PSBBcnJheSApIHtcblx0XHRwYXJhbXMgPSBbIHBhcmFtcyBdO1xuXHR9XG5cdCQuZWFjaCggcGFyYW1zLCBmdW5jdGlvbiggaSwgbiApIHtcblx0XHRzb3VyY2UgPSBzb3VyY2UucmVwbGFjZSggbmV3IFJlZ0V4cCggXCJcXFxce1wiICsgaSArIFwiXFxcXH1cIiwgXCJnXCIgKSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gbjtcblx0XHR9ICk7XG5cdH0gKTtcblx0cmV0dXJuIHNvdXJjZTtcbn07XG5cbiQuZXh0ZW5kKCAkLnZhbGlkYXRvciwge1xuXG5cdGRlZmF1bHRzOiB7XG5cdFx0bWVzc2FnZXM6IHt9LFxuXHRcdGdyb3Vwczoge30sXG5cdFx0cnVsZXM6IHt9LFxuXHRcdGVycm9yQ2xhc3M6IFwiZXJyb3JcIixcblx0XHRwZW5kaW5nQ2xhc3M6IFwicGVuZGluZ1wiLFxuXHRcdHZhbGlkQ2xhc3M6IFwidmFsaWRcIixcblx0XHRlcnJvckVsZW1lbnQ6IFwibGFiZWxcIixcblx0XHRmb2N1c0NsZWFudXA6IGZhbHNlLFxuXHRcdGZvY3VzSW52YWxpZDogdHJ1ZSxcblx0XHRlcnJvckNvbnRhaW5lcjogJCggW10gKSxcblx0XHRlcnJvckxhYmVsQ29udGFpbmVyOiAkKCBbXSApLFxuXHRcdG9uc3VibWl0OiB0cnVlLFxuXHRcdGlnbm9yZTogXCI6aGlkZGVuXCIsXG5cdFx0aWdub3JlVGl0bGU6IGZhbHNlLFxuXHRcdG9uZm9jdXNpbjogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHR0aGlzLmxhc3RBY3RpdmUgPSBlbGVtZW50O1xuXG5cdFx0XHQvLyBIaWRlIGVycm9yIGxhYmVsIGFuZCByZW1vdmUgZXJyb3IgY2xhc3Mgb24gZm9jdXMgaWYgZW5hYmxlZFxuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLmZvY3VzQ2xlYW51cCApIHtcblx0XHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLnVuaGlnaGxpZ2h0ICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MudW5oaWdobGlnaHQuY2FsbCggdGhpcywgZWxlbWVudCwgdGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzLCB0aGlzLnNldHRpbmdzLnZhbGlkQ2xhc3MgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLmhpZGVUaGVzZSggdGhpcy5lcnJvcnNGb3IoIGVsZW1lbnQgKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0b25mb2N1c291dDogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHRpZiAoICF0aGlzLmNoZWNrYWJsZSggZWxlbWVudCApICYmICggZWxlbWVudC5uYW1lIGluIHRoaXMuc3VibWl0dGVkIHx8ICF0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgKSApIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50KCBlbGVtZW50ICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRvbmtleXVwOiBmdW5jdGlvbiggZWxlbWVudCwgZXZlbnQgKSB7XG5cblx0XHRcdC8vIEF2b2lkIHJldmFsaWRhdGUgdGhlIGZpZWxkIHdoZW4gcHJlc3Npbmcgb25lIG9mIHRoZSBmb2xsb3dpbmcga2V5c1xuXHRcdFx0Ly8gU2hpZnQgICAgICAgPT4gMTZcblx0XHRcdC8vIEN0cmwgICAgICAgID0+IDE3XG5cdFx0XHQvLyBBbHQgICAgICAgICA9PiAxOFxuXHRcdFx0Ly8gQ2FwcyBsb2NrICAgPT4gMjBcblx0XHRcdC8vIEVuZCAgICAgICAgID0+IDM1XG5cdFx0XHQvLyBIb21lICAgICAgICA9PiAzNlxuXHRcdFx0Ly8gTGVmdCBhcnJvdyAgPT4gMzdcblx0XHRcdC8vIFVwIGFycm93ICAgID0+IDM4XG5cdFx0XHQvLyBSaWdodCBhcnJvdyA9PiAzOVxuXHRcdFx0Ly8gRG93biBhcnJvdyAgPT4gNDBcblx0XHRcdC8vIEluc2VydCAgICAgID0+IDQ1XG5cdFx0XHQvLyBOdW0gbG9jayAgICA9PiAxNDRcblx0XHRcdC8vIEFsdEdyIGtleSAgID0+IDIyNVxuXHRcdFx0dmFyIGV4Y2x1ZGVkS2V5cyA9IFtcblx0XHRcdFx0MTYsIDE3LCAxOCwgMjAsIDM1LCAzNiwgMzcsXG5cdFx0XHRcdDM4LCAzOSwgNDAsIDQ1LCAxNDQsIDIyNVxuXHRcdFx0XTtcblxuXHRcdFx0aWYgKCBldmVudC53aGljaCA9PT0gOSAmJiB0aGlzLmVsZW1lbnRWYWx1ZSggZWxlbWVudCApID09PSBcIlwiIHx8ICQuaW5BcnJheSggZXZlbnQua2V5Q29kZSwgZXhjbHVkZWRLZXlzICkgIT09IC0xICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtZW50Lm5hbWUgaW4gdGhpcy5zdWJtaXR0ZWQgfHwgZWxlbWVudC5uYW1lIGluIHRoaXMuaW52YWxpZCApIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50KCBlbGVtZW50ICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRvbmNsaWNrOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblxuXHRcdFx0Ly8gQ2xpY2sgb24gc2VsZWN0cywgcmFkaW9idXR0b25zIGFuZCBjaGVja2JveGVzXG5cdFx0XHRpZiAoIGVsZW1lbnQubmFtZSBpbiB0aGlzLnN1Ym1pdHRlZCApIHtcblx0XHRcdFx0dGhpcy5lbGVtZW50KCBlbGVtZW50ICk7XG5cblx0XHRcdC8vIE9yIG9wdGlvbiBlbGVtZW50cywgY2hlY2sgcGFyZW50IHNlbGVjdCBpbiB0aGF0IGNhc2Vcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW1lbnQucGFyZW50Tm9kZS5uYW1lIGluIHRoaXMuc3VibWl0dGVkICkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQoIGVsZW1lbnQucGFyZW50Tm9kZSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0aGlnaGxpZ2h0OiBmdW5jdGlvbiggZWxlbWVudCwgZXJyb3JDbGFzcywgdmFsaWRDbGFzcyApIHtcblx0XHRcdGlmICggZWxlbWVudC50eXBlID09PSBcInJhZGlvXCIgKSB7XG5cdFx0XHRcdHRoaXMuZmluZEJ5TmFtZSggZWxlbWVudC5uYW1lICkuYWRkQ2xhc3MoIGVycm9yQ2xhc3MgKS5yZW1vdmVDbGFzcyggdmFsaWRDbGFzcyApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0JCggZWxlbWVudCApLmFkZENsYXNzKCBlcnJvckNsYXNzICkucmVtb3ZlQ2xhc3MoIHZhbGlkQ2xhc3MgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHVuaGlnaGxpZ2h0OiBmdW5jdGlvbiggZWxlbWVudCwgZXJyb3JDbGFzcywgdmFsaWRDbGFzcyApIHtcblx0XHRcdGlmICggZWxlbWVudC50eXBlID09PSBcInJhZGlvXCIgKSB7XG5cdFx0XHRcdHRoaXMuZmluZEJ5TmFtZSggZWxlbWVudC5uYW1lICkucmVtb3ZlQ2xhc3MoIGVycm9yQ2xhc3MgKS5hZGRDbGFzcyggdmFsaWRDbGFzcyApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0JCggZWxlbWVudCApLnJlbW92ZUNsYXNzKCBlcnJvckNsYXNzICkuYWRkQ2xhc3MoIHZhbGlkQ2xhc3MgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9qUXVlcnkudmFsaWRhdG9yLnNldERlZmF1bHRzL1xuXHRzZXREZWZhdWx0czogZnVuY3Rpb24oIHNldHRpbmdzICkge1xuXHRcdCQuZXh0ZW5kKCAkLnZhbGlkYXRvci5kZWZhdWx0cywgc2V0dGluZ3MgKTtcblx0fSxcblxuXHRtZXNzYWdlczoge1xuXHRcdHJlcXVpcmVkOiBcIlRoaXMgZmllbGQgaXMgcmVxdWlyZWQuXCIsXG5cdFx0cmVtb3RlOiBcIlBsZWFzZSBmaXggdGhpcyBmaWVsZC5cIixcblx0XHRlbWFpbDogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBlbWFpbCBhZGRyZXNzLlwiLFxuXHRcdHVybDogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBVUkwuXCIsXG5cdFx0ZGF0ZTogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBkYXRlLlwiLFxuXHRcdGRhdGVJU086IFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgZGF0ZSAoSVNPKS5cIixcblx0XHRudW1iZXI6IFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgbnVtYmVyLlwiLFxuXHRcdGRpZ2l0czogXCJQbGVhc2UgZW50ZXIgb25seSBkaWdpdHMuXCIsXG5cdFx0ZXF1YWxUbzogXCJQbGVhc2UgZW50ZXIgdGhlIHNhbWUgdmFsdWUgYWdhaW4uXCIsXG5cdFx0bWF4bGVuZ3RoOiAkLnZhbGlkYXRvci5mb3JtYXQoIFwiUGxlYXNlIGVudGVyIG5vIG1vcmUgdGhhbiB7MH0gY2hhcmFjdGVycy5cIiApLFxuXHRcdG1pbmxlbmd0aDogJC52YWxpZGF0b3IuZm9ybWF0KCBcIlBsZWFzZSBlbnRlciBhdCBsZWFzdCB7MH0gY2hhcmFjdGVycy5cIiApLFxuXHRcdHJhbmdlbGVuZ3RoOiAkLnZhbGlkYXRvci5mb3JtYXQoIFwiUGxlYXNlIGVudGVyIGEgdmFsdWUgYmV0d2VlbiB7MH0gYW5kIHsxfSBjaGFyYWN0ZXJzIGxvbmcuXCIgKSxcblx0XHRyYW5nZTogJC52YWxpZGF0b3IuZm9ybWF0KCBcIlBsZWFzZSBlbnRlciBhIHZhbHVlIGJldHdlZW4gezB9IGFuZCB7MX0uXCIgKSxcblx0XHRtYXg6ICQudmFsaWRhdG9yLmZvcm1hdCggXCJQbGVhc2UgZW50ZXIgYSB2YWx1ZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gezB9LlwiICksXG5cdFx0bWluOiAkLnZhbGlkYXRvci5mb3JtYXQoIFwiUGxlYXNlIGVudGVyIGEgdmFsdWUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHswfS5cIiApLFxuXHRcdHN0ZXA6ICQudmFsaWRhdG9yLmZvcm1hdCggXCJQbGVhc2UgZW50ZXIgYSBtdWx0aXBsZSBvZiB7MH0uXCIgKVxuXHR9LFxuXG5cdGF1dG9DcmVhdGVSYW5nZXM6IGZhbHNlLFxuXG5cdHByb3RvdHlwZToge1xuXG5cdFx0aW5pdDogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmxhYmVsQ29udGFpbmVyID0gJCggdGhpcy5zZXR0aW5ncy5lcnJvckxhYmVsQ29udGFpbmVyICk7XG5cdFx0XHR0aGlzLmVycm9yQ29udGV4dCA9IHRoaXMubGFiZWxDb250YWluZXIubGVuZ3RoICYmIHRoaXMubGFiZWxDb250YWluZXIgfHwgJCggdGhpcy5jdXJyZW50Rm9ybSApO1xuXHRcdFx0dGhpcy5jb250YWluZXJzID0gJCggdGhpcy5zZXR0aW5ncy5lcnJvckNvbnRhaW5lciApLmFkZCggdGhpcy5zZXR0aW5ncy5lcnJvckxhYmVsQ29udGFpbmVyICk7XG5cdFx0XHR0aGlzLnN1Ym1pdHRlZCA9IHt9O1xuXHRcdFx0dGhpcy52YWx1ZUNhY2hlID0ge307XG5cdFx0XHR0aGlzLnBlbmRpbmdSZXF1ZXN0ID0gMDtcblx0XHRcdHRoaXMucGVuZGluZyA9IHt9O1xuXHRcdFx0dGhpcy5pbnZhbGlkID0ge307XG5cdFx0XHR0aGlzLnJlc2V0KCk7XG5cblx0XHRcdHZhciBncm91cHMgPSAoIHRoaXMuZ3JvdXBzID0ge30gKSxcblx0XHRcdFx0cnVsZXM7XG5cdFx0XHQkLmVhY2goIHRoaXMuc2V0dGluZ3MuZ3JvdXBzLCBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZS5zcGxpdCggL1xccy8gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQkLmVhY2goIHZhbHVlLCBmdW5jdGlvbiggaW5kZXgsIG5hbWUgKSB7XG5cdFx0XHRcdFx0Z3JvdXBzWyBuYW1lIF0gPSBrZXk7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH0gKTtcblx0XHRcdHJ1bGVzID0gdGhpcy5zZXR0aW5ncy5ydWxlcztcblx0XHRcdCQuZWFjaCggcnVsZXMsIGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRydWxlc1sga2V5IF0gPSAkLnZhbGlkYXRvci5ub3JtYWxpemVSdWxlKCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXG5cdFx0XHRmdW5jdGlvbiBkZWxlZ2F0ZSggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IGZvcm0gZXhwYW5kbyBvbiBjb250ZW50ZWRpdGFibGVcblx0XHRcdFx0aWYgKCAhdGhpcy5mb3JtICYmIHRoaXMuaGFzQXR0cmlidXRlKCBcImNvbnRlbnRlZGl0YWJsZVwiICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb3JtID0gJCggdGhpcyApLmNsb3Nlc3QoIFwiZm9ybVwiIClbIDAgXTtcblx0XHRcdFx0XHR0aGlzLm5hbWUgPSAkKCB0aGlzICkuYXR0ciggXCJuYW1lXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciB2YWxpZGF0b3IgPSAkLmRhdGEoIHRoaXMuZm9ybSwgXCJ2YWxpZGF0b3JcIiApLFxuXHRcdFx0XHRcdGV2ZW50VHlwZSA9IFwib25cIiArIGV2ZW50LnR5cGUucmVwbGFjZSggL152YWxpZGF0ZS8sIFwiXCIgKSxcblx0XHRcdFx0XHRzZXR0aW5ncyA9IHZhbGlkYXRvci5zZXR0aW5ncztcblx0XHRcdFx0aWYgKCBzZXR0aW5nc1sgZXZlbnRUeXBlIF0gJiYgISQoIHRoaXMgKS5pcyggc2V0dGluZ3MuaWdub3JlICkgKSB7XG5cdFx0XHRcdFx0c2V0dGluZ3NbIGV2ZW50VHlwZSBdLmNhbGwoIHZhbGlkYXRvciwgdGhpcywgZXZlbnQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtIClcblx0XHRcdFx0Lm9uKCBcImZvY3VzaW4udmFsaWRhdGUgZm9jdXNvdXQudmFsaWRhdGUga2V5dXAudmFsaWRhdGVcIixcblx0XHRcdFx0XHRcIjp0ZXh0LCBbdHlwZT0ncGFzc3dvcmQnXSwgW3R5cGU9J2ZpbGUnXSwgc2VsZWN0LCB0ZXh0YXJlYSwgW3R5cGU9J251bWJlciddLCBbdHlwZT0nc2VhcmNoJ10sIFwiICtcblx0XHRcdFx0XHRcIlt0eXBlPSd0ZWwnXSwgW3R5cGU9J3VybCddLCBbdHlwZT0nZW1haWwnXSwgW3R5cGU9J2RhdGV0aW1lJ10sIFt0eXBlPSdkYXRlJ10sIFt0eXBlPSdtb250aCddLCBcIiArXG5cdFx0XHRcdFx0XCJbdHlwZT0nd2VlayddLCBbdHlwZT0ndGltZSddLCBbdHlwZT0nZGF0ZXRpbWUtbG9jYWwnXSwgW3R5cGU9J3JhbmdlJ10sIFt0eXBlPSdjb2xvciddLCBcIiArXG5cdFx0XHRcdFx0XCJbdHlwZT0ncmFkaW8nXSwgW3R5cGU9J2NoZWNrYm94J10sIFtjb250ZW50ZWRpdGFibGVdLCBbdHlwZT0nYnV0dG9uJ11cIiwgZGVsZWdhdGUgKVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSwgb2xkSUVcblx0XHRcdFx0Ly8gXCJzZWxlY3RcIiBpcyBwcm92aWRlZCBhcyBldmVudC50YXJnZXQgd2hlbiBjbGlja2luZyBhIG9wdGlvblxuXHRcdFx0XHQub24oIFwiY2xpY2sudmFsaWRhdGVcIiwgXCJzZWxlY3QsIG9wdGlvbiwgW3R5cGU9J3JhZGlvJ10sIFt0eXBlPSdjaGVja2JveCddXCIsIGRlbGVnYXRlICk7XG5cblx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy5pbnZhbGlkSGFuZGxlciApIHtcblx0XHRcdFx0JCggdGhpcy5jdXJyZW50Rm9ybSApLm9uKCBcImludmFsaWQtZm9ybS52YWxpZGF0ZVwiLCB0aGlzLnNldHRpbmdzLmludmFsaWRIYW5kbGVyICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvVmFsaWRhdG9yLmZvcm0vXG5cdFx0Zm9ybTogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmNoZWNrRm9ybSgpO1xuXHRcdFx0JC5leHRlbmQoIHRoaXMuc3VibWl0dGVkLCB0aGlzLmVycm9yTWFwICk7XG5cdFx0XHR0aGlzLmludmFsaWQgPSAkLmV4dGVuZCgge30sIHRoaXMuZXJyb3JNYXAgKTtcblx0XHRcdGlmICggIXRoaXMudmFsaWQoKSApIHtcblx0XHRcdFx0JCggdGhpcy5jdXJyZW50Rm9ybSApLnRyaWdnZXJIYW5kbGVyKCBcImludmFsaWQtZm9ybVwiLCBbIHRoaXMgXSApO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5zaG93RXJyb3JzKCk7XG5cdFx0XHRyZXR1cm4gdGhpcy52YWxpZCgpO1xuXHRcdH0sXG5cblx0XHRjaGVja0Zvcm06IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5wcmVwYXJlRm9ybSgpO1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBlbGVtZW50cyA9ICggdGhpcy5jdXJyZW50RWxlbWVudHMgPSB0aGlzLmVsZW1lbnRzKCkgKTsgZWxlbWVudHNbIGkgXTsgaSsrICkge1xuXHRcdFx0XHR0aGlzLmNoZWNrKCBlbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy52YWxpZCgpO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL1ZhbGlkYXRvci5lbGVtZW50L1xuXHRcdGVsZW1lbnQ6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0dmFyIGNsZWFuRWxlbWVudCA9IHRoaXMuY2xlYW4oIGVsZW1lbnQgKSxcblx0XHRcdFx0Y2hlY2tFbGVtZW50ID0gdGhpcy52YWxpZGF0aW9uVGFyZ2V0Rm9yKCBjbGVhbkVsZW1lbnQgKSxcblx0XHRcdFx0diA9IHRoaXMsXG5cdFx0XHRcdHJlc3VsdCA9IHRydWUsXG5cdFx0XHRcdHJzLCBncm91cDtcblxuXHRcdFx0aWYgKCBjaGVja0VsZW1lbnQgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0ZGVsZXRlIHRoaXMuaW52YWxpZFsgY2xlYW5FbGVtZW50Lm5hbWUgXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMucHJlcGFyZUVsZW1lbnQoIGNoZWNrRWxlbWVudCApO1xuXHRcdFx0XHR0aGlzLmN1cnJlbnRFbGVtZW50cyA9ICQoIGNoZWNrRWxlbWVudCApO1xuXG5cdFx0XHRcdC8vIElmIHRoaXMgZWxlbWVudCBpcyBncm91cGVkLCB0aGVuIHZhbGlkYXRlIGFsbCBncm91cCBlbGVtZW50cyBhbHJlYWR5XG5cdFx0XHRcdC8vIGNvbnRhaW5pbmcgYSB2YWx1ZVxuXHRcdFx0XHRncm91cCA9IHRoaXMuZ3JvdXBzWyBjaGVja0VsZW1lbnQubmFtZSBdO1xuXHRcdFx0XHRpZiAoIGdyb3VwICkge1xuXHRcdFx0XHRcdCQuZWFjaCggdGhpcy5ncm91cHMsIGZ1bmN0aW9uKCBuYW1lLCB0ZXN0Z3JvdXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIHRlc3Rncm91cCA9PT0gZ3JvdXAgJiYgbmFtZSAhPT0gY2hlY2tFbGVtZW50Lm5hbWUgKSB7XG5cdFx0XHRcdFx0XHRcdGNsZWFuRWxlbWVudCA9IHYudmFsaWRhdGlvblRhcmdldEZvciggdi5jbGVhbiggdi5maW5kQnlOYW1lKCBuYW1lICkgKSApO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNsZWFuRWxlbWVudCAmJiBjbGVhbkVsZW1lbnQubmFtZSBpbiB2LmludmFsaWQgKSB7XG5cdFx0XHRcdFx0XHRcdFx0di5jdXJyZW50RWxlbWVudHMucHVzaCggY2xlYW5FbGVtZW50ICk7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0ID0gdi5jaGVjayggY2xlYW5FbGVtZW50ICkgJiYgcmVzdWx0O1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cnMgPSB0aGlzLmNoZWNrKCBjaGVja0VsZW1lbnQgKSAhPT0gZmFsc2U7XG5cdFx0XHRcdHJlc3VsdCA9IHJlc3VsdCAmJiBycztcblx0XHRcdFx0aWYgKCBycyApIHtcblx0XHRcdFx0XHR0aGlzLmludmFsaWRbIGNoZWNrRWxlbWVudC5uYW1lIF0gPSBmYWxzZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLmludmFsaWRbIGNoZWNrRWxlbWVudC5uYW1lIF0gPSB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCAhdGhpcy5udW1iZXJPZkludmFsaWRzKCkgKSB7XG5cblx0XHRcdFx0XHQvLyBIaWRlIGVycm9yIGNvbnRhaW5lcnMgb24gbGFzdCBlcnJvclxuXHRcdFx0XHRcdHRoaXMudG9IaWRlID0gdGhpcy50b0hpZGUuYWRkKCB0aGlzLmNvbnRhaW5lcnMgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLnNob3dFcnJvcnMoKTtcblxuXHRcdFx0XHQvLyBBZGQgYXJpYS1pbnZhbGlkIHN0YXR1cyBmb3Igc2NyZWVuIHJlYWRlcnNcblx0XHRcdFx0JCggZWxlbWVudCApLmF0dHIoIFwiYXJpYS1pbnZhbGlkXCIsICFycyApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL1ZhbGlkYXRvci5zaG93RXJyb3JzL1xuXHRcdHNob3dFcnJvcnM6IGZ1bmN0aW9uKCBlcnJvcnMgKSB7XG5cdFx0XHRpZiAoIGVycm9ycyApIHtcblx0XHRcdFx0dmFyIHZhbGlkYXRvciA9IHRoaXM7XG5cblx0XHRcdFx0Ly8gQWRkIGl0ZW1zIHRvIGVycm9yIGxpc3QgYW5kIG1hcFxuXHRcdFx0XHQkLmV4dGVuZCggdGhpcy5lcnJvck1hcCwgZXJyb3JzICk7XG5cdFx0XHRcdHRoaXMuZXJyb3JMaXN0ID0gJC5tYXAoIHRoaXMuZXJyb3JNYXAsIGZ1bmN0aW9uKCBtZXNzYWdlLCBuYW1lICkge1xuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRtZXNzYWdlOiBtZXNzYWdlLFxuXHRcdFx0XHRcdFx0ZWxlbWVudDogdmFsaWRhdG9yLmZpbmRCeU5hbWUoIG5hbWUgKVsgMCBdXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBpdGVtcyBmcm9tIHN1Y2Nlc3MgbGlzdFxuXHRcdFx0XHR0aGlzLnN1Y2Nlc3NMaXN0ID0gJC5ncmVwKCB0aGlzLnN1Y2Nlc3NMaXN0LCBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdFx0XHRyZXR1cm4gISggZWxlbWVudC5uYW1lIGluIGVycm9ycyApO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3Muc2hvd0Vycm9ycyApIHtcblx0XHRcdFx0dGhpcy5zZXR0aW5ncy5zaG93RXJyb3JzLmNhbGwoIHRoaXMsIHRoaXMuZXJyb3JNYXAsIHRoaXMuZXJyb3JMaXN0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmRlZmF1bHRTaG93RXJyb3JzKCk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvVmFsaWRhdG9yLnJlc2V0Rm9ybS9cblx0XHRyZXNldEZvcm06IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAkLmZuLnJlc2V0Rm9ybSApIHtcblx0XHRcdFx0JCggdGhpcy5jdXJyZW50Rm9ybSApLnJlc2V0Rm9ybSgpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5pbnZhbGlkID0ge307XG5cdFx0XHR0aGlzLnN1Ym1pdHRlZCA9IHt9O1xuXHRcdFx0dGhpcy5wcmVwYXJlRm9ybSgpO1xuXHRcdFx0dGhpcy5oaWRlRXJyb3JzKCk7XG5cdFx0XHR2YXIgZWxlbWVudHMgPSB0aGlzLmVsZW1lbnRzKClcblx0XHRcdFx0LnJlbW92ZURhdGEoIFwicHJldmlvdXNWYWx1ZVwiIClcblx0XHRcdFx0LnJlbW92ZUF0dHIoIFwiYXJpYS1pbnZhbGlkXCIgKTtcblxuXHRcdFx0dGhpcy5yZXNldEVsZW1lbnRzKCBlbGVtZW50cyApO1xuXHRcdH0sXG5cblx0XHRyZXNldEVsZW1lbnRzOiBmdW5jdGlvbiggZWxlbWVudHMgKSB7XG5cdFx0XHR2YXIgaTtcblxuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLnVuaGlnaGxpZ2h0ICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgZWxlbWVudHNbIGkgXTsgaSsrICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MudW5oaWdobGlnaHQuY2FsbCggdGhpcywgZWxlbWVudHNbIGkgXSxcblx0XHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcywgXCJcIiApO1xuXHRcdFx0XHRcdHRoaXMuZmluZEJ5TmFtZSggZWxlbWVudHNbIGkgXS5uYW1lICkucmVtb3ZlQ2xhc3MoIHRoaXMuc2V0dGluZ3MudmFsaWRDbGFzcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50c1xuXHRcdFx0XHRcdC5yZW1vdmVDbGFzcyggdGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzIClcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIHRoaXMuc2V0dGluZ3MudmFsaWRDbGFzcyApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRudW1iZXJPZkludmFsaWRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLm9iamVjdExlbmd0aCggdGhpcy5pbnZhbGlkICk7XG5cdFx0fSxcblxuXHRcdG9iamVjdExlbmd0aDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdC8qIGpzaGludCB1bnVzZWQ6IGZhbHNlICovXG5cdFx0XHR2YXIgY291bnQgPSAwLFxuXHRcdFx0XHRpO1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cblx0XHRcdFx0Ly8gVGhpcyBjaGVjayBhbGxvd3MgY291bnRpbmcgZWxlbWVudHMgd2l0aCBlbXB0eSBlcnJvclxuXHRcdFx0XHQvLyBtZXNzYWdlIGFzIGludmFsaWQgZWxlbWVudHNcblx0XHRcdFx0aWYgKCBvYmpbIGkgXSAhPT0gdW5kZWZpbmVkICYmIG9ialsgaSBdICE9PSBudWxsICYmIG9ialsgaSBdICE9PSBmYWxzZSApIHtcblx0XHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gY291bnQ7XG5cdFx0fSxcblxuXHRcdGhpZGVFcnJvcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5oaWRlVGhlc2UoIHRoaXMudG9IaWRlICk7XG5cdFx0fSxcblxuXHRcdGhpZGVUaGVzZTogZnVuY3Rpb24oIGVycm9ycyApIHtcblx0XHRcdGVycm9ycy5ub3QoIHRoaXMuY29udGFpbmVycyApLnRleHQoIFwiXCIgKTtcblx0XHRcdHRoaXMuYWRkV3JhcHBlciggZXJyb3JzICkuaGlkZSgpO1xuXHRcdH0sXG5cblx0XHR2YWxpZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5zaXplKCkgPT09IDA7XG5cdFx0fSxcblxuXHRcdHNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZXJyb3JMaXN0Lmxlbmd0aDtcblx0XHR9LFxuXG5cdFx0Zm9jdXNJbnZhbGlkOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy5mb2N1c0ludmFsaWQgKSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0JCggdGhpcy5maW5kTGFzdEFjdGl2ZSgpIHx8IHRoaXMuZXJyb3JMaXN0Lmxlbmd0aCAmJiB0aGlzLmVycm9yTGlzdFsgMCBdLmVsZW1lbnQgfHwgW10gKVxuXHRcdFx0XHRcdC5maWx0ZXIoIFwiOnZpc2libGVcIiApXG5cdFx0XHRcdFx0LmZvY3VzKClcblxuXHRcdFx0XHRcdC8vIE1hbnVhbGx5IHRyaWdnZXIgZm9jdXNpbiBldmVudDsgd2l0aG91dCBpdCwgZm9jdXNpbiBoYW5kbGVyIGlzbid0IGNhbGxlZCwgZmluZExhc3RBY3RpdmUgd29uJ3QgaGF2ZSBhbnl0aGluZyB0byBmaW5kXG5cdFx0XHRcdFx0LnRyaWdnZXIoIFwiZm9jdXNpblwiICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gSWdub3JlIElFIHRocm93aW5nIGVycm9ycyB3aGVuIGZvY3VzaW5nIGhpZGRlbiBlbGVtZW50c1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGZpbmRMYXN0QWN0aXZlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBsYXN0QWN0aXZlID0gdGhpcy5sYXN0QWN0aXZlO1xuXHRcdFx0cmV0dXJuIGxhc3RBY3RpdmUgJiYgJC5ncmVwKCB0aGlzLmVycm9yTGlzdCwgZnVuY3Rpb24oIG4gKSB7XG5cdFx0XHRcdHJldHVybiBuLmVsZW1lbnQubmFtZSA9PT0gbGFzdEFjdGl2ZS5uYW1lO1xuXHRcdFx0fSApLmxlbmd0aCA9PT0gMSAmJiBsYXN0QWN0aXZlO1xuXHRcdH0sXG5cblx0XHRlbGVtZW50czogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdmFsaWRhdG9yID0gdGhpcyxcblx0XHRcdFx0cnVsZXNDYWNoZSA9IHt9O1xuXG5cdFx0XHQvLyBTZWxlY3QgYWxsIHZhbGlkIGlucHV0cyBpbnNpZGUgdGhlIGZvcm0gKG5vIHN1Ym1pdCBvciByZXNldCBidXR0b25zKVxuXHRcdFx0cmV0dXJuICQoIHRoaXMuY3VycmVudEZvcm0gKVxuXHRcdFx0LmZpbmQoIFwiaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIFtjb250ZW50ZWRpdGFibGVdXCIgKVxuXHRcdFx0Lm5vdCggXCI6c3VibWl0LCA6cmVzZXQsIDppbWFnZSwgOmRpc2FibGVkXCIgKVxuXHRcdFx0Lm5vdCggdGhpcy5zZXR0aW5ncy5pZ25vcmUgKVxuXHRcdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBuYW1lID0gdGhpcy5uYW1lIHx8ICQoIHRoaXMgKS5hdHRyKCBcIm5hbWVcIiApOyAvLyBGb3IgY29udGVudGVkaXRhYmxlXG5cdFx0XHRcdGlmICggIW5hbWUgJiYgdmFsaWRhdG9yLnNldHRpbmdzLmRlYnVnICYmIHdpbmRvdy5jb25zb2xlICkge1xuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoIFwiJW8gaGFzIG5vIG5hbWUgYXNzaWduZWRcIiwgdGhpcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGZvcm0gZXhwYW5kbyBvbiBjb250ZW50ZWRpdGFibGVcblx0XHRcdFx0aWYgKCB0aGlzLmhhc0F0dHJpYnV0ZSggXCJjb250ZW50ZWRpdGFibGVcIiApICkge1xuXHRcdFx0XHRcdHRoaXMuZm9ybSA9ICQoIHRoaXMgKS5jbG9zZXN0KCBcImZvcm1cIiApWyAwIF07XG5cdFx0XHRcdFx0dGhpcy5uYW1lID0gbmFtZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNlbGVjdCBvbmx5IHRoZSBmaXJzdCBlbGVtZW50IGZvciBlYWNoIG5hbWUsIGFuZCBvbmx5IHRob3NlIHdpdGggcnVsZXMgc3BlY2lmaWVkXG5cdFx0XHRcdGlmICggbmFtZSBpbiBydWxlc0NhY2hlIHx8ICF2YWxpZGF0b3Iub2JqZWN0TGVuZ3RoKCAkKCB0aGlzICkucnVsZXMoKSApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJ1bGVzQ2FjaGVbIG5hbWUgXSA9IHRydWU7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSApO1xuXHRcdH0sXG5cblx0XHRjbGVhbjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuICQoIHNlbGVjdG9yIClbIDAgXTtcblx0XHR9LFxuXG5cdFx0ZXJyb3JzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBlcnJvckNsYXNzID0gdGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzLnNwbGl0KCBcIiBcIiApLmpvaW4oIFwiLlwiICk7XG5cdFx0XHRyZXR1cm4gJCggdGhpcy5zZXR0aW5ncy5lcnJvckVsZW1lbnQgKyBcIi5cIiArIGVycm9yQ2xhc3MsIHRoaXMuZXJyb3JDb250ZXh0ICk7XG5cdFx0fSxcblxuXHRcdHJlc2V0SW50ZXJuYWxzOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuc3VjY2Vzc0xpc3QgPSBbXTtcblx0XHRcdHRoaXMuZXJyb3JMaXN0ID0gW107XG5cdFx0XHR0aGlzLmVycm9yTWFwID0ge307XG5cdFx0XHR0aGlzLnRvU2hvdyA9ICQoIFtdICk7XG5cdFx0XHR0aGlzLnRvSGlkZSA9ICQoIFtdICk7XG5cdFx0fSxcblxuXHRcdHJlc2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMucmVzZXRJbnRlcm5hbHMoKTtcblx0XHRcdHRoaXMuY3VycmVudEVsZW1lbnRzID0gJCggW10gKTtcblx0XHR9LFxuXG5cdFx0cHJlcGFyZUZvcm06IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5yZXNldCgpO1xuXHRcdFx0dGhpcy50b0hpZGUgPSB0aGlzLmVycm9ycygpLmFkZCggdGhpcy5jb250YWluZXJzICk7XG5cdFx0fSxcblxuXHRcdHByZXBhcmVFbGVtZW50OiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHRoaXMucmVzZXQoKTtcblx0XHRcdHRoaXMudG9IaWRlID0gdGhpcy5lcnJvcnNGb3IoIGVsZW1lbnQgKTtcblx0XHR9LFxuXG5cdFx0ZWxlbWVudFZhbHVlOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHZhciAkZWxlbWVudCA9ICQoIGVsZW1lbnQgKSxcblx0XHRcdFx0dHlwZSA9IGVsZW1lbnQudHlwZSxcblx0XHRcdFx0dmFsLCBpZHg7XG5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJyYWRpb1wiIHx8IHR5cGUgPT09IFwiY2hlY2tib3hcIiApIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZmluZEJ5TmFtZSggZWxlbWVudC5uYW1lICkuZmlsdGVyKCBcIjpjaGVja2VkXCIgKS52YWwoKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIGVsZW1lbnQudmFsaWRpdHkgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtZW50LnZhbGlkaXR5LmJhZElucHV0ID8gXCJOYU5cIiA6ICRlbGVtZW50LnZhbCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW1lbnQuaGFzQXR0cmlidXRlKCBcImNvbnRlbnRlZGl0YWJsZVwiICkgKSB7XG5cdFx0XHRcdHZhbCA9ICRlbGVtZW50LnRleHQoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9ICRlbGVtZW50LnZhbCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZmlsZVwiICkge1xuXG5cdFx0XHRcdC8vIE1vZGVybiBicm93c2VyIChjaHJvbWUgJiBzYWZhcmkpXG5cdFx0XHRcdGlmICggdmFsLnN1YnN0ciggMCwgMTIgKSA9PT0gXCJDOlxcXFxmYWtlcGF0aFxcXFxcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsLnN1YnN0ciggMTIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExlZ2FjeSBicm93c2Vyc1xuXHRcdFx0XHQvLyBVbml4LWJhc2VkIHBhdGhcblx0XHRcdFx0aWR4ID0gdmFsLmxhc3RJbmRleE9mKCBcIi9cIiApO1xuXHRcdFx0XHRpZiAoIGlkeCA+PSAwICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWwuc3Vic3RyKCBpZHggKyAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXaW5kb3dzLWJhc2VkIHBhdGhcblx0XHRcdFx0aWR4ID0gdmFsLmxhc3RJbmRleE9mKCBcIlxcXFxcIiApO1xuXHRcdFx0XHRpZiAoIGlkeCA+PSAwICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWwuc3Vic3RyKCBpZHggKyAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBKdXN0IHRoZSBmaWxlIG5hbWVcblx0XHRcdFx0cmV0dXJuIHZhbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRyZXR1cm4gdmFsLnJlcGxhY2UoIC9cXHIvZywgXCJcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9LFxuXG5cdFx0Y2hlY2s6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0ZWxlbWVudCA9IHRoaXMudmFsaWRhdGlvblRhcmdldEZvciggdGhpcy5jbGVhbiggZWxlbWVudCApICk7XG5cblx0XHRcdHZhciBydWxlcyA9ICQoIGVsZW1lbnQgKS5ydWxlcygpLFxuXHRcdFx0XHRydWxlc0NvdW50ID0gJC5tYXAoIHJ1bGVzLCBmdW5jdGlvbiggbiwgaSApIHtcblx0XHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdFx0fSApLmxlbmd0aCxcblx0XHRcdFx0ZGVwZW5kZW5jeU1pc21hdGNoID0gZmFsc2UsXG5cdFx0XHRcdHZhbCA9IHRoaXMuZWxlbWVudFZhbHVlKCBlbGVtZW50ICksXG5cdFx0XHRcdHJlc3VsdCwgbWV0aG9kLCBydWxlLCBub3JtYWxpemVyO1xuXG5cdFx0XHQvLyBQcmlvcml0aXplIHRoZSBsb2NhbCBub3JtYWxpemVyIGRlZmluZWQgZm9yIHRoaXMgZWxlbWVudCBvdmVyIHRoZSBnbG9iYWwgb25lXG5cdFx0XHQvLyBpZiB0aGUgZm9ybWVyIGV4aXN0cywgb3RoZXJ3aXNlIHVzZXIgdGhlIGdsb2JhbCBvbmUgaW4gY2FzZSBpdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR5cGVvZiBydWxlcy5ub3JtYWxpemVyID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdFx0XHRcdG5vcm1hbGl6ZXIgPSBydWxlcy5ub3JtYWxpemVyO1xuXHRcdFx0fSBlbHNlIGlmIChcdHR5cGVvZiB0aGlzLnNldHRpbmdzLm5vcm1hbGl6ZXIgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0XHRcdFx0bm9ybWFsaXplciA9IHRoaXMuc2V0dGluZ3Mubm9ybWFsaXplcjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgbm9ybWFsaXplciBpcyBkZWZpbmVkLCB0aGVuIGNhbGwgaXQgdG8gcmV0cmVpdmUgdGhlIGNoYW5nZWQgdmFsdWUgaW5zdGVhZFxuXHRcdFx0Ly8gb2YgdXNpbmcgdGhlIHJlYWwgb25lLlxuXHRcdFx0Ly8gTm90ZSB0aGF0IGB0aGlzYCBpbiB0aGUgbm9ybWFsaXplciBpcyBgZWxlbWVudGAuXG5cdFx0XHRpZiAoIG5vcm1hbGl6ZXIgKSB7XG5cdFx0XHRcdHZhbCA9IG5vcm1hbGl6ZXIuY2FsbCggZWxlbWVudCwgdmFsICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlb2YgdmFsICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlIG5vcm1hbGl6ZXIgc2hvdWxkIHJldHVybiBhIHN0cmluZyB2YWx1ZS5cIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRGVsZXRlIHRoZSBub3JtYWxpemVyIGZyb20gcnVsZXMgdG8gYXZvaWQgdHJlYXRpbmcgaXQgYXMgYSBwcmUtZGVmaW5lZCBtZXRob2QuXG5cdFx0XHRcdGRlbGV0ZSBydWxlcy5ub3JtYWxpemVyO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBtZXRob2QgaW4gcnVsZXMgKSB7XG5cdFx0XHRcdHJ1bGUgPSB7IG1ldGhvZDogbWV0aG9kLCBwYXJhbWV0ZXJzOiBydWxlc1sgbWV0aG9kIF0gfTtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRyZXN1bHQgPSAkLnZhbGlkYXRvci5tZXRob2RzWyBtZXRob2QgXS5jYWxsKCB0aGlzLCB2YWwsIGVsZW1lbnQsIHJ1bGUucGFyYW1ldGVycyApO1xuXG5cdFx0XHRcdFx0Ly8gSWYgYSBtZXRob2QgaW5kaWNhdGVzIHRoYXQgdGhlIGZpZWxkIGlzIG9wdGlvbmFsIGFuZCB0aGVyZWZvcmUgdmFsaWQsXG5cdFx0XHRcdFx0Ly8gZG9uJ3QgbWFyayBpdCBhcyB2YWxpZCB3aGVuIHRoZXJlIGFyZSBubyBvdGhlciBydWxlc1xuXHRcdFx0XHRcdGlmICggcmVzdWx0ID09PSBcImRlcGVuZGVuY3ktbWlzbWF0Y2hcIiAmJiBydWxlc0NvdW50ID09PSAxICkge1xuXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeU1pc21hdGNoID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkZXBlbmRlbmN5TWlzbWF0Y2ggPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcmVzdWx0ID09PSBcInBlbmRpbmdcIiApIHtcblx0XHRcdFx0XHRcdHRoaXMudG9IaWRlID0gdGhpcy50b0hpZGUubm90KCB0aGlzLmVycm9yc0ZvciggZWxlbWVudCApICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCAhcmVzdWx0ICkge1xuXHRcdFx0XHRcdFx0dGhpcy5mb3JtYXRBbmRBZGQoIGVsZW1lbnQsIHJ1bGUgKTtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy5kZWJ1ZyAmJiB3aW5kb3cuY29uc29sZSApIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCBcIkV4Y2VwdGlvbiBvY2N1cnJlZCB3aGVuIGNoZWNraW5nIGVsZW1lbnQgXCIgKyBlbGVtZW50LmlkICsgXCIsIGNoZWNrIHRoZSAnXCIgKyBydWxlLm1ldGhvZCArIFwiJyBtZXRob2QuXCIsIGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBlIGluc3RhbmNlb2YgVHlwZUVycm9yICkge1xuXHRcdFx0XHRcdFx0ZS5tZXNzYWdlICs9IFwiLiAgRXhjZXB0aW9uIG9jY3VycmVkIHdoZW4gY2hlY2tpbmcgZWxlbWVudCBcIiArIGVsZW1lbnQuaWQgKyBcIiwgY2hlY2sgdGhlICdcIiArIHJ1bGUubWV0aG9kICsgXCInIG1ldGhvZC5cIjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGRlcGVuZGVuY3lNaXNtYXRjaCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB0aGlzLm9iamVjdExlbmd0aCggcnVsZXMgKSApIHtcblx0XHRcdFx0dGhpcy5zdWNjZXNzTGlzdC5wdXNoKCBlbGVtZW50ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjdXN0b20gbWVzc2FnZSBmb3IgdGhlIGdpdmVuIGVsZW1lbnQgYW5kIHZhbGlkYXRpb24gbWV0aG9kXG5cdFx0Ly8gc3BlY2lmaWVkIGluIHRoZSBlbGVtZW50J3MgSFRNTDUgZGF0YSBhdHRyaWJ1dGVcblx0XHQvLyByZXR1cm4gdGhlIGdlbmVyaWMgbWVzc2FnZSBpZiBwcmVzZW50IGFuZCBubyBtZXRob2Qgc3BlY2lmaWMgbWVzc2FnZSBpcyBwcmVzZW50XG5cdFx0Y3VzdG9tRGF0YU1lc3NhZ2U6IGZ1bmN0aW9uKCBlbGVtZW50LCBtZXRob2QgKSB7XG5cdFx0XHRyZXR1cm4gJCggZWxlbWVudCApLmRhdGEoIFwibXNnXCIgKyBtZXRob2QuY2hhckF0KCAwICkudG9VcHBlckNhc2UoKSArXG5cdFx0XHRcdG1ldGhvZC5zdWJzdHJpbmcoIDEgKS50b0xvd2VyQ2FzZSgpICkgfHwgJCggZWxlbWVudCApLmRhdGEoIFwibXNnXCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjdXN0b20gbWVzc2FnZSBmb3IgdGhlIGdpdmVuIGVsZW1lbnQgbmFtZSBhbmQgdmFsaWRhdGlvbiBtZXRob2Rcblx0XHRjdXN0b21NZXNzYWdlOiBmdW5jdGlvbiggbmFtZSwgbWV0aG9kICkge1xuXHRcdFx0dmFyIG0gPSB0aGlzLnNldHRpbmdzLm1lc3NhZ2VzWyBuYW1lIF07XG5cdFx0XHRyZXR1cm4gbSAmJiAoIG0uY29uc3RydWN0b3IgPT09IFN0cmluZyA/IG0gOiBtWyBtZXRob2QgXSApO1xuXHRcdH0sXG5cblx0XHQvLyBSZXR1cm4gdGhlIGZpcnN0IGRlZmluZWQgYXJndW1lbnQsIGFsbG93aW5nIGVtcHR5IHN0cmluZ3Ncblx0XHRmaW5kRGVmaW5lZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYXJndW1lbnRzWyBpIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gYXJndW1lbnRzWyBpIF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fSxcblxuXHRcdC8vIFRoZSBzZWNvbmQgcGFyYW1ldGVyICdydWxlJyB1c2VkIHRvIGJlIGEgc3RyaW5nLCBhbmQgZXh0ZW5kZWQgdG8gYW4gb2JqZWN0IGxpdGVyYWxcblx0XHQvLyBvZiB0aGUgZm9sbG93aW5nIGZvcm06XG5cdFx0Ly8gcnVsZSA9IHtcblx0XHQvLyAgICAgbWV0aG9kOiBcIm1ldGhvZCBuYW1lXCIsXG5cdFx0Ly8gICAgIHBhcmFtZXRlcnM6IFwidGhlIGdpdmVuIG1ldGhvZCBwYXJhbWV0ZXJzXCJcblx0XHQvLyB9XG5cdFx0Ly9cblx0XHQvLyBUaGUgb2xkIGJlaGF2aW9yIHN0aWxsIHN1cHBvcnRlZCwga2VwdCB0byBtYWludGFpbiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGhcblx0XHQvLyBvbGQgY29kZSwgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlxuXHRcdGRlZmF1bHRNZXNzYWdlOiBmdW5jdGlvbiggZWxlbWVudCwgcnVsZSApIHtcblx0XHRcdGlmICggdHlwZW9mIHJ1bGUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdHJ1bGUgPSB7IG1ldGhvZDogcnVsZSB9O1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbWVzc2FnZSA9IHRoaXMuZmluZERlZmluZWQoXG5cdFx0XHRcdFx0dGhpcy5jdXN0b21NZXNzYWdlKCBlbGVtZW50Lm5hbWUsIHJ1bGUubWV0aG9kICksXG5cdFx0XHRcdFx0dGhpcy5jdXN0b21EYXRhTWVzc2FnZSggZWxlbWVudCwgcnVsZS5tZXRob2QgKSxcblxuXHRcdFx0XHRcdC8vICd0aXRsZScgaXMgbmV2ZXIgdW5kZWZpbmVkLCBzbyBoYW5kbGUgZW1wdHkgc3RyaW5nIGFzIHVuZGVmaW5lZFxuXHRcdFx0XHRcdCF0aGlzLnNldHRpbmdzLmlnbm9yZVRpdGxlICYmIGVsZW1lbnQudGl0bGUgfHwgdW5kZWZpbmVkLFxuXHRcdFx0XHRcdCQudmFsaWRhdG9yLm1lc3NhZ2VzWyBydWxlLm1ldGhvZCBdLFxuXHRcdFx0XHRcdFwiPHN0cm9uZz5XYXJuaW5nOiBObyBtZXNzYWdlIGRlZmluZWQgZm9yIFwiICsgZWxlbWVudC5uYW1lICsgXCI8L3N0cm9uZz5cIlxuXHRcdFx0XHQpLFxuXHRcdFx0XHR0aGVyZWdleCA9IC9cXCQ/XFx7KFxcZCspXFx9L2c7XG5cdFx0XHRpZiAoIHR5cGVvZiBtZXNzYWdlID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdFx0XHRcdG1lc3NhZ2UgPSBtZXNzYWdlLmNhbGwoIHRoaXMsIHJ1bGUucGFyYW1ldGVycywgZWxlbWVudCApO1xuXHRcdFx0fSBlbHNlIGlmICggdGhlcmVnZXgudGVzdCggbWVzc2FnZSApICkge1xuXHRcdFx0XHRtZXNzYWdlID0gJC52YWxpZGF0b3IuZm9ybWF0KCBtZXNzYWdlLnJlcGxhY2UoIHRoZXJlZ2V4LCBcInskMX1cIiApLCBydWxlLnBhcmFtZXRlcnMgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1lc3NhZ2U7XG5cdFx0fSxcblxuXHRcdGZvcm1hdEFuZEFkZDogZnVuY3Rpb24oIGVsZW1lbnQsIHJ1bGUgKSB7XG5cdFx0XHR2YXIgbWVzc2FnZSA9IHRoaXMuZGVmYXVsdE1lc3NhZ2UoIGVsZW1lbnQsIHJ1bGUgKTtcblxuXHRcdFx0dGhpcy5lcnJvckxpc3QucHVzaCgge1xuXHRcdFx0XHRtZXNzYWdlOiBtZXNzYWdlLFxuXHRcdFx0XHRlbGVtZW50OiBlbGVtZW50LFxuXHRcdFx0XHRtZXRob2Q6IHJ1bGUubWV0aG9kXG5cdFx0XHR9ICk7XG5cblx0XHRcdHRoaXMuZXJyb3JNYXBbIGVsZW1lbnQubmFtZSBdID0gbWVzc2FnZTtcblx0XHRcdHRoaXMuc3VibWl0dGVkWyBlbGVtZW50Lm5hbWUgXSA9IG1lc3NhZ2U7XG5cdFx0fSxcblxuXHRcdGFkZFdyYXBwZXI6IGZ1bmN0aW9uKCB0b1RvZ2dsZSApIHtcblx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy53cmFwcGVyICkge1xuXHRcdFx0XHR0b1RvZ2dsZSA9IHRvVG9nZ2xlLmFkZCggdG9Ub2dnbGUucGFyZW50KCB0aGlzLnNldHRpbmdzLndyYXBwZXIgKSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRvVG9nZ2xlO1xuXHRcdH0sXG5cblx0XHRkZWZhdWx0U2hvd0Vycm9yczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSwgZWxlbWVudHMsIGVycm9yO1xuXHRcdFx0Zm9yICggaSA9IDA7IHRoaXMuZXJyb3JMaXN0WyBpIF07IGkrKyApIHtcblx0XHRcdFx0ZXJyb3IgPSB0aGlzLmVycm9yTGlzdFsgaSBdO1xuXHRcdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3MuaGlnaGxpZ2h0ICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MuaGlnaGxpZ2h0LmNhbGwoIHRoaXMsIGVycm9yLmVsZW1lbnQsIHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcywgdGhpcy5zZXR0aW5ncy52YWxpZENsYXNzICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5zaG93TGFiZWwoIGVycm9yLmVsZW1lbnQsIGVycm9yLm1lc3NhZ2UgKTtcblx0XHRcdH1cblx0XHRcdGlmICggdGhpcy5lcnJvckxpc3QubGVuZ3RoICkge1xuXHRcdFx0XHR0aGlzLnRvU2hvdyA9IHRoaXMudG9TaG93LmFkZCggdGhpcy5jb250YWluZXJzICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3Muc3VjY2VzcyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IHRoaXMuc3VjY2Vzc0xpc3RbIGkgXTsgaSsrICkge1xuXHRcdFx0XHRcdHRoaXMuc2hvd0xhYmVsKCB0aGlzLnN1Y2Nlc3NMaXN0WyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLnVuaGlnaGxpZ2h0ICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgZWxlbWVudHMgPSB0aGlzLnZhbGlkRWxlbWVudHMoKTsgZWxlbWVudHNbIGkgXTsgaSsrICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MudW5oaWdobGlnaHQuY2FsbCggdGhpcywgZWxlbWVudHNbIGkgXSwgdGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzLCB0aGlzLnNldHRpbmdzLnZhbGlkQ2xhc3MgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy50b0hpZGUgPSB0aGlzLnRvSGlkZS5ub3QoIHRoaXMudG9TaG93ICk7XG5cdFx0XHR0aGlzLmhpZGVFcnJvcnMoKTtcblx0XHRcdHRoaXMuYWRkV3JhcHBlciggdGhpcy50b1Nob3cgKS5zaG93KCk7XG5cdFx0fSxcblxuXHRcdHZhbGlkRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY3VycmVudEVsZW1lbnRzLm5vdCggdGhpcy5pbnZhbGlkRWxlbWVudHMoKSApO1xuXHRcdH0sXG5cblx0XHRpbnZhbGlkRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuICQoIHRoaXMuZXJyb3JMaXN0ICkubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZWxlbWVudDtcblx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0c2hvd0xhYmVsOiBmdW5jdGlvbiggZWxlbWVudCwgbWVzc2FnZSApIHtcblx0XHRcdHZhciBwbGFjZSwgZ3JvdXAsIGVycm9ySUQsIHYsXG5cdFx0XHRcdGVycm9yID0gdGhpcy5lcnJvcnNGb3IoIGVsZW1lbnQgKSxcblx0XHRcdFx0ZWxlbWVudElEID0gdGhpcy5pZE9yTmFtZSggZWxlbWVudCApLFxuXHRcdFx0XHRkZXNjcmliZWRCeSA9ICQoIGVsZW1lbnQgKS5hdHRyKCBcImFyaWEtZGVzY3JpYmVkYnlcIiApO1xuXG5cdFx0XHRpZiAoIGVycm9yLmxlbmd0aCApIHtcblxuXHRcdFx0XHQvLyBSZWZyZXNoIGVycm9yL3N1Y2Nlc3MgY2xhc3Ncblx0XHRcdFx0ZXJyb3IucmVtb3ZlQ2xhc3MoIHRoaXMuc2V0dGluZ3MudmFsaWRDbGFzcyApLmFkZENsYXNzKCB0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MgKTtcblxuXHRcdFx0XHQvLyBSZXBsYWNlIG1lc3NhZ2Ugb24gZXhpc3RpbmcgbGFiZWxcblx0XHRcdFx0ZXJyb3IuaHRtbCggbWVzc2FnZSApO1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBDcmVhdGUgZXJyb3IgZWxlbWVudFxuXHRcdFx0XHRlcnJvciA9ICQoIFwiPFwiICsgdGhpcy5zZXR0aW5ncy5lcnJvckVsZW1lbnQgKyBcIj5cIiApXG5cdFx0XHRcdFx0LmF0dHIoIFwiaWRcIiwgZWxlbWVudElEICsgXCItZXJyb3JcIiApXG5cdFx0XHRcdFx0LmFkZENsYXNzKCB0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MgKVxuXHRcdFx0XHRcdC5odG1sKCBtZXNzYWdlIHx8IFwiXCIgKTtcblxuXHRcdFx0XHQvLyBNYWludGFpbiByZWZlcmVuY2UgdG8gdGhlIGVsZW1lbnQgdG8gYmUgcGxhY2VkIGludG8gdGhlIERPTVxuXHRcdFx0XHRwbGFjZSA9IGVycm9yO1xuXHRcdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3Mud3JhcHBlciApIHtcblxuXHRcdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyB2aXNpYmxlLCBldmVuIGluIElFXG5cdFx0XHRcdFx0Ly8gYWN0dWFsbHkgc2hvd2luZyB0aGUgd3JhcHBlZCBlbGVtZW50IGlzIGhhbmRsZWQgZWxzZXdoZXJlXG5cdFx0XHRcdFx0cGxhY2UgPSBlcnJvci5oaWRlKCkuc2hvdygpLndyYXAoIFwiPFwiICsgdGhpcy5zZXR0aW5ncy53cmFwcGVyICsgXCIvPlwiICkucGFyZW50KCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCB0aGlzLmxhYmVsQ29udGFpbmVyLmxlbmd0aCApIHtcblx0XHRcdFx0XHR0aGlzLmxhYmVsQ29udGFpbmVyLmFwcGVuZCggcGxhY2UgKTtcblx0XHRcdFx0fSBlbHNlIGlmICggdGhpcy5zZXR0aW5ncy5lcnJvclBsYWNlbWVudCApIHtcblx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLmVycm9yUGxhY2VtZW50LmNhbGwoIHRoaXMsIHBsYWNlLCAkKCBlbGVtZW50ICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRwbGFjZS5pbnNlcnRBZnRlciggZWxlbWVudCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTGluayBlcnJvciBiYWNrIHRvIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggZXJyb3IuaXMoIFwibGFiZWxcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIGVycm9yIGlzIGEgbGFiZWwsIHRoZW4gYXNzb2NpYXRlIHVzaW5nICdmb3InXG5cdFx0XHRcdFx0ZXJyb3IuYXR0ciggXCJmb3JcIiwgZWxlbWVudElEICk7XG5cblx0XHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBpcyBub3QgYSBjaGlsZCBvZiBhbiBhc3NvY2lhdGVkIGxhYmVsLCB0aGVuIGl0J3MgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0Ly8gdG8gZXhwbGljaXRseSBhcHBseSBhcmlhLWRlc2NyaWJlZGJ5XG5cdFx0XHRcdH0gZWxzZSBpZiAoIGVycm9yLnBhcmVudHMoIFwibGFiZWxbZm9yPSdcIiArIHRoaXMuZXNjYXBlQ3NzTWV0YSggZWxlbWVudElEICkgKyBcIiddXCIgKS5sZW5ndGggPT09IDAgKSB7XG5cdFx0XHRcdFx0ZXJyb3JJRCA9IGVycm9yLmF0dHIoIFwiaWRcIiApO1xuXG5cdFx0XHRcdFx0Ly8gUmVzcGVjdCBleGlzdGluZyBub24tZXJyb3IgYXJpYS1kZXNjcmliZWRieVxuXHRcdFx0XHRcdGlmICggIWRlc2NyaWJlZEJ5ICkge1xuXHRcdFx0XHRcdFx0ZGVzY3JpYmVkQnkgPSBlcnJvcklEO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFkZXNjcmliZWRCeS5tYXRjaCggbmV3IFJlZ0V4cCggXCJcXFxcYlwiICsgdGhpcy5lc2NhcGVDc3NNZXRhKCBlcnJvcklEICkgKyBcIlxcXFxiXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBBZGQgdG8gZW5kIG9mIGxpc3QgaWYgbm90IGFscmVhZHkgcHJlc2VudFxuXHRcdFx0XHRcdFx0ZGVzY3JpYmVkQnkgKz0gXCIgXCIgKyBlcnJvcklEO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQkKCBlbGVtZW50ICkuYXR0ciggXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIGRlc2NyaWJlZEJ5ICk7XG5cblx0XHRcdFx0XHQvLyBJZiB0aGlzIGVsZW1lbnQgaXMgZ3JvdXBlZCwgdGhlbiBhc3NpZ24gdG8gYWxsIGVsZW1lbnRzIGluIHRoZSBzYW1lIGdyb3VwXG5cdFx0XHRcdFx0Z3JvdXAgPSB0aGlzLmdyb3Vwc1sgZWxlbWVudC5uYW1lIF07XG5cdFx0XHRcdFx0aWYgKCBncm91cCApIHtcblx0XHRcdFx0XHRcdHYgPSB0aGlzO1xuXHRcdFx0XHRcdFx0JC5lYWNoKCB2Lmdyb3VwcywgZnVuY3Rpb24oIG5hbWUsIHRlc3Rncm91cCApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCB0ZXN0Z3JvdXAgPT09IGdyb3VwICkge1xuXHRcdFx0XHRcdFx0XHRcdCQoIFwiW25hbWU9J1wiICsgdi5lc2NhcGVDc3NNZXRhKCBuYW1lICkgKyBcIiddXCIsIHYuY3VycmVudEZvcm0gKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmF0dHIoIFwiYXJpYS1kZXNjcmliZWRieVwiLCBlcnJvci5hdHRyKCBcImlkXCIgKSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFtZXNzYWdlICYmIHRoaXMuc2V0dGluZ3Muc3VjY2VzcyApIHtcblx0XHRcdFx0ZXJyb3IudGV4dCggXCJcIiApO1xuXHRcdFx0XHRpZiAoIHR5cGVvZiB0aGlzLnNldHRpbmdzLnN1Y2Nlc3MgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0ZXJyb3IuYWRkQ2xhc3MoIHRoaXMuc2V0dGluZ3Muc3VjY2VzcyApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3Muc3VjY2VzcyggZXJyb3IsIGVsZW1lbnQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy50b1Nob3cgPSB0aGlzLnRvU2hvdy5hZGQoIGVycm9yICk7XG5cdFx0fSxcblxuXHRcdGVycm9yc0ZvcjogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHR2YXIgbmFtZSA9IHRoaXMuZXNjYXBlQ3NzTWV0YSggdGhpcy5pZE9yTmFtZSggZWxlbWVudCApICksXG5cdFx0XHRcdGRlc2NyaWJlciA9ICQoIGVsZW1lbnQgKS5hdHRyKCBcImFyaWEtZGVzY3JpYmVkYnlcIiApLFxuXHRcdFx0XHRzZWxlY3RvciA9IFwibGFiZWxbZm9yPSdcIiArIG5hbWUgKyBcIiddLCBsYWJlbFtmb3I9J1wiICsgbmFtZSArIFwiJ10gKlwiO1xuXG5cdFx0XHQvLyAnYXJpYS1kZXNjcmliZWRieScgc2hvdWxkIGRpcmVjdGx5IHJlZmVyZW5jZSB0aGUgZXJyb3IgZWxlbWVudFxuXHRcdFx0aWYgKCBkZXNjcmliZXIgKSB7XG5cdFx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3IgKyBcIiwgI1wiICsgdGhpcy5lc2NhcGVDc3NNZXRhKCBkZXNjcmliZXIgKVxuXHRcdFx0XHRcdC5yZXBsYWNlKCAvXFxzKy9nLCBcIiwgI1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzXG5cdFx0XHRcdC5lcnJvcnMoKVxuXHRcdFx0XHQuZmlsdGVyKCBzZWxlY3RvciApO1xuXHRcdH0sXG5cblx0XHQvLyBTZWUgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9jYXRlZ29yeS9zZWxlY3RvcnMvLCBmb3IgQ1NTXG5cdFx0Ly8gbWV0YS1jaGFyYWN0ZXJzIHRoYXQgc2hvdWxkIGJlIGVzY2FwZWQgaW4gb3JkZXIgdG8gYmUgdXNlZCB3aXRoIEpRdWVyeVxuXHRcdC8vIGFzIGEgbGl0ZXJhbCBwYXJ0IG9mIGEgbmFtZS9pZCBvciBhbnkgc2VsZWN0b3IuXG5cdFx0ZXNjYXBlQ3NzTWV0YTogZnVuY3Rpb24oIHN0cmluZyApIHtcblx0XHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSggLyhbXFxcXCFcIiMkJSYnKCkqKywuLzo7PD0+P0BcXFtcXF1eYHt8fX5dKS9nLCBcIlxcXFwkMVwiICk7XG5cdFx0fSxcblxuXHRcdGlkT3JOYW1lOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHJldHVybiB0aGlzLmdyb3Vwc1sgZWxlbWVudC5uYW1lIF0gfHwgKCB0aGlzLmNoZWNrYWJsZSggZWxlbWVudCApID8gZWxlbWVudC5uYW1lIDogZWxlbWVudC5pZCB8fCBlbGVtZW50Lm5hbWUgKTtcblx0XHR9LFxuXG5cdFx0dmFsaWRhdGlvblRhcmdldEZvcjogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cblx0XHRcdC8vIElmIHJhZGlvL2NoZWNrYm94LCB2YWxpZGF0ZSBmaXJzdCBlbGVtZW50IGluIGdyb3VwIGluc3RlYWRcblx0XHRcdGlmICggdGhpcy5jaGVja2FibGUoIGVsZW1lbnQgKSApIHtcblx0XHRcdFx0ZWxlbWVudCA9IHRoaXMuZmluZEJ5TmFtZSggZWxlbWVudC5uYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFsd2F5cyBhcHBseSBpZ25vcmUgZmlsdGVyXG5cdFx0XHRyZXR1cm4gJCggZWxlbWVudCApLm5vdCggdGhpcy5zZXR0aW5ncy5pZ25vcmUgKVsgMCBdO1xuXHRcdH0sXG5cblx0XHRjaGVja2FibGU6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0cmV0dXJuICggL3JhZGlvfGNoZWNrYm94L2kgKS50ZXN0KCBlbGVtZW50LnR5cGUgKTtcblx0XHR9LFxuXG5cdFx0ZmluZEJ5TmFtZTogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0XHRyZXR1cm4gJCggdGhpcy5jdXJyZW50Rm9ybSApLmZpbmQoIFwiW25hbWU9J1wiICsgdGhpcy5lc2NhcGVDc3NNZXRhKCBuYW1lICkgKyBcIiddXCIgKTtcblx0XHR9LFxuXG5cdFx0Z2V0TGVuZ3RoOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdFx0XHRzd2l0Y2ggKCBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRjYXNlIFwic2VsZWN0XCI6XG5cdFx0XHRcdHJldHVybiAkKCBcIm9wdGlvbjpzZWxlY3RlZFwiLCBlbGVtZW50ICkubGVuZ3RoO1xuXHRcdFx0Y2FzZSBcImlucHV0XCI6XG5cdFx0XHRcdGlmICggdGhpcy5jaGVja2FibGUoIGVsZW1lbnQgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5maW5kQnlOYW1lKCBlbGVtZW50Lm5hbWUgKS5maWx0ZXIoIFwiOmNoZWNrZWRcIiApLmxlbmd0aDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZhbHVlLmxlbmd0aDtcblx0XHR9LFxuXG5cdFx0ZGVwZW5kOiBmdW5jdGlvbiggcGFyYW0sIGVsZW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5kZXBlbmRUeXBlc1sgdHlwZW9mIHBhcmFtIF0gPyB0aGlzLmRlcGVuZFR5cGVzWyB0eXBlb2YgcGFyYW0gXSggcGFyYW0sIGVsZW1lbnQgKSA6IHRydWU7XG5cdFx0fSxcblxuXHRcdGRlcGVuZFR5cGVzOiB7XG5cdFx0XHRcImJvb2xlYW5cIjogZnVuY3Rpb24oIHBhcmFtICkge1xuXHRcdFx0XHRyZXR1cm4gcGFyYW07XG5cdFx0XHR9LFxuXHRcdFx0XCJzdHJpbmdcIjogZnVuY3Rpb24oIHBhcmFtLCBlbGVtZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gISEkKCBwYXJhbSwgZWxlbWVudC5mb3JtICkubGVuZ3RoO1xuXHRcdFx0fSxcblx0XHRcdFwiZnVuY3Rpb25cIjogZnVuY3Rpb24oIHBhcmFtLCBlbGVtZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gcGFyYW0oIGVsZW1lbnQgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0b3B0aW9uYWw6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0dmFyIHZhbCA9IHRoaXMuZWxlbWVudFZhbHVlKCBlbGVtZW50ICk7XG5cdFx0XHRyZXR1cm4gISQudmFsaWRhdG9yLm1ldGhvZHMucmVxdWlyZWQuY2FsbCggdGhpcywgdmFsLCBlbGVtZW50ICkgJiYgXCJkZXBlbmRlbmN5LW1pc21hdGNoXCI7XG5cdFx0fSxcblxuXHRcdHN0YXJ0UmVxdWVzdDogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHRpZiAoICF0aGlzLnBlbmRpbmdbIGVsZW1lbnQubmFtZSBdICkge1xuXHRcdFx0XHR0aGlzLnBlbmRpbmdSZXF1ZXN0Kys7XG5cdFx0XHRcdCQoIGVsZW1lbnQgKS5hZGRDbGFzcyggdGhpcy5zZXR0aW5ncy5wZW5kaW5nQ2xhc3MgKTtcblx0XHRcdFx0dGhpcy5wZW5kaW5nWyBlbGVtZW50Lm5hbWUgXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHN0b3BSZXF1ZXN0OiBmdW5jdGlvbiggZWxlbWVudCwgdmFsaWQgKSB7XG5cdFx0XHR0aGlzLnBlbmRpbmdSZXF1ZXN0LS07XG5cblx0XHRcdC8vIFNvbWV0aW1lcyBzeW5jaHJvbml6YXRpb24gZmFpbHMsIG1ha2Ugc3VyZSBwZW5kaW5nUmVxdWVzdCBpcyBuZXZlciA8IDBcblx0XHRcdGlmICggdGhpcy5wZW5kaW5nUmVxdWVzdCA8IDAgKSB7XG5cdFx0XHRcdHRoaXMucGVuZGluZ1JlcXVlc3QgPSAwO1xuXHRcdFx0fVxuXHRcdFx0ZGVsZXRlIHRoaXMucGVuZGluZ1sgZWxlbWVudC5uYW1lIF07XG5cdFx0XHQkKCBlbGVtZW50ICkucmVtb3ZlQ2xhc3MoIHRoaXMuc2V0dGluZ3MucGVuZGluZ0NsYXNzICk7XG5cdFx0XHRpZiAoIHZhbGlkICYmIHRoaXMucGVuZGluZ1JlcXVlc3QgPT09IDAgJiYgdGhpcy5mb3JtU3VibWl0dGVkICYmIHRoaXMuZm9ybSgpICkge1xuXHRcdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtICkuc3VibWl0KCk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIHRoZSBoaWRkZW4gaW5wdXQgdGhhdCB3YXMgdXNlZCBhcyBhIHJlcGxhY2VtZW50IGZvciB0aGVcblx0XHRcdFx0Ly8gbWlzc2luZyBzdWJtaXQgYnV0dG9uLiBUaGUgaGlkZGVuIGlucHV0IGlzIGFkZGVkIGJ5IGBoYW5kbGUoKWBcblx0XHRcdFx0Ly8gdG8gZW5zdXJlIHRoYXQgdGhlIHZhbHVlIG9mIHRoZSB1c2VkIHN1Ym1pdCBidXR0b24gaXMgcGFzc2VkIG9uXG5cdFx0XHRcdC8vIGZvciBzY3JpcHRlZCBzdWJtaXRzIHRyaWdnZXJlZCBieSB0aGlzIG1ldGhvZFxuXHRcdFx0XHRpZiAoIHRoaXMuc3VibWl0QnV0dG9uICkge1xuXHRcdFx0XHRcdCQoIFwiaW5wdXQ6aGlkZGVuW25hbWU9J1wiICsgdGhpcy5zdWJtaXRCdXR0b24ubmFtZSArIFwiJ11cIiwgdGhpcy5jdXJyZW50Rm9ybSApLnJlbW92ZSgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5mb3JtU3VibWl0dGVkID0gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCAhdmFsaWQgJiYgdGhpcy5wZW5kaW5nUmVxdWVzdCA9PT0gMCAmJiB0aGlzLmZvcm1TdWJtaXR0ZWQgKSB7XG5cdFx0XHRcdCQoIHRoaXMuY3VycmVudEZvcm0gKS50cmlnZ2VySGFuZGxlciggXCJpbnZhbGlkLWZvcm1cIiwgWyB0aGlzIF0gKTtcblx0XHRcdFx0dGhpcy5mb3JtU3VibWl0dGVkID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHByZXZpb3VzVmFsdWU6IGZ1bmN0aW9uKCBlbGVtZW50LCBtZXRob2QgKSB7XG5cdFx0XHRtZXRob2QgPSB0eXBlb2YgbWV0aG9kID09PSBcInN0cmluZ1wiICYmIG1ldGhvZCB8fCBcInJlbW90ZVwiO1xuXG5cdFx0XHRyZXR1cm4gJC5kYXRhKCBlbGVtZW50LCBcInByZXZpb3VzVmFsdWVcIiApIHx8ICQuZGF0YSggZWxlbWVudCwgXCJwcmV2aW91c1ZhbHVlXCIsIHtcblx0XHRcdFx0b2xkOiBudWxsLFxuXHRcdFx0XHR2YWxpZDogdHJ1ZSxcblx0XHRcdFx0bWVzc2FnZTogdGhpcy5kZWZhdWx0TWVzc2FnZSggZWxlbWVudCwgeyBtZXRob2Q6IG1ldGhvZCB9IClcblx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gQ2xlYW5zIHVwIGFsbCBmb3JtcyBhbmQgZWxlbWVudHMsIHJlbW92ZXMgdmFsaWRhdG9yLXNwZWNpZmljIGV2ZW50c1xuXHRcdGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5yZXNldEZvcm0oKTtcblxuXHRcdFx0JCggdGhpcy5jdXJyZW50Rm9ybSApXG5cdFx0XHRcdC5vZmYoIFwiLnZhbGlkYXRlXCIgKVxuXHRcdFx0XHQucmVtb3ZlRGF0YSggXCJ2YWxpZGF0b3JcIiApXG5cdFx0XHRcdC5maW5kKCBcIi52YWxpZGF0ZS1lcXVhbFRvLWJsdXJcIiApXG5cdFx0XHRcdFx0Lm9mZiggXCIudmFsaWRhdGUtZXF1YWxUb1wiIClcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIFwidmFsaWRhdGUtZXF1YWxUby1ibHVyXCIgKTtcblx0XHR9XG5cblx0fSxcblxuXHRjbGFzc1J1bGVTZXR0aW5nczoge1xuXHRcdHJlcXVpcmVkOiB7IHJlcXVpcmVkOiB0cnVlIH0sXG5cdFx0ZW1haWw6IHsgZW1haWw6IHRydWUgfSxcblx0XHR1cmw6IHsgdXJsOiB0cnVlIH0sXG5cdFx0ZGF0ZTogeyBkYXRlOiB0cnVlIH0sXG5cdFx0ZGF0ZUlTTzogeyBkYXRlSVNPOiB0cnVlIH0sXG5cdFx0bnVtYmVyOiB7IG51bWJlcjogdHJ1ZSB9LFxuXHRcdGRpZ2l0czogeyBkaWdpdHM6IHRydWUgfSxcblx0XHRjcmVkaXRjYXJkOiB7IGNyZWRpdGNhcmQ6IHRydWUgfVxuXHR9LFxuXG5cdGFkZENsYXNzUnVsZXM6IGZ1bmN0aW9uKCBjbGFzc05hbWUsIHJ1bGVzICkge1xuXHRcdGlmICggY2xhc3NOYW1lLmNvbnN0cnVjdG9yID09PSBTdHJpbmcgKSB7XG5cdFx0XHR0aGlzLmNsYXNzUnVsZVNldHRpbmdzWyBjbGFzc05hbWUgXSA9IHJ1bGVzO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQkLmV4dGVuZCggdGhpcy5jbGFzc1J1bGVTZXR0aW5ncywgY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9LFxuXG5cdGNsYXNzUnVsZXM6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHZhciBydWxlcyA9IHt9LFxuXHRcdFx0Y2xhc3NlcyA9ICQoIGVsZW1lbnQgKS5hdHRyKCBcImNsYXNzXCIgKTtcblxuXHRcdGlmICggY2xhc3NlcyApIHtcblx0XHRcdCQuZWFjaCggY2xhc3Nlcy5zcGxpdCggXCIgXCIgKSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyBpbiAkLnZhbGlkYXRvci5jbGFzc1J1bGVTZXR0aW5ncyApIHtcblx0XHRcdFx0XHQkLmV4dGVuZCggcnVsZXMsICQudmFsaWRhdG9yLmNsYXNzUnVsZVNldHRpbmdzWyB0aGlzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcnVsZXM7XG5cdH0sXG5cblx0bm9ybWFsaXplQXR0cmlidXRlUnVsZTogZnVuY3Rpb24oIHJ1bGVzLCB0eXBlLCBtZXRob2QsIHZhbHVlICkge1xuXG5cdFx0Ly8gQ29udmVydCB0aGUgdmFsdWUgdG8gYSBudW1iZXIgZm9yIG51bWJlciBpbnB1dHMsIGFuZCBmb3IgdGV4dCBmb3IgYmFja3dhcmRzIGNvbXBhYmlsaXR5XG5cdFx0Ly8gYWxsb3dzIHR5cGU9XCJkYXRlXCIgYW5kIG90aGVycyB0byBiZSBjb21wYXJlZCBhcyBzdHJpbmdzXG5cdFx0aWYgKCAvbWlufG1heHxzdGVwLy50ZXN0KCBtZXRob2QgKSAmJiAoIHR5cGUgPT09IG51bGwgfHwgL251bWJlcnxyYW5nZXx0ZXh0Ly50ZXN0KCB0eXBlICkgKSApIHtcblx0XHRcdHZhbHVlID0gTnVtYmVyKCB2YWx1ZSApO1xuXG5cdFx0XHQvLyBTdXBwb3J0IE9wZXJhIE1pbmksIHdoaWNoIHJldHVybnMgTmFOIGZvciB1bmRlZmluZWQgbWlubGVuZ3RoXG5cdFx0XHRpZiAoIGlzTmFOKCB2YWx1ZSApICkge1xuXHRcdFx0XHR2YWx1ZSA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlIHx8IHZhbHVlID09PSAwICkge1xuXHRcdFx0cnVsZXNbIG1ldGhvZCBdID0gdmFsdWU7XG5cdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gbWV0aG9kICYmIHR5cGUgIT09IFwicmFuZ2VcIiApIHtcblxuXHRcdFx0Ly8gRXhjZXB0aW9uOiB0aGUganF1ZXJ5IHZhbGlkYXRlICdyYW5nZScgbWV0aG9kXG5cdFx0XHQvLyBkb2VzIG5vdCB0ZXN0IGZvciB0aGUgaHRtbDUgJ3JhbmdlJyB0eXBlXG5cdFx0XHRydWxlc1sgbWV0aG9kIF0gPSB0cnVlO1xuXHRcdH1cblx0fSxcblxuXHRhdHRyaWJ1dGVSdWxlczogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0dmFyIHJ1bGVzID0ge30sXG5cdFx0XHQkZWxlbWVudCA9ICQoIGVsZW1lbnQgKSxcblx0XHRcdHR5cGUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSxcblx0XHRcdG1ldGhvZCwgdmFsdWU7XG5cblx0XHRmb3IgKCBtZXRob2QgaW4gJC52YWxpZGF0b3IubWV0aG9kcyApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBmb3IgPGlucHV0IHJlcXVpcmVkPiBpbiBib3RoIGh0bWw1IGFuZCBvbGRlciBicm93c2Vyc1xuXHRcdFx0aWYgKCBtZXRob2QgPT09IFwicmVxdWlyZWRcIiApIHtcblx0XHRcdFx0dmFsdWUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSggbWV0aG9kICk7XG5cblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyByZXR1cm4gYW4gZW1wdHkgc3RyaW5nIGZvciB0aGUgcmVxdWlyZWQgYXR0cmlidXRlXG5cdFx0XHRcdC8vIGFuZCBub24tSFRNTDUgYnJvd3NlcnMgbWlnaHQgaGF2ZSByZXF1aXJlZD1cIlwiIG1hcmt1cFxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcIlwiICkge1xuXHRcdFx0XHRcdHZhbHVlID0gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIG5vbi1IVE1MNSBicm93c2VycyB0byByZXR1cm4gYm9vbFxuXHRcdFx0XHR2YWx1ZSA9ICEhdmFsdWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWx1ZSA9ICRlbGVtZW50LmF0dHIoIG1ldGhvZCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm5vcm1hbGl6ZUF0dHJpYnV0ZVJ1bGUoIHJ1bGVzLCB0eXBlLCBtZXRob2QsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gJ21heGxlbmd0aCcgbWF5IGJlIHJldHVybmVkIGFzIC0xLCAyMTQ3NDgzNjQ3ICggSUUgKSBhbmQgNTI0Mjg4ICggc2FmYXJpICkgZm9yIHRleHQgaW5wdXRzXG5cdFx0aWYgKCBydWxlcy5tYXhsZW5ndGggJiYgLy0xfDIxNDc0ODM2NDd8NTI0Mjg4Ly50ZXN0KCBydWxlcy5tYXhsZW5ndGggKSApIHtcblx0XHRcdGRlbGV0ZSBydWxlcy5tYXhsZW5ndGg7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJ1bGVzO1xuXHR9LFxuXG5cdGRhdGFSdWxlczogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0dmFyIHJ1bGVzID0ge30sXG5cdFx0XHQkZWxlbWVudCA9ICQoIGVsZW1lbnQgKSxcblx0XHRcdHR5cGUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSxcblx0XHRcdG1ldGhvZCwgdmFsdWU7XG5cblx0XHRmb3IgKCBtZXRob2QgaW4gJC52YWxpZGF0b3IubWV0aG9kcyApIHtcblx0XHRcdHZhbHVlID0gJGVsZW1lbnQuZGF0YSggXCJydWxlXCIgKyBtZXRob2QuY2hhckF0KCAwICkudG9VcHBlckNhc2UoKSArIG1ldGhvZC5zdWJzdHJpbmcoIDEgKS50b0xvd2VyQ2FzZSgpICk7XG5cdFx0XHR0aGlzLm5vcm1hbGl6ZUF0dHJpYnV0ZVJ1bGUoIHJ1bGVzLCB0eXBlLCBtZXRob2QsIHZhbHVlICk7XG5cdFx0fVxuXHRcdHJldHVybiBydWxlcztcblx0fSxcblxuXHRzdGF0aWNSdWxlczogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0dmFyIHJ1bGVzID0ge30sXG5cdFx0XHR2YWxpZGF0b3IgPSAkLmRhdGEoIGVsZW1lbnQuZm9ybSwgXCJ2YWxpZGF0b3JcIiApO1xuXG5cdFx0aWYgKCB2YWxpZGF0b3Iuc2V0dGluZ3MucnVsZXMgKSB7XG5cdFx0XHRydWxlcyA9ICQudmFsaWRhdG9yLm5vcm1hbGl6ZVJ1bGUoIHZhbGlkYXRvci5zZXR0aW5ncy5ydWxlc1sgZWxlbWVudC5uYW1lIF0gKSB8fCB7fTtcblx0XHR9XG5cdFx0cmV0dXJuIHJ1bGVzO1xuXHR9LFxuXG5cdG5vcm1hbGl6ZVJ1bGVzOiBmdW5jdGlvbiggcnVsZXMsIGVsZW1lbnQgKSB7XG5cblx0XHQvLyBIYW5kbGUgZGVwZW5kZW5jeSBjaGVja1xuXHRcdCQuZWFjaCggcnVsZXMsIGZ1bmN0aW9uKCBwcm9wLCB2YWwgKSB7XG5cblx0XHRcdC8vIElnbm9yZSBydWxlIHdoZW4gcGFyYW0gaXMgZXhwbGljaXRseSBmYWxzZSwgZWcuIHJlcXVpcmVkOmZhbHNlXG5cdFx0XHRpZiAoIHZhbCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGRlbGV0ZSBydWxlc1sgcHJvcCBdO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHZhbC5wYXJhbSB8fCB2YWwuZGVwZW5kcyApIHtcblx0XHRcdFx0dmFyIGtlZXBSdWxlID0gdHJ1ZTtcblx0XHRcdFx0c3dpdGNoICggdHlwZW9mIHZhbC5kZXBlbmRzICkge1xuXHRcdFx0XHRjYXNlIFwic3RyaW5nXCI6XG5cdFx0XHRcdFx0a2VlcFJ1bGUgPSAhISQoIHZhbC5kZXBlbmRzLCBlbGVtZW50LmZvcm0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJmdW5jdGlvblwiOlxuXHRcdFx0XHRcdGtlZXBSdWxlID0gdmFsLmRlcGVuZHMuY2FsbCggZWxlbWVudCwgZWxlbWVudCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICgga2VlcFJ1bGUgKSB7XG5cdFx0XHRcdFx0cnVsZXNbIHByb3AgXSA9IHZhbC5wYXJhbSAhPT0gdW5kZWZpbmVkID8gdmFsLnBhcmFtIDogdHJ1ZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQkLmRhdGEoIGVsZW1lbnQuZm9ybSwgXCJ2YWxpZGF0b3JcIiApLnJlc2V0RWxlbWVudHMoICQoIGVsZW1lbnQgKSApO1xuXHRcdFx0XHRcdGRlbGV0ZSBydWxlc1sgcHJvcCBdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0Ly8gRXZhbHVhdGUgcGFyYW1ldGVyc1xuXHRcdCQuZWFjaCggcnVsZXMsIGZ1bmN0aW9uKCBydWxlLCBwYXJhbWV0ZXIgKSB7XG5cdFx0XHRydWxlc1sgcnVsZSBdID0gJC5pc0Z1bmN0aW9uKCBwYXJhbWV0ZXIgKSAmJiBydWxlICE9PSBcIm5vcm1hbGl6ZXJcIiA/IHBhcmFtZXRlciggZWxlbWVudCApIDogcGFyYW1ldGVyO1xuXHRcdH0gKTtcblxuXHRcdC8vIENsZWFuIG51bWJlciBwYXJhbWV0ZXJzXG5cdFx0JC5lYWNoKCBbIFwibWlubGVuZ3RoXCIsIFwibWF4bGVuZ3RoXCIgXSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHJ1bGVzWyB0aGlzIF0gKSB7XG5cdFx0XHRcdHJ1bGVzWyB0aGlzIF0gPSBOdW1iZXIoIHJ1bGVzWyB0aGlzIF0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0JC5lYWNoKCBbIFwicmFuZ2VsZW5ndGhcIiwgXCJyYW5nZVwiIF0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHBhcnRzO1xuXHRcdFx0aWYgKCBydWxlc1sgdGhpcyBdICkge1xuXHRcdFx0XHRpZiAoICQuaXNBcnJheSggcnVsZXNbIHRoaXMgXSApICkge1xuXHRcdFx0XHRcdHJ1bGVzWyB0aGlzIF0gPSBbIE51bWJlciggcnVsZXNbIHRoaXMgXVsgMCBdICksIE51bWJlciggcnVsZXNbIHRoaXMgXVsgMSBdICkgXTtcblx0XHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHJ1bGVzWyB0aGlzIF0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cGFydHMgPSBydWxlc1sgdGhpcyBdLnJlcGxhY2UoIC9bXFxbXFxdXS9nLCBcIlwiICkuc3BsaXQoIC9bXFxzLF0rLyApO1xuXHRcdFx0XHRcdHJ1bGVzWyB0aGlzIF0gPSBbIE51bWJlciggcGFydHNbIDAgXSApLCBOdW1iZXIoIHBhcnRzWyAxIF0gKSBdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdFx0aWYgKCAkLnZhbGlkYXRvci5hdXRvQ3JlYXRlUmFuZ2VzICkge1xuXG5cdFx0XHQvLyBBdXRvLWNyZWF0ZSByYW5nZXNcblx0XHRcdGlmICggcnVsZXMubWluICE9IG51bGwgJiYgcnVsZXMubWF4ICE9IG51bGwgKSB7XG5cdFx0XHRcdHJ1bGVzLnJhbmdlID0gWyBydWxlcy5taW4sIHJ1bGVzLm1heCBdO1xuXHRcdFx0XHRkZWxldGUgcnVsZXMubWluO1xuXHRcdFx0XHRkZWxldGUgcnVsZXMubWF4O1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBydWxlcy5taW5sZW5ndGggIT0gbnVsbCAmJiBydWxlcy5tYXhsZW5ndGggIT0gbnVsbCApIHtcblx0XHRcdFx0cnVsZXMucmFuZ2VsZW5ndGggPSBbIHJ1bGVzLm1pbmxlbmd0aCwgcnVsZXMubWF4bGVuZ3RoIF07XG5cdFx0XHRcdGRlbGV0ZSBydWxlcy5taW5sZW5ndGg7XG5cdFx0XHRcdGRlbGV0ZSBydWxlcy5tYXhsZW5ndGg7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJ1bGVzO1xuXHR9LFxuXG5cdC8vIENvbnZlcnRzIGEgc2ltcGxlIHN0cmluZyB0byBhIHtzdHJpbmc6IHRydWV9IHJ1bGUsIGUuZy4sIFwicmVxdWlyZWRcIiB0byB7cmVxdWlyZWQ6dHJ1ZX1cblx0bm9ybWFsaXplUnVsZTogZnVuY3Rpb24oIGRhdGEgKSB7XG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHZhciB0cmFuc2Zvcm1lZCA9IHt9O1xuXHRcdFx0JC5lYWNoKCBkYXRhLnNwbGl0KCAvXFxzLyApLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dHJhbnNmb3JtZWRbIHRoaXMgXSA9IHRydWU7XG5cdFx0XHR9ICk7XG5cdFx0XHRkYXRhID0gdHJhbnNmb3JtZWQ7XG5cdFx0fVxuXHRcdHJldHVybiBkYXRhO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvalF1ZXJ5LnZhbGlkYXRvci5hZGRNZXRob2QvXG5cdGFkZE1ldGhvZDogZnVuY3Rpb24oIG5hbWUsIG1ldGhvZCwgbWVzc2FnZSApIHtcblx0XHQkLnZhbGlkYXRvci5tZXRob2RzWyBuYW1lIF0gPSBtZXRob2Q7XG5cdFx0JC52YWxpZGF0b3IubWVzc2FnZXNbIG5hbWUgXSA9IG1lc3NhZ2UgIT09IHVuZGVmaW5lZCA/IG1lc3NhZ2UgOiAkLnZhbGlkYXRvci5tZXNzYWdlc1sgbmFtZSBdO1xuXHRcdGlmICggbWV0aG9kLmxlbmd0aCA8IDMgKSB7XG5cdFx0XHQkLnZhbGlkYXRvci5hZGRDbGFzc1J1bGVzKCBuYW1lLCAkLnZhbGlkYXRvci5ub3JtYWxpemVSdWxlKCBuYW1lICkgKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9qUXVlcnkudmFsaWRhdG9yLm1ldGhvZHMvXG5cdG1ldGhvZHM6IHtcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvcmVxdWlyZWQtbWV0aG9kL1xuXHRcdHJlcXVpcmVkOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXG5cdFx0XHQvLyBDaGVjayBpZiBkZXBlbmRlbmN5IGlzIG1ldFxuXHRcdFx0aWYgKCAhdGhpcy5kZXBlbmQoIHBhcmFtLCBlbGVtZW50ICkgKSB7XG5cdFx0XHRcdHJldHVybiBcImRlcGVuZGVuY3ktbWlzbWF0Y2hcIjtcblx0XHRcdH1cblx0XHRcdGlmICggZWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInNlbGVjdFwiICkge1xuXG5cdFx0XHRcdC8vIENvdWxkIGJlIGFuIGFycmF5IGZvciBzZWxlY3QtbXVsdGlwbGUgb3IgYSBzdHJpbmcsIGJvdGggYXJlIGZpbmUgdGhpcyB3YXlcblx0XHRcdFx0dmFyIHZhbCA9ICQoIGVsZW1lbnQgKS52YWwoKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAmJiB2YWwubGVuZ3RoID4gMDtcblx0XHRcdH1cblx0XHRcdGlmICggdGhpcy5jaGVja2FibGUoIGVsZW1lbnQgKSApIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZ2V0TGVuZ3RoKCB2YWx1ZSwgZWxlbWVudCApID4gMDtcblx0XHRcdH1cblx0XHRcdHJldHVybiB2YWx1ZS5sZW5ndGggPiAwO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2VtYWlsLW1ldGhvZC9cblx0XHRlbWFpbDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXG5cdFx0XHQvLyBGcm9tIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjdmFsaWQtZS1tYWlsLWFkZHJlc3Ncblx0XHRcdC8vIFJldHJpZXZlZCAyMDE0LTAxLTE0XG5cdFx0XHQvLyBJZiB5b3UgaGF2ZSBhIHByb2JsZW0gd2l0aCB0aGlzIGltcGxlbWVudGF0aW9uLCByZXBvcnQgYSBidWcgYWdhaW5zdCB0aGUgYWJvdmUgc3BlY1xuXHRcdFx0Ly8gT3IgdXNlIGN1c3RvbSBtZXRob2RzIHRvIGltcGxlbWVudCB5b3VyIG93biBlbWFpbCB2YWxpZGF0aW9uXG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eW2EtekEtWjAtOS4hIyQlJicqK1xcLz0/Xl9ge3x9fi1dK0BbYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcXC5bYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKiQvLnRlc3QoIHZhbHVlICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvdXJsLW1ldGhvZC9cblx0XHR1cmw6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblxuXHRcdFx0Ly8gQ29weXJpZ2h0IChjKSAyMDEwLTIwMTMgRGllZ28gUGVyaW5pLCBNSVQgbGljZW5zZWRcblx0XHRcdC8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2RwZXJpbmkvNzI5Mjk0XG5cdFx0XHQvLyBzZWUgYWxzbyBodHRwczovL21hdGhpYXNieW5lbnMuYmUvZGVtby91cmwtcmVnZXhcblx0XHRcdC8vIG1vZGlmaWVkIHRvIGFsbG93IHByb3RvY29sLXJlbGF0aXZlIFVSTHNcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgL14oPzooPzooPzpodHRwcz98ZnRwKTopP1xcL1xcLykoPzpcXFMrKD86OlxcUyopP0ApPyg/Oig/ISg/OjEwfDEyNykoPzpcXC5cXGR7MSwzfSl7M30pKD8hKD86MTY5XFwuMjU0fDE5MlxcLjE2OCkoPzpcXC5cXGR7MSwzfSl7Mn0pKD8hMTcyXFwuKD86MVs2LTldfDJcXGR8M1swLTFdKSg/OlxcLlxcZHsxLDN9KXsyfSkoPzpbMS05XVxcZD98MVxcZFxcZHwyWzAxXVxcZHwyMlswLTNdKSg/OlxcLig/OjE/XFxkezEsMn18MlswLTRdXFxkfDI1WzAtNV0pKXsyfSg/OlxcLig/OlsxLTldXFxkP3wxXFxkXFxkfDJbMC00XVxcZHwyNVswLTRdKSl8KD86KD86W2EtelxcdTAwYTEtXFx1ZmZmZjAtOV0tKikqW2EtelxcdTAwYTEtXFx1ZmZmZjAtOV0rKSg/OlxcLig/OlthLXpcXHUwMGExLVxcdWZmZmYwLTldLSopKlthLXpcXHUwMGExLVxcdWZmZmYwLTldKykqKD86XFwuKD86W2EtelxcdTAwYTEtXFx1ZmZmZl17Mix9KSkuPykoPzo6XFxkezIsNX0pPyg/OlsvPyNdXFxTKik/JC9pLnRlc3QoIHZhbHVlICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvZGF0ZS1tZXRob2QvXG5cdFx0ZGF0ZTogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAhL0ludmFsaWR8TmFOLy50ZXN0KCBuZXcgRGF0ZSggdmFsdWUgKS50b1N0cmluZygpICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvZGF0ZUlTTy1tZXRob2QvXG5cdFx0ZGF0ZUlTTzogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAvXlxcZHs0fVtcXC9cXC1dKDA/WzEtOV18MVswMTJdKVtcXC9cXC1dKDA/WzEtOV18WzEyXVswLTldfDNbMDFdKSQvLnRlc3QoIHZhbHVlICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvbnVtYmVyLW1ldGhvZC9cblx0XHRudW1iZXI6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgL14oPzotP1xcZCt8LT9cXGR7MSwzfSg/OixcXGR7M30pKyk/KD86XFwuXFxkKyk/JC8udGVzdCggdmFsdWUgKTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9kaWdpdHMtbWV0aG9kL1xuXHRcdGRpZ2l0czogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAvXlxcZCskLy50ZXN0KCB2YWx1ZSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL21pbmxlbmd0aC1tZXRob2QvXG5cdFx0bWlubGVuZ3RoOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXHRcdFx0dmFyIGxlbmd0aCA9ICQuaXNBcnJheSggdmFsdWUgKSA/IHZhbHVlLmxlbmd0aCA6IHRoaXMuZ2V0TGVuZ3RoKCB2YWx1ZSwgZWxlbWVudCApO1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCBsZW5ndGggPj0gcGFyYW07XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvbWF4bGVuZ3RoLW1ldGhvZC9cblx0XHRtYXhsZW5ndGg6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cdFx0XHR2YXIgbGVuZ3RoID0gJC5pc0FycmF5KCB2YWx1ZSApID8gdmFsdWUubGVuZ3RoIDogdGhpcy5nZXRMZW5ndGgoIHZhbHVlLCBlbGVtZW50ICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IGxlbmd0aCA8PSBwYXJhbTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9yYW5nZWxlbmd0aC1tZXRob2QvXG5cdFx0cmFuZ2VsZW5ndGg6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cdFx0XHR2YXIgbGVuZ3RoID0gJC5pc0FycmF5KCB2YWx1ZSApID8gdmFsdWUubGVuZ3RoIDogdGhpcy5nZXRMZW5ndGgoIHZhbHVlLCBlbGVtZW50ICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8ICggbGVuZ3RoID49IHBhcmFtWyAwIF0gJiYgbGVuZ3RoIDw9IHBhcmFtWyAxIF0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9taW4tbWV0aG9kL1xuXHRcdG1pbjogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgdmFsdWUgPj0gcGFyYW07XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvbWF4LW1ldGhvZC9cblx0XHRtYXg6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IHZhbHVlIDw9IHBhcmFtO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3JhbmdlLW1ldGhvZC9cblx0XHRyYW5nZTogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgKCB2YWx1ZSA+PSBwYXJhbVsgMCBdICYmIHZhbHVlIDw9IHBhcmFtWyAxIF0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9zdGVwLW1ldGhvZC9cblx0XHRzdGVwOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXHRcdFx0dmFyIHR5cGUgPSAkKCBlbGVtZW50ICkuYXR0ciggXCJ0eXBlXCIgKSxcblx0XHRcdFx0ZXJyb3JNZXNzYWdlID0gXCJTdGVwIGF0dHJpYnV0ZSBvbiBpbnB1dCB0eXBlIFwiICsgdHlwZSArIFwiIGlzIG5vdCBzdXBwb3J0ZWQuXCIsXG5cdFx0XHRcdHN1cHBvcnRlZFR5cGVzID0gWyBcInRleHRcIiwgXCJudW1iZXJcIiwgXCJyYW5nZVwiIF0sXG5cdFx0XHRcdHJlID0gbmV3IFJlZ0V4cCggXCJcXFxcYlwiICsgdHlwZSArIFwiXFxcXGJcIiApLFxuXHRcdFx0XHRub3RTdXBwb3J0ZWQgPSB0eXBlICYmICFyZS50ZXN0KCBzdXBwb3J0ZWRUeXBlcy5qb2luKCkgKSxcblx0XHRcdFx0ZGVjaW1hbFBsYWNlcyA9IGZ1bmN0aW9uKCBudW0gKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoID0gKCBcIlwiICsgbnVtICkubWF0Y2goIC8oPzpcXC4oXFxkKykpPyQvICk7XG5cdFx0XHRcdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBOdW1iZXIgb2YgZGlnaXRzIHJpZ2h0IG9mIGRlY2ltYWwgcG9pbnQuXG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoWyAxIF0gPyBtYXRjaFsgMSBdLmxlbmd0aCA6IDA7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRvSW50ID0gZnVuY3Rpb24oIG51bSApIHtcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5yb3VuZCggbnVtICogTWF0aC5wb3coIDEwLCBkZWNpbWFscyApICk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHZhbGlkID0gdHJ1ZSxcblx0XHRcdFx0ZGVjaW1hbHM7XG5cblx0XHRcdC8vIFdvcmtzIG9ubHkgZm9yIHRleHQsIG51bWJlciBhbmQgcmFuZ2UgaW5wdXQgdHlwZXNcblx0XHRcdC8vIFRPRE8gZmluZCBhIHdheSB0byBzdXBwb3J0IGlucHV0IHR5cGVzIGRhdGUsIGRhdGV0aW1lLCBkYXRldGltZS1sb2NhbCwgbW9udGgsIHRpbWUgYW5kIHdlZWtcblx0XHRcdGlmICggbm90U3VwcG9ydGVkICkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIGVycm9yTWVzc2FnZSApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWNpbWFscyA9IGRlY2ltYWxQbGFjZXMoIHBhcmFtICk7XG5cblx0XHRcdC8vIFZhbHVlIGNhbid0IGhhdmUgdG9vIG1hbnkgZGVjaW1hbHNcblx0XHRcdGlmICggZGVjaW1hbFBsYWNlcyggdmFsdWUgKSA+IGRlY2ltYWxzIHx8IHRvSW50KCB2YWx1ZSApICUgdG9JbnQoIHBhcmFtICkgIT09IDAgKSB7XG5cdFx0XHRcdHZhbGlkID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgdmFsaWQ7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvZXF1YWxUby1tZXRob2QvXG5cdFx0ZXF1YWxUbzogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblxuXHRcdFx0Ly8gQmluZCB0byB0aGUgYmx1ciBldmVudCBvZiB0aGUgdGFyZ2V0IGluIG9yZGVyIHRvIHJldmFsaWRhdGUgd2hlbmV2ZXIgdGhlIHRhcmdldCBmaWVsZCBpcyB1cGRhdGVkXG5cdFx0XHR2YXIgdGFyZ2V0ID0gJCggcGFyYW0gKTtcblx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy5vbmZvY3Vzb3V0ICYmIHRhcmdldC5ub3QoIFwiLnZhbGlkYXRlLWVxdWFsVG8tYmx1clwiICkubGVuZ3RoICkge1xuXHRcdFx0XHR0YXJnZXQuYWRkQ2xhc3MoIFwidmFsaWRhdGUtZXF1YWxUby1ibHVyXCIgKS5vbiggXCJibHVyLnZhbGlkYXRlLWVxdWFsVG9cIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0JCggZWxlbWVudCApLnZhbGlkKCk7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdGFyZ2V0LnZhbCgpO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3JlbW90ZS1tZXRob2QvXG5cdFx0cmVtb3RlOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtLCBtZXRob2QgKSB7XG5cdFx0XHRpZiAoIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSApIHtcblx0XHRcdFx0cmV0dXJuIFwiZGVwZW5kZW5jeS1taXNtYXRjaFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRtZXRob2QgPSB0eXBlb2YgbWV0aG9kID09PSBcInN0cmluZ1wiICYmIG1ldGhvZCB8fCBcInJlbW90ZVwiO1xuXG5cdFx0XHR2YXIgcHJldmlvdXMgPSB0aGlzLnByZXZpb3VzVmFsdWUoIGVsZW1lbnQsIG1ldGhvZCApLFxuXHRcdFx0XHR2YWxpZGF0b3IsIGRhdGEsIG9wdGlvbkRhdGFTdHJpbmc7XG5cblx0XHRcdGlmICggIXRoaXMuc2V0dGluZ3MubWVzc2FnZXNbIGVsZW1lbnQubmFtZSBdICkge1xuXHRcdFx0XHR0aGlzLnNldHRpbmdzLm1lc3NhZ2VzWyBlbGVtZW50Lm5hbWUgXSA9IHt9O1xuXHRcdFx0fVxuXHRcdFx0cHJldmlvdXMub3JpZ2luYWxNZXNzYWdlID0gcHJldmlvdXMub3JpZ2luYWxNZXNzYWdlIHx8IHRoaXMuc2V0dGluZ3MubWVzc2FnZXNbIGVsZW1lbnQubmFtZSBdWyBtZXRob2QgXTtcblx0XHRcdHRoaXMuc2V0dGluZ3MubWVzc2FnZXNbIGVsZW1lbnQubmFtZSBdWyBtZXRob2QgXSA9IHByZXZpb3VzLm1lc3NhZ2U7XG5cblx0XHRcdHBhcmFtID0gdHlwZW9mIHBhcmFtID09PSBcInN0cmluZ1wiICYmIHsgdXJsOiBwYXJhbSB9IHx8IHBhcmFtO1xuXHRcdFx0b3B0aW9uRGF0YVN0cmluZyA9ICQucGFyYW0oICQuZXh0ZW5kKCB7IGRhdGE6IHZhbHVlIH0sIHBhcmFtLmRhdGEgKSApO1xuXHRcdFx0aWYgKCBwcmV2aW91cy5vbGQgPT09IG9wdGlvbkRhdGFTdHJpbmcgKSB7XG5cdFx0XHRcdHJldHVybiBwcmV2aW91cy52YWxpZDtcblx0XHRcdH1cblxuXHRcdFx0cHJldmlvdXMub2xkID0gb3B0aW9uRGF0YVN0cmluZztcblx0XHRcdHZhbGlkYXRvciA9IHRoaXM7XG5cdFx0XHR0aGlzLnN0YXJ0UmVxdWVzdCggZWxlbWVudCApO1xuXHRcdFx0ZGF0YSA9IHt9O1xuXHRcdFx0ZGF0YVsgZWxlbWVudC5uYW1lIF0gPSB2YWx1ZTtcblx0XHRcdCQuYWpheCggJC5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0bW9kZTogXCJhYm9ydFwiLFxuXHRcdFx0XHRwb3J0OiBcInZhbGlkYXRlXCIgKyBlbGVtZW50Lm5hbWUsXG5cdFx0XHRcdGRhdGFUeXBlOiBcImpzb25cIixcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0Y29udGV4dDogdmFsaWRhdG9yLmN1cnJlbnRGb3JtLFxuXHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbGlkID0gcmVzcG9uc2UgPT09IHRydWUgfHwgcmVzcG9uc2UgPT09IFwidHJ1ZVwiLFxuXHRcdFx0XHRcdFx0ZXJyb3JzLCBtZXNzYWdlLCBzdWJtaXR0ZWQ7XG5cblx0XHRcdFx0XHR2YWxpZGF0b3Iuc2V0dGluZ3MubWVzc2FnZXNbIGVsZW1lbnQubmFtZSBdWyBtZXRob2QgXSA9IHByZXZpb3VzLm9yaWdpbmFsTWVzc2FnZTtcblx0XHRcdFx0XHRpZiAoIHZhbGlkICkge1xuXHRcdFx0XHRcdFx0c3VibWl0dGVkID0gdmFsaWRhdG9yLmZvcm1TdWJtaXR0ZWQ7XG5cdFx0XHRcdFx0XHR2YWxpZGF0b3IucmVzZXRJbnRlcm5hbHMoKTtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci50b0hpZGUgPSB2YWxpZGF0b3IuZXJyb3JzRm9yKCBlbGVtZW50ICk7XG5cdFx0XHRcdFx0XHR2YWxpZGF0b3IuZm9ybVN1Ym1pdHRlZCA9IHN1Ym1pdHRlZDtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci5zdWNjZXNzTGlzdC5wdXNoKCBlbGVtZW50ICk7XG5cdFx0XHRcdFx0XHR2YWxpZGF0b3IuaW52YWxpZFsgZWxlbWVudC5uYW1lIF0gPSBmYWxzZTtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci5zaG93RXJyb3JzKCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGVycm9ycyA9IHt9O1xuXHRcdFx0XHRcdFx0bWVzc2FnZSA9IHJlc3BvbnNlIHx8IHZhbGlkYXRvci5kZWZhdWx0TWVzc2FnZSggZWxlbWVudCwgeyBtZXRob2Q6IG1ldGhvZCwgcGFyYW1ldGVyczogdmFsdWUgfSApO1xuXHRcdFx0XHRcdFx0ZXJyb3JzWyBlbGVtZW50Lm5hbWUgXSA9IHByZXZpb3VzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLmludmFsaWRbIGVsZW1lbnQubmFtZSBdID0gdHJ1ZTtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci5zaG93RXJyb3JzKCBlcnJvcnMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cHJldmlvdXMudmFsaWQgPSB2YWxpZDtcblx0XHRcdFx0XHR2YWxpZGF0b3Iuc3RvcFJlcXVlc3QoIGVsZW1lbnQsIHZhbGlkICk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHBhcmFtICkgKTtcblx0XHRcdHJldHVybiBcInBlbmRpbmdcIjtcblx0XHR9XG5cdH1cblxufSApO1xuXHJcbi8vIEFqYXggbW9kZTogYWJvcnRcbi8vIHVzYWdlOiAkLmFqYXgoeyBtb2RlOiBcImFib3J0XCJbLCBwb3J0OiBcInVuaXF1ZXBvcnRcIl19KTtcbi8vIGlmIG1vZGU6XCJhYm9ydFwiIGlzIHVzZWQsIHRoZSBwcmV2aW91cyByZXF1ZXN0IG9uIHRoYXQgcG9ydCAocG9ydCBjYW4gYmUgdW5kZWZpbmVkKSBpcyBhYm9ydGVkIHZpYSBYTUxIdHRwUmVxdWVzdC5hYm9ydCgpXG5cbnZhciBwZW5kaW5nUmVxdWVzdHMgPSB7fSxcblx0YWpheDtcblxuLy8gVXNlIGEgcHJlZmlsdGVyIGlmIGF2YWlsYWJsZSAoMS41KylcbmlmICggJC5hamF4UHJlZmlsdGVyICkge1xuXHQkLmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzZXR0aW5ncywgXywgeGhyICkge1xuXHRcdHZhciBwb3J0ID0gc2V0dGluZ3MucG9ydDtcblx0XHRpZiAoIHNldHRpbmdzLm1vZGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdGlmICggcGVuZGluZ1JlcXVlc3RzWyBwb3J0IF0gKSB7XG5cdFx0XHRcdHBlbmRpbmdSZXF1ZXN0c1sgcG9ydCBdLmFib3J0KCk7XG5cdFx0XHR9XG5cdFx0XHRwZW5kaW5nUmVxdWVzdHNbIHBvcnQgXSA9IHhocjtcblx0XHR9XG5cdH0gKTtcbn0gZWxzZSB7XG5cblx0Ly8gUHJveHkgYWpheFxuXHRhamF4ID0gJC5hamF4O1xuXHQkLmFqYXggPSBmdW5jdGlvbiggc2V0dGluZ3MgKSB7XG5cdFx0dmFyIG1vZGUgPSAoIFwibW9kZVwiIGluIHNldHRpbmdzID8gc2V0dGluZ3MgOiAkLmFqYXhTZXR0aW5ncyApLm1vZGUsXG5cdFx0XHRwb3J0ID0gKCBcInBvcnRcIiBpbiBzZXR0aW5ncyA/IHNldHRpbmdzIDogJC5hamF4U2V0dGluZ3MgKS5wb3J0O1xuXHRcdGlmICggbW9kZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0aWYgKCBwZW5kaW5nUmVxdWVzdHNbIHBvcnQgXSApIHtcblx0XHRcdFx0cGVuZGluZ1JlcXVlc3RzWyBwb3J0IF0uYWJvcnQoKTtcblx0XHRcdH1cblx0XHRcdHBlbmRpbmdSZXF1ZXN0c1sgcG9ydCBdID0gYWpheC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRyZXR1cm4gcGVuZGluZ1JlcXVlc3RzWyBwb3J0IF07XG5cdFx0fVxuXHRcdHJldHVybiBhamF4LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0fTtcbn1cbnJldHVybiAkO1xyXG59KSk7IiwiIWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUocil7aWYoaVtyXSlyZXR1cm4gaVtyXS5leHBvcnRzO3ZhciBzPWlbcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiB0W3JdLmNhbGwocy5leHBvcnRzLHMscy5leHBvcnRzLGUpLHMubD0hMCxzLmV4cG9ydHN9dmFyIGk9e307ZS5tPXQsZS5jPWksZS5pPWZ1bmN0aW9uKHQpe3JldHVybiB0fSxlLmQ9ZnVuY3Rpb24odCxpLHIpe2Uubyh0LGkpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxpLHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCxnZXQ6cn0pfSxlLm49ZnVuY3Rpb24odCl7dmFyIGk9dCYmdC5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIHQuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gdH07cmV0dXJuIGUuZChpLFwiYVwiLGkpLGl9LGUubz1mdW5jdGlvbih0LGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxlKX0sZS5wPVwiXCIsZShlLnM9Myl9KFtmdW5jdGlvbih0LGUsaSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcih0LGUpe2Zvcih2YXIgaSBpbiB0KXQuaGFzT3duUHJvcGVydHkoaSkmJmUoaSx0W2ldKX12YXIgcz0hMTt0cnl7dmFyIG89T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtzPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLG51bGwsbyl9Y2F0Y2godCl7fXQuZXhwb3J0cy5ldmVudD1mdW5jdGlvbih0LGUsaSxyKXt2YXIgbz1cIm9uXCI9PXI/XCJhZGRcIjpcInJlbW92ZVwiO2Uuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHI9ITE7LTEhPVtcInNjcm9sbFwiLFwidG91Y2hzdGFydFwiLFwidG91Y2htb3ZlXCJdLmluZGV4T2YoZSkmJnMmJihyPXtwYXNzaXZlOiEwfSksdFtvK1wiRXZlbnRMaXN0ZW5lclwiXShlLGkscil9KX0sdC5leHBvcnRzLmNzcz1mdW5jdGlvbih0LGUsaSl7dmFyIHM7aWYodm9pZCAwPT09aSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIHQuc3R5bGVbZV07cz1lfWVsc2Ugcz17fSxzW2VdPWk7cihzLGZ1bmN0aW9uKGUsaSl7dC5zdHlsZVtlXT1pfSl9LHQuZXhwb3J0cy5hZGQ9ZnVuY3Rpb24odCxlKXtlJiZ0LmNsYXNzTGlzdC5hZGQoZSl9LHQuZXhwb3J0cy5ybT1mdW5jdGlvbih0LGUpe2UmJnQuY2xhc3NMaXN0LnJlbW92ZShlKX0sdC5leHBvcnRzLmhhcz1mdW5jdGlvbih0LGUpe3JldHVybiEhZSYmdC5jbGFzc0xpc3QuY29udGFpbnMoZSl9LHQuZXhwb3J0cy5jbG9uZT1mdW5jdGlvbih0KXt2YXIgZT17fTtyZXR1cm4gcih0fHx7fSxmdW5jdGlvbih0LGkpe2VbdF09aX0pLGV9LHQuZXhwb3J0cy5xcz1mdW5jdGlvbih0LGUpe3JldHVybiB0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ/dDooZXx8ZG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3IodCl9LHQuZXhwb3J0cy5lYWNoPXJ9LGZ1bmN0aW9uKHQsZSxpKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKHQpe3ZhciBlLGkscj10JiZ0WzBdfHx0LHM9XCJzdHJpbmdcIj09dHlwZW9mIHR8fHIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCxvPXM/e3Jvb3Q6dH06bSh0KSxuPXtkaXJlY3Rpb246XCJ2XCIsYmFyT25DbHM6XCJfc2Nyb2xsYmFyXCIscmVzaXplRGVib3VuY2U6MCxldmVudDpwLGNzc0d1cnU6ITEsaW1wYWN0Olwic2Nyb2xsZXJcIixwb3NpdGlvbjpcInN0YXRpY1wifTtvPW98fHt9O2Zvcih2YXIgYSBpbiBuKW51bGw9PW9bYV0mJihvW2FdPW5bYV0pO2U9dGhpcyYmdGhpcyBpbnN0YW5jZW9mIHUualF1ZXJ5LG8uX2NoYWluP2k9by5yb290OmU/by5yb290PWk9dGhpc1swXTppPWIoby5yb290fHxvLnNjcm9sbGVyKTt2YXIgaD1sKGksby5kaXJlY3Rpb24pLGY9K2g7aWYoby5pbmRleD1mLGY9PWYmJm51bGwhPT1oJiZ6W2ZdKXJldHVybiB6W2ZdO28ucm9vdCYmby5zY3JvbGxlcj9vLnNjcm9sbGVyPWIoby5zY3JvbGxlcixpKTpvLnNjcm9sbGVyPWksby5yb290PWk7dmFyIGQ9YyhvKTtyZXR1cm4gZC5hdXRvVXBkYXRlJiZkLmF1dG9VcGRhdGUoKSxkfWZ1bmN0aW9uIHModCxlKXt2YXIgaT0wLHI9dDtmb3Iodm9pZCAwIT09ci5sZW5ndGgmJnIhPT11fHwocj1bcl0pO3JbaV07KWUuY2FsbCh0aGlzLHJbaV0saSksaSsrfWZ1bmN0aW9uIG8oKXtyZXR1cm4obmV3IERhdGUpLmdldFRpbWUoKX1mdW5jdGlvbiBuKHQsZSxpKXt0Ll9ldmVudEhhbmRsZXJzPXQuX2V2ZW50SGFuZGxlcnN8fFt7ZWxlbWVudDp0LnNjcm9sbGVyLGhhbmRsZXI6ZnVuY3Rpb24oZSl7dC5zY3JvbGwoZSl9LHR5cGU6XCJzY3JvbGxcIn0se2VsZW1lbnQ6dC5yb290LGhhbmRsZXI6ZnVuY3Rpb24oKXt0LnVwZGF0ZSgpfSx0eXBlOlwidHJhbnNpdGlvbmVuZCBhbmltYXRpb25lbmRcIn0se2VsZW1lbnQ6dC5zY3JvbGxlcixoYW5kbGVyOmZ1bmN0aW9uKCl7dC51cGRhdGUoKX0sdHlwZTpcImtleXVwXCJ9LHtlbGVtZW50OnQuYmFyLGhhbmRsZXI6ZnVuY3Rpb24oZSl7ZS5wcmV2ZW50RGVmYXVsdCgpLHQuc2VsZWN0aW9uKCksdC5kcmFnLm5vdz0xLHQuZHJhZ2dpbmdDbHMmJmQodC5yb290LHQuZHJhZ2dpbmdDbHMpfSx0eXBlOlwidG91Y2hzdGFydCBtb3VzZWRvd25cIn0se2VsZW1lbnQ6ZG9jdW1lbnQsaGFuZGxlcjpmdW5jdGlvbigpe3Quc2VsZWN0aW9uKDEpLHQuZHJhZy5ub3c9MCx0LmRyYWdnaW5nQ2xzJiZnKHQucm9vdCx0LmRyYWdnaW5nQ2xzKX0sdHlwZTpcIm1vdXNldXAgYmx1ciB0b3VjaGVuZFwifSx7ZWxlbWVudDpkb2N1bWVudCxoYW5kbGVyOmZ1bmN0aW9uKGUpezIhPWUuYnV0dG9uJiZ0Ll9wb3MwKGUpfSx0eXBlOlwidG91Y2hzdGFydCBtb3VzZWRvd25cIn0se2VsZW1lbnQ6ZG9jdW1lbnQsaGFuZGxlcjpmdW5jdGlvbihlKXt0LmRyYWcubm93JiZ0LmRyYWcoZSl9LHR5cGU6XCJtb3VzZW1vdmUgdG91Y2htb3ZlXCJ9LHtlbGVtZW50OnUsaGFuZGxlcjpmdW5jdGlvbigpe3QudXBkYXRlKCl9LHR5cGU6XCJyZXNpemVcIn0se2VsZW1lbnQ6dC5yb290LGhhbmRsZXI6ZnVuY3Rpb24oKXt0LnVwZGF0ZSgpfSx0eXBlOlwic2l6ZUNoYW5nZVwifSx7ZWxlbWVudDp0LmNsaXBwZXIsaGFuZGxlcjpmdW5jdGlvbigpe3QuY2xpcHBlck9uU2Nyb2xsKCl9LHR5cGU6XCJzY3JvbGxcIn1dLHModC5fZXZlbnRIYW5kbGVycyxmdW5jdGlvbih0KXtpZih0LmVsZW1lbnQpaWYodC5lbGVtZW50Lmxlbmd0aCYmdC5lbGVtZW50IT09dSlmb3IodmFyIHI9MDtyPHQuZWxlbWVudC5sZW5ndGg7cisrKWUodC5lbGVtZW50W3JdLHQudHlwZSx0LmhhbmRsZXIsaSk7ZWxzZSBlKHQuZWxlbWVudCx0LnR5cGUsdC5oYW5kbGVyLGkpfSl9ZnVuY3Rpb24gbCh0LGUsaSxyKXt2YXIgcz1cImRhdGEtYmFyb24tXCIrZStcIi1pZFwiO3JldHVyblwib25cIj09aT90LnNldEF0dHJpYnV0ZShzLHIpOlwib2ZmXCI9PWkmJnQucmVtb3ZlQXR0cmlidXRlKHMpLHQuZ2V0QXR0cmlidXRlKHMpfWZ1bmN0aW9uIGModCl7dmFyIGU9bmV3IHIucHJvdG90eXBlLmNvbnN0cnVjdG9yKHQpO3JldHVybiBuKGUsdC5ldmVudCxcIm9uXCIpLGwoZS5yb290LHQuZGlyZWN0aW9uLFwib25cIix6Lmxlbmd0aCksei5wdXNoKGUpLGUudXBkYXRlKCksZX1mdW5jdGlvbiBhKHQpe2lmKHRoaXMuZXZlbnRzJiZ0aGlzLmV2ZW50c1t0XSlmb3IodmFyIGU9MDtlPHRoaXMuZXZlbnRzW3RdLmxlbmd0aDtlKyspe3ZhciBpPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKTt0aGlzLmV2ZW50c1t0XVtlXS5hcHBseSh0aGlzLGkpfX12YXIgaD1mdW5jdGlvbigpe3JldHVybiB0aGlzfHwoMCxldmFsKShcInRoaXNcIil9KCksdT1oJiZoLndpbmRvd3x8aCxwPWkoMCkuZXZlbnQsZj1pKDApLmNzcyxkPWkoMCkuYWRkLHY9aSgwKS5oYXMsZz1pKDApLnJtLG09aSgwKS5jbG9uZSxiPWkoMCkucXMseT1yLHg9W1wibGVmdFwiLFwidG9wXCIsXCJyaWdodFwiLFwiYm90dG9tXCIsXCJ3aWR0aFwiLFwiaGVpZ2h0XCJdLHo9W10sdz17djp7eDpcIllcIixwb3M6eFsxXSxvcHBvczp4WzNdLGNyb3NzUG9zOnhbMF0sY3Jvc3NPcFBvczp4WzJdLHNpemU6eFs1XSxjcm9zc1NpemU6eFs0XSxjcm9zc01pblNpemU6XCJtaW4tXCIreFs0XSxjcm9zc01heFNpemU6XCJtYXgtXCIreFs0XSxjbGllbnQ6XCJjbGllbnRIZWlnaHRcIixjcm9zc0NsaWVudDpcImNsaWVudFdpZHRoXCIsc2Nyb2xsRWRnZTpcInNjcm9sbExlZnRcIixvZmZzZXQ6XCJvZmZzZXRIZWlnaHRcIixjcm9zc09mZnNldDpcIm9mZnNldFdpZHRoXCIsb2Zmc2V0UG9zOlwib2Zmc2V0VG9wXCIsc2Nyb2xsOlwic2Nyb2xsVG9wXCIsc2Nyb2xsU2l6ZTpcInNjcm9sbEhlaWdodFwifSxoOnt4OlwiWFwiLHBvczp4WzBdLG9wcG9zOnhbMl0sY3Jvc3NQb3M6eFsxXSxjcm9zc09wUG9zOnhbM10sc2l6ZTp4WzRdLGNyb3NzU2l6ZTp4WzVdLGNyb3NzTWluU2l6ZTpcIm1pbi1cIit4WzVdLGNyb3NzTWF4U2l6ZTpcIm1heC1cIit4WzVdLGNsaWVudDpcImNsaWVudFdpZHRoXCIsY3Jvc3NDbGllbnQ6XCJjbGllbnRIZWlnaHRcIixzY3JvbGxFZGdlOlwic2Nyb2xsVG9wXCIsb2Zmc2V0Olwib2Zmc2V0V2lkdGhcIixjcm9zc09mZnNldDpcIm9mZnNldEhlaWdodFwiLG9mZnNldFBvczpcIm9mZnNldExlZnRcIixzY3JvbGw6XCJzY3JvbGxMZWZ0XCIsc2Nyb2xsU2l6ZTpcInNjcm9sbFdpZHRoXCJ9fSxDPTE1LFM9L1tcXHNcXFNdKk1hY2ludG9zaFtcXHNcXFNdKlxcKSBHZWNrb1tcXHNcXFNdKi8sXz1TLnRlc3QodS5uYXZpZ2F0b3ImJnUubmF2aWdhdG9yLnVzZXJBZ2VudCk7ci5wcm90b3R5cGU9e19kZWJvdW5jZTpmdW5jdGlvbih0LGUpe3ZhciBpLHIscz10aGlzLG49ZnVuY3Rpb24oKXtpZihzLl9kaXNwb3NlZClyZXR1cm4gY2xlYXJUaW1lb3V0KGkpLHZvaWQoaT1zPW51bGwpO3ZhciBsPW8oKS1yO2w8ZSYmbD49MD9pPXNldFRpbWVvdXQobixlLWwpOihpPW51bGwsdCgpKX07cmV0dXJuIGZ1bmN0aW9uKCl7cj1vKCksaXx8KGk9c2V0VGltZW91dChuLGUpKX19LGNvbnN0cnVjdG9yOmZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUodCl7dmFyIGU9dGhpcy5iYXJNaW5TaXplfHwyMCxpPXQ7aT4wJiZpPGUmJihpPWUpLHRoaXMuYmFyJiZmKHRoaXMuYmFyLHRoaXMub3JpZ2luLnNpemUscGFyc2VJbnQoaSwxMCkrXCJweFwiKX1mdW5jdGlvbiBpKHQpe2lmKHRoaXMuYmFyKXt2YXIgZT1mKHRoaXMuYmFyLHRoaXMub3JpZ2luLnBvcyksaT0rdCtcInB4XCI7aSYmaSE9ZSYmZih0aGlzLmJhcix0aGlzLm9yaWdpbi5wb3MsaSl9fWZ1bmN0aW9uIHIoKXtyZXR1cm4gcFt0aGlzLm9yaWdpbi5jbGllbnRdLXRoaXMuYmFyVG9wTGltaXQtdGhpcy5iYXJbdGhpcy5vcmlnaW4ub2Zmc2V0XX1mdW5jdGlvbiBzKHQpe3JldHVybiB0KnIuY2FsbCh0aGlzKSt0aGlzLmJhclRvcExpbWl0fWZ1bmN0aW9uIG4odCl7cmV0dXJuKHQtdGhpcy5iYXJUb3BMaW1pdCkvci5jYWxsKHRoaXMpfWZ1bmN0aW9uIGwoKXtyZXR1cm4hMX12YXIgYyxoLHAsbSx5LHgsejtpZih4PW8oKSx0aGlzLnBhcmFtcz10LHRoaXMuZXZlbnQ9dC5ldmVudCx0aGlzLmV2ZW50cz17fSx0aGlzLnJvb3Q9dC5yb290LHRoaXMuc2Nyb2xsZXI9Yih0LnNjcm9sbGVyKSx0aGlzLmJhcj1iKHQuYmFyLHRoaXMucm9vdCkscD10aGlzLnRyYWNrPWIodC50cmFjayx0aGlzLnJvb3QpLCF0aGlzLnRyYWNrJiZ0aGlzLmJhciYmKHA9dGhpcy5iYXIucGFyZW50Tm9kZSksdGhpcy5jbGlwcGVyPXRoaXMuc2Nyb2xsZXIucGFyZW50Tm9kZSx0aGlzLmRpcmVjdGlvbj10LmRpcmVjdGlvbix0aGlzLnJ0bD10LnJ0bCx0aGlzLm9yaWdpbj13W3RoaXMuZGlyZWN0aW9uXSx0aGlzLmJhck9uQ2xzPXQuYmFyT25DbHMsdGhpcy5zY3JvbGxpbmdDbHM9dC5zY3JvbGxpbmdDbHMsdGhpcy5kcmFnZ2luZ0Nscz10LmRyYWdnaW5nQ2xzLHRoaXMuaW1wYWN0PXQuaW1wYWN0LHRoaXMucG9zaXRpb249dC5wb3NpdGlvbix0aGlzLnJ0bD10LnJ0bCx0aGlzLmJhclRvcExpbWl0PTAsdGhpcy5yZXNpemVEZWJvdW5jZT10LnJlc2l6ZURlYm91bmNlLHRoaXMuY3Vyc29yPWZ1bmN0aW9uKHQpe3JldHVybiB0W1wiY2xpZW50XCIrdGhpcy5vcmlnaW4ueF18fCgoKHQub3JpZ2luYWxFdmVudHx8dCkudG91Y2hlc3x8e30pWzBdfHx7fSlbXCJwYWdlXCIrdGhpcy5vcmlnaW4ueF19LHRoaXMucG9zPWZ1bmN0aW9uKHQpe3ZhciBlPVwicGFnZVwiK3RoaXMub3JpZ2luLngrXCJPZmZzZXRcIixpPXRoaXMuc2Nyb2xsZXJbZV0/ZTp0aGlzLm9yaWdpbi5zY3JvbGw7cmV0dXJuIHZvaWQgMCE9PXQmJih0aGlzLnNjcm9sbGVyW2ldPXQpLHRoaXMuc2Nyb2xsZXJbaV19LHRoaXMucnBvcz1mdW5jdGlvbih0KXt2YXIgZT10aGlzLnNjcm9sbGVyW3RoaXMub3JpZ2luLnNjcm9sbFNpemVdLXRoaXMuc2Nyb2xsZXJbdGhpcy5vcmlnaW4uY2xpZW50XTtyZXR1cm4odD90aGlzLnBvcyh0KmUpOnRoaXMucG9zKCkpLyhlfHwxKX0sdGhpcy5iYXJPbj1mdW5jdGlvbih0KXtpZih0aGlzLmJhck9uQ2xzKXt2YXIgZT10aGlzLnNjcm9sbGVyW3RoaXMub3JpZ2luLmNsaWVudF0+PXRoaXMuc2Nyb2xsZXJbdGhpcy5vcmlnaW4uc2Nyb2xsU2l6ZV07dHx8ZT92KHRoaXMucm9vdCx0aGlzLmJhck9uQ2xzKSYmZyh0aGlzLnJvb3QsdGhpcy5iYXJPbkNscyk6dih0aGlzLnJvb3QsdGhpcy5iYXJPbkNscyl8fGQodGhpcy5yb290LHRoaXMuYmFyT25DbHMpfX0sdGhpcy5fcG9zMD1mdW5jdGlvbih0KXtoPXRoaXMuY3Vyc29yKHQpLWN9LHRoaXMuZHJhZz1mdW5jdGlvbih0KXt2YXIgZT1uLmNhbGwodGhpcyx0aGlzLmN1cnNvcih0KS1oKSxpPXRoaXMuc2Nyb2xsZXJbdGhpcy5vcmlnaW4uc2Nyb2xsU2l6ZV0tdGhpcy5zY3JvbGxlclt0aGlzLm9yaWdpbi5jbGllbnRdO3RoaXMuc2Nyb2xsZXJbdGhpcy5vcmlnaW4uc2Nyb2xsXT1lKml9LHRoaXMuc2VsZWN0aW9uPWZ1bmN0aW9uKHQpe3RoaXMuZXZlbnQoZG9jdW1lbnQsXCJzZWxlY3Rwb3Mgc2VsZWN0c3RhcnRcIixsLHQ/XCJvZmZcIjpcIm9uXCIpfSx0aGlzLnJlc2l6ZT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt2YXIgdCxpLHI9ZS5zY3JvbGxlcltlLm9yaWdpbi5jcm9zc09mZnNldF0scz1lLnNjcm9sbGVyW2Uub3JpZ2luLmNyb3NzQ2xpZW50XSxuPTA7aWYoXz9uPUM6cz4wJiYwPT09ciYmKHI9cysxNykscilpZihlLmJhck9uKCksXCJzY3JvbGxlclwiPT1lLmltcGFjdCl7dmFyIGw9ci1zK247aWYoXCJzdGF0aWNcIj09ZS5wb3NpdGlvbil0PWYoZS5zY3JvbGxlcixlLm9yaWdpbi5jcm9zc1NpemUpLGk9ZS5jbGlwcGVyW2Uub3JpZ2luLmNyb3NzQ2xpZW50XStsK1wicHhcIix0IT1pJiZlLl9zZXRDcm9zc1NpemVzKGUuc2Nyb2xsZXIsaSk7ZWxzZXt2YXIgYz17fSxoPWUucnRsP1wiTGVmdFwiOlwiUmlnaHRcIjtcImhcIj09ZS5kaXJlY3Rpb24mJihoPVwiQm90dG9tXCIpLGNbXCJwYWRkaW5nXCIraF09bCtcInB4XCIsZihlLnNjcm9sbGVyLGMpfX1lbHNlIHQ9ZihlLmNsaXBwZXIsZS5vcmlnaW4uY3Jvc3NTaXplKSxpPXMrXCJweFwiLHQhPWkmJmUuX3NldENyb3NzU2l6ZXMoZS5jbGlwcGVyLGkpO0FycmF5LnByb3RvdHlwZS51bnNoaWZ0LmNhbGwoYXJndW1lbnRzLFwicmVzaXplXCIpLGEuYXBwbHkoZSxhcmd1bWVudHMpLHg9bygpfXZhciBlPXRoaXMsaT12b2lkIDA9PT1lLnJlc2l6ZURlYm91bmNlPzMwMDplLnJlc2l6ZURlYm91bmNlLHI9MDtvKCkteDxpJiYoY2xlYXJUaW1lb3V0KG0pLHI9aSkscj9tPXNldFRpbWVvdXQodCxyKTp0KCl9LHRoaXMudXBkYXRlUG9zaXRpb25zPWZ1bmN0aW9uKHQpe3ZhciByLG89dGhpcztvLmJhciYmKHI9KHBbby5vcmlnaW4uY2xpZW50XS1vLmJhclRvcExpbWl0KSpvLnNjcm9sbGVyW28ub3JpZ2luLmNsaWVudF0vby5zY3JvbGxlcltvLm9yaWdpbi5zY3JvbGxTaXplXSwodHx8cGFyc2VJbnQoeiwxMCkhPXBhcnNlSW50KHIsMTApKSYmKGUuY2FsbChvLHIpLHo9ciksYz1zLmNhbGwobyxvLnJwb3MoKSksaS5jYWxsKG8sYykpLEFycmF5LnByb3RvdHlwZS51bnNoaWZ0LmNhbGwoYXJndW1lbnRzLFwic2Nyb2xsXCIpLGEuYXBwbHkobyxhcmd1bWVudHMpfSx0aGlzLnNjcm9sbD1mdW5jdGlvbigpe3ZhciB0PXRoaXM7dC51cGRhdGVQb3NpdGlvbnMoKSx0LnNjcm9sbGluZ0NscyYmKHl8fGQodC5yb290LHQuc2Nyb2xsaW5nQ2xzKSxjbGVhclRpbWVvdXQoeSkseT1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Zyh0LnJvb3QsdC5zY3JvbGxpbmdDbHMpLHk9dm9pZCAwfSwzMDApKX0sdGhpcy5jbGlwcGVyT25TY3JvbGw9ZnVuY3Rpb24oKXt0aGlzLnJ0bD90aGlzLmNsaXBwZXJbdGhpcy5vcmlnaW4uc2Nyb2xsRWRnZV09dGhpcy5jbGlwcGVyW3RoaXMub3JpZ2luLnNjcm9sbFNpemVdOnRoaXMuY2xpcHBlclt0aGlzLm9yaWdpbi5zY3JvbGxFZGdlXT0wfSx0aGlzLl9zZXRDcm9zc1NpemVzPWZ1bmN0aW9uKHQsZSl7dmFyIGk9e307aVt0aGlzLm9yaWdpbi5jcm9zc1NpemVdPWUsaVt0aGlzLm9yaWdpbi5jcm9zc01pblNpemVdPWUsaVt0aGlzLm9yaWdpbi5jcm9zc01heFNpemVdPWUsZih0LGkpfSx0aGlzLl9kdW1iQ3NzPWZ1bmN0aW9uKGUpe2lmKCF0LmNzc0d1cnUpe3ZhciBpPWU/XCJoaWRkZW5cIjpudWxsLHI9ZT9cIm5vbmVcIjpudWxsO2YodGhpcy5jbGlwcGVyLHtvdmVyZmxvdzppLG1zT3ZlcmZsb3dTdHlsZTpyLHBvc2l0aW9uOlwic3RhdGljXCI9PXRoaXMucG9zaXRpb24/XCJcIjpcInJlbGF0aXZlXCJ9KTt2YXIgcz1lP1wic2Nyb2xsXCI6bnVsbCxvPVwidlwiPT10aGlzLmRpcmVjdGlvbj9cInlcIjpcInhcIixuPXt9O25bXCJvdmVyZmxvdy1cIitvXT1zLG5bXCJib3gtc2l6aW5nXCJdPVwiYm9yZGVyLWJveFwiLG4ubWFyZ2luPVwiMFwiLG4uYm9yZGVyPVwiMFwiLFwiYWJzb2x1dGVcIj09dGhpcy5wb3NpdGlvbiYmKG4ucG9zaXRpb249XCJhYnNvbHV0ZVwiLG4udG9wPVwiMFwiLFwiaFwiPT10aGlzLmRpcmVjdGlvbj9uLmxlZnQ9bi5yaWdodD1cIjBcIjoobi5ib3R0b209XCIwXCIsbi5yaWdodD10aGlzLnJ0bD9cIjBcIjpcIlwiLG4ubGVmdD10aGlzLnJ0bD9cIlwiOlwiMFwiKSksZih0aGlzLnNjcm9sbGVyLG4pfX0sdGhpcy5fZHVtYkNzcyghMCksXyl7dmFyIFM9XCJwYWRkaW5nUmlnaHRcIixPPXt9LFQ9dS5nZXRDb21wdXRlZFN0eWxlKHRoaXMuc2Nyb2xsZXIpW1tTXV07XCJoXCI9PXQuZGlyZWN0aW9uP1M9XCJwYWRkaW5nQm90dG9tXCI6dC5ydGwmJihTPVwicGFkZGluZ0xlZnRcIik7dmFyIEw9cGFyc2VJbnQoVCwxMCk7TCE9TCYmKEw9MCksT1tTXT1DK0wrXCJweFwiLGYodGhpcy5zY3JvbGxlcixPKX1yZXR1cm4gdGhpc30sdXBkYXRlOmZ1bmN0aW9uKHQpe3JldHVybiBhLmNhbGwodGhpcyxcInVwZFwiLHQpLHRoaXMucmVzaXplKDEpLHRoaXMudXBkYXRlUG9zaXRpb25zKDEpLHRoaXN9LGRpc3Bvc2U6ZnVuY3Rpb24oKXtuKHRoaXMsdGhpcy5ldmVudCxcIm9mZlwiKSxsKHRoaXMucm9vdCx0aGlzLnBhcmFtcy5kaXJlY3Rpb24sXCJvZmZcIiksXCJ2XCI9PXRoaXMucGFyYW1zLmRpcmVjdGlvbj90aGlzLl9zZXRDcm9zc1NpemVzKHRoaXMuc2Nyb2xsZXIsXCJcIik6dGhpcy5fc2V0Q3Jvc3NTaXplcyh0aGlzLmNsaXBwZXIsXCJcIiksdGhpcy5fZHVtYkNzcyghMSksdGhpcy5iYXJPbighMCksYS5jYWxsKHRoaXMsXCJkaXNwb3NlXCIpLHpbdGhpcy5wYXJhbXMuaW5kZXhdPW51bGwsdGhpcy5wYXJhbXM9bnVsbCx0aGlzLl9kaXNwb3NlZD0hMH0sb246ZnVuY3Rpb24odCxlLGkpe2Zvcih2YXIgcj10LnNwbGl0KFwiIFwiKSxzPTA7czxyLmxlbmd0aDtzKyspXCJpbml0XCI9PXJbc10/ZS5jYWxsKHRoaXMsaSk6KHRoaXMuZXZlbnRzW3Jbc11dPXRoaXMuZXZlbnRzW3Jbc11dfHxbXSx0aGlzLmV2ZW50c1tyW3NdXS5wdXNoKGZ1bmN0aW9uKHQpe2UuY2FsbCh0aGlzLHR8fGkpfSkpfSxiYXJvbjpmdW5jdGlvbih0KXtyZXR1cm4gdC5yb290PXRoaXMucGFyYW1zLnJvb3QsdC5zY3JvbGxlcj10aGlzLnBhcmFtcy5zY3JvbGxlcix0LmRpcmVjdGlvbj1cInZcIj09dGhpcy5wYXJhbXMuZGlyZWN0aW9uP1wiaFwiOlwidlwiLHQuX2NoYWluPSEwLHIodCl9fSxyLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGU9ci5wcm90b3R5cGUsci5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIHUuYmFyb249eSxyfSxyLnZlcnNpb249XCIzLjAuMVwiLHIucHJvdG90eXBlLmF1dG9VcGRhdGU9aSgyKSh1KSxyLnByb3RvdHlwZS5maXg9aSg1KSxyLnByb3RvdHlwZS5jb250cm9scz1pKDQpLHQuZXhwb3J0cz1yfSxmdW5jdGlvbih0LGUsaSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcih0KXtmdW5jdGlvbiBlKCl7by5yb290W28ub3JpZ2luLm9mZnNldF0/cigpOmkoKX1mdW5jdGlvbiBpKCl7c3x8KHM9c2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtvLnJvb3Rbby5vcmlnaW4ub2Zmc2V0XSYmKHIoKSxvLnVwZGF0ZSgpKX0sMzAwKSl9ZnVuY3Rpb24gcigpe2NsZWFySW50ZXJ2YWwocykscz1udWxsfXZhciBzLG89dGhpcztpZighdGhpcy5fYXUpe3ZhciBuPW8uX2RlYm91bmNlKGZ1bmN0aW9uKCl7by51cGRhdGUoKX0sMzAwKTt0aGlzLl9vYnNlcnZlcj1uZXcgdChmdW5jdGlvbigpe2UoKSxvLnVwZGF0ZSgpLG4oKX0pLHRoaXMub24oXCJpbml0XCIsZnVuY3Rpb24oKXtvLl9vYnNlcnZlci5vYnNlcnZlKG8ucm9vdCx7Y2hpbGRMaXN0OiEwLHN1YnRyZWU6ITAsY2hhcmFjdGVyRGF0YTohMH0pLGUoKX0pLHRoaXMub24oXCJkaXNwb3NlXCIsZnVuY3Rpb24oKXtvLl9vYnNlcnZlci5kaXNjb25uZWN0KCkscigpLGRlbGV0ZSBvLl9vYnNlcnZlcn0pLHRoaXMuX2F1PSEwfX10LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGU9dC5NdXRhdGlvbk9ic2VydmVyfHx0LldlYktpdE11dGF0aW9uT2JzZXJ2ZXJ8fHQuTW96TXV0YXRpb25PYnNlcnZlcnx8bnVsbDtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZT8oci5jYWxsKHRoaXMsZSksdGhpcyk6dGhpc319fSxmdW5jdGlvbih0LGUsaSl7dmFyIHI9aSgxKTt3aW5kb3cuYmFyb249cix3aW5kb3cualF1ZXJ5JiZ3aW5kb3cualF1ZXJ5LmZuJiYod2luZG93LmpRdWVyeS5mbi5iYXJvbj1yKX0sZnVuY3Rpb24odCxlLGkpe1widXNlIHN0cmljdFwiO3ZhciByPWkoMCkucXM7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlLGkscyxvLG4sbD10aGlzO289dC5zY3JlZW58fC45LHQuZm9yd2FyZCYmKGU9cih0LmZvcndhcmQsdGhpcy5jbGlwcGVyKSxuPXtlbGVtZW50OmUsaGFuZGxlcjpmdW5jdGlvbigpe3ZhciBlPWwucG9zKCkrKHQuZGVsdGF8fDMwKTtsLnBvcyhlKX0sdHlwZTpcImNsaWNrXCJ9LHRoaXMuX2V2ZW50SGFuZGxlcnMucHVzaChuKSx0aGlzLmV2ZW50KG4uZWxlbWVudCxuLnR5cGUsbi5oYW5kbGVyLFwib25cIikpLHQuYmFja3dhcmQmJihpPXIodC5iYWNrd2FyZCx0aGlzLmNsaXBwZXIpLG49e2VsZW1lbnQ6aSxoYW5kbGVyOmZ1bmN0aW9uKCl7dmFyIGU9bC5wb3MoKS0odC5kZWx0YXx8MzApO2wucG9zKGUpfSx0eXBlOlwiY2xpY2tcIn0sdGhpcy5fZXZlbnRIYW5kbGVycy5wdXNoKG4pLHRoaXMuZXZlbnQobi5lbGVtZW50LG4udHlwZSxuLmhhbmRsZXIsXCJvblwiKSksdC50cmFjayYmKHM9ITA9PT10LnRyYWNrP3RoaXMudHJhY2s6cih0LnRyYWNrLHRoaXMuY2xpcHBlcikpJiYobj17ZWxlbWVudDpzLGhhbmRsZXI6ZnVuY3Rpb24odCl7aWYodC50YXJnZXQ9PXMpe3ZhciBlPXRbXCJvZmZzZXRcIitsLm9yaWdpbi54XSxpPWwuYmFyW2wub3JpZ2luLm9mZnNldFBvc10scj0wO2U8aT9yPS0xOmU+aStsLmJhcltsLm9yaWdpbi5vZmZzZXRdJiYocj0xKTt2YXIgbj1sLnBvcygpK3IqbypsLnNjcm9sbGVyW2wub3JpZ2luLmNsaWVudF07bC5wb3Mobil9fSx0eXBlOlwibW91c2Vkb3duXCJ9LHRoaXMuX2V2ZW50SGFuZGxlcnMucHVzaChuKSx0aGlzLmV2ZW50KG4uZWxlbWVudCxuLnR5cGUsbi5oYW5kbGVyLFwib25cIikpfX0sZnVuY3Rpb24odCxlLGkpe1widXNlIHN0cmljdFwiO3ZhciByPShpKDYpLGkoMCkuY3NzKSxzPWkoMCkuYWRkLG89aSgwKS5ybTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSh0LGUsaSl7dmFyIG49ZSxoPTE9PWk/XCJwb3NcIjpcIm9wcG9zXCI7YzwoYS5taW5WaWV3fHwwKSYmKG49dm9pZCAwKSxyKGxbdF0sdGhpcy5vcmlnaW4ucG9zLFwiXCIpLHIobFt0XSx0aGlzLm9yaWdpbi5vcHBvcyxcIlwiKSxvKGxbdF0sYS5vdXRzaWRlKSx2b2lkIDAhPT1uJiYobis9XCJweFwiLHIobFt0XSx0aGlzLm9yaWdpbltoXSxuKSxzKGxbdF0sYS5vdXRzaWRlKSl9ZnVuY3Rpb24gaSh0KXt0cnl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJXaGVlbEV2ZW50XCIpO2UuaW5pdFdlYktpdFdoZWVsRXZlbnQodC5vcmlnaW5hbEV2ZW50LndoZWVsRGVsdGFYLHQub3JpZ2luYWxFdmVudC53aGVlbERlbHRhWSksZi5kaXNwYXRjaEV2ZW50KGUpLHQucHJldmVudERlZmF1bHQoKX1jYXRjaCh0KXt9fWZ1bmN0aW9uIG4odCl7dmFyIGU7Zm9yKHZhciBzIGluIHQpYVtzXT10W3NdO2lmKGEuZWxlbWVudHMgaW5zdGFuY2VvZiBIVE1MRWxlbWVudD9sPVthLmVsZW1lbnRzXTpcInN0cmluZ1wiPT10eXBlb2YgYS5lbGVtZW50cz9sPXRoaXMuc2Nyb2xsZXIucXVlcnlTZWxlY3RvckFsbChhLmVsZW1lbnRzKTphLmVsZW1lbnRzJiZhLmVsZW1lbnRzWzBdaW5zdGFuY2VvZiBIVE1MRWxlbWVudCYmKGw9YS5lbGVtZW50cyksbCl7Yz10aGlzLnNjcm9sbGVyW3RoaXMub3JpZ2luLmNsaWVudF07Zm9yKHZhciBvPTA7bzxsLmxlbmd0aDtvKyspZT17fSxlW3RoaXMub3JpZ2luLnNpemVdPWxbb11bdGhpcy5vcmlnaW4ub2Zmc2V0XStcInB4XCIsbFtvXS5wYXJlbnROb2RlIT09dGhpcy5zY3JvbGxlciYmcihsW29dLnBhcmVudE5vZGUsZSksZT17fSxlW3RoaXMub3JpZ2luLmNyb3NzU2l6ZV09bFtvXS5wYXJlbnROb2RlW3RoaXMub3JpZ2luLmNyb3NzQ2xpZW50XStcInB4XCIscihsW29dLGUpLGMtPWxbb11bdGhpcy5vcmlnaW4ub2Zmc2V0XSxwW29dPWxbb10ucGFyZW50Tm9kZVt0aGlzLm9yaWdpbi5vZmZzZXRQb3NdLGhbb109aFtvLTFdfHwwLHVbb109dVtvLTFdfHxNYXRoLm1pbihwW29dLDApLGxbby0xXSYmKGhbb10rPWxbby0xXVt0aGlzLm9yaWdpbi5vZmZzZXRdLHVbb10rPWxbby0xXVt0aGlzLm9yaWdpbi5vZmZzZXRdKSwwPT1vJiYwPT1wW29dfHwodGhpcy5ldmVudChsW29dLFwibW91c2V3aGVlbFwiLGksXCJvZmZcIiksdGhpcy5ldmVudChsW29dLFwibW91c2V3aGVlbFwiLGkpKTthLmxpbWl0ZXImJmxbMF0mJih0aGlzLnRyYWNrJiZ0aGlzLnRyYWNrIT10aGlzLnNjcm9sbGVyPyhlPXt9LGVbdGhpcy5vcmlnaW4ucG9zXT1sWzBdLnBhcmVudE5vZGVbdGhpcy5vcmlnaW4ub2Zmc2V0XStcInB4XCIscih0aGlzLnRyYWNrLGUpKTp0aGlzLmJhclRvcExpbWl0PWxbMF0ucGFyZW50Tm9kZVt0aGlzLm9yaWdpbi5vZmZzZXRdLHRoaXMuc2Nyb2xsKCkpLCExPT09YS5saW1pdGVyJiYodGhpcy5iYXJUb3BMaW1pdD0wKX12YXIgbj17ZWxlbWVudDpsLGhhbmRsZXI6ZnVuY3Rpb24oKXtmb3IodmFyIHQsZT10aGlzLnBhcmVudE5vZGUsaT1lLm9mZnNldFRvcCxyPTA7cjxsLmxlbmd0aDtyKyspbFtyXT09PXRoaXMmJih0PXIpO3ZhciBzPWktaFt0XTthLnNjcm9sbD9hLnNjcm9sbCh7eDE6di5zY3JvbGxlci5zY3JvbGxUb3AseDI6c30pOnYuc2Nyb2xsZXIuc2Nyb2xsVG9wPXN9LHR5cGU6XCJjbGlja1wifTtpZihhLmNsaWNrYWJsZSl7dGhpcy5fZXZlbnRIYW5kbGVycy5wdXNoKG4pO2Zvcih2YXIgZj0wO2Y8bi5lbGVtZW50Lmxlbmd0aDtmKyspZChuLmVsZW1lbnRbZl0sbi50eXBlLG4uaGFuZGxlcixcIm9uXCIpfX12YXIgbCxjLGE9e291dHNpZGU6XCJcIixpbnNpZGU6XCJcIixiZWZvcmU6XCJcIixhZnRlcjpcIlwiLHBhc3Q6XCJcIixmdXR1cmU6XCJcIixyYWRpdXM6MCxtaW5WaWV3OjB9LGg9W10sdT1bXSxwPVtdLGY9dGhpcy5zY3JvbGxlcixkPXRoaXMuZXZlbnQsdj10aGlzO3RoaXMub24oXCJpbml0XCIsbix0KTt2YXIgZz1bXSxtPVtdO3JldHVybiB0aGlzLm9uKFwiaW5pdCBzY3JvbGxcIixmdW5jdGlvbigpe3ZhciB0LGkscixuO2lmKGwpe3ZhciBmO2ZvcihuPTA7bjxsLmxlbmd0aDtuKyspdD0wLHBbbl0tdGhpcy5wb3MoKTx1W25dK2EucmFkaXVzPyh0PTEsaT1oW25dKTpwW25dLXRoaXMucG9zKCk+dVtuXStjLWEucmFkaXVzPyh0PTIsaT10aGlzLnNjcm9sbGVyW3RoaXMub3JpZ2luLmNsaWVudF0tbFtuXVt0aGlzLm9yaWdpbi5vZmZzZXRdLWhbbl0tYyk6KHQ9MyxpPXZvaWQgMCkscj0hMSwocFtuXS10aGlzLnBvcygpPHVbbl18fHBbbl0tdGhpcy5wb3MoKT51W25dK2MpJiYocj0hMCksdD09Z1tuXSYmcj09bVtuXXx8KGUuY2FsbCh0aGlzLG4saSx0KSxnW25dPXQsbVtuXT1yLGY9ITApO2lmKGYpZm9yKG49MDtuPGwubGVuZ3RoO24rKykxPT1nW25dJiZhLnBhc3QmJihzKGxbbl0sYS5wYXN0KSxvKGxbbl0sYS5mdXR1cmUpKSwyPT1nW25dJiZhLmZ1dHVyZSYmKHMobFtuXSxhLmZ1dHVyZSksbyhsW25dLGEucGFzdCkpLDM9PWdbbl0mJihvKGxbbl0sYS5wYXN0KSxvKGxbbl0sYS5mdXR1cmUpLHMobFtuXSxhLmluc2lkZSkpLGdbbl0hPWdbbisxXSYmMT09Z1tuXT8ocyhsW25dLGEuYmVmb3JlKSxvKGxbbl0sYS5hZnRlcikpOmdbbl0hPWdbbi0xXSYmMj09Z1tuXT8ocyhsW25dLGEuYWZ0ZXIpLG8obFtuXSxhLmJlZm9yZSkpOihvKGxbbl0sYS5iZWZvcmUpLG8obFtuXSxhLmFmdGVyKSksYS5ncmFkJiYobVtuXT9zKGxbbl0sYS5ncmFkKTpvKGxbbl0sYS5ncmFkKSl9fSksdGhpcy5vbihcInJlc2l6ZSB1cGRcIixmdW5jdGlvbih0KXtuLmNhbGwodGhpcyx0JiZ0LmZpeCl9KSx0aGlzfX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLGkpe3ZhciByPWNvbnNvbGVbdF18fGNvbnNvbGUubG9nLHM9W1wiQmFyb246IFwiK2UsaV07RnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwocixjb25zb2xlLHMpfX1dKTsiLCIoZnVuY3Rpb24oKSB7XG4gICAgdmFyICRzbGlkZXIgPSAkKFwiLmpzLWV2ZW50cy1zbGlkZXJcIik7XG5cbiAgICAkc2xpZGVyLnNsaWNrKHtcbiAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgIHNsaWRlc1RvU2hvdzogMyxcbiAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICAgIGFwcGVuZEFycm93czogXCIuZXZlbnRzLWJsb2NrLXNsaWRlci1hcnJvd3NcIixcbiAgICAgICAgcmVzcG9uc2l2ZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDEwODAsXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBicmVha3BvaW50OiA3NjAsXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSk7XG59KSgpOyIsIihmdW5jdGlvbigpIHtcbiAgICB2YXIgJGhlYWRlciA9ICQoJy5tYWluLWhlYWRlcicpLFxuICAgICAgICAkaGVhZGVyR2xvYmFsID0gJCgnLmhlYWRlci1nbG9iYWwnKSxcbiAgICAgICAgJGhlYWRlckdsb2JhbEhlaWdodCA9ICRoZWFkZXJHbG9iYWwuaGVpZ2h0KCk7XG5cbiAgICBmdW5jdGlvbiBmaXhIZWFkZXIoKSB7XG4gICAgICAgIHZhciBzY3JvbGxUb3AgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7XG4gICAgICAgIGlmIChzY3JvbGxUb3AgPCAkaGVhZGVyR2xvYmFsSGVpZ2h0ICYmICRoZWFkZXJHbG9iYWwuaXMoXCI6dmlzaWJsZVwiKSkge1xuICAgICAgICAgICAgJGhlYWRlci5jc3MoJ3RvcCcsICRoZWFkZXJHbG9iYWxIZWlnaHQgLSBzY3JvbGxUb3ApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGhlYWRlci5jc3MoJ3RvcCcsIDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCRoZWFkZXJHbG9iYWwubGVuZ3RoKSB7XG4gICAgICAgIGZpeEhlYWRlcigpO1xuXG4gICAgICAgICQod2luZG93KS5vbignc2Nyb2xsIHJlc2l6ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZpeEhlYWRlcigpO1xuICAgICAgICB9KTtcbiAgICB9XG59KSgpOyIsIihmdW5jdGlvbiggJCApIHtcbiAgICAkLmZuLmZvcm1BamF4ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQodGhpcykub24oJ3N1Ym1pdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgJGZvcm0gPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICB1cmwgPSAkZm9ybS5hdHRyKCdhY3Rpb24nKSxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kID0gJGZvcm0uYXR0cignbWV0aG9kJyksXG4gICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCRmb3JtWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgZm9ybU92ZXJsYXkgPSAkZm9ybS5kYXRhKCdmb3JtLWFqYXgtb3ZlcmxheScpLFxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uID0gJGZvcm0uaXMoJ1tkYXRhLXZhbGlkYXRlXScpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRpb24gJiYgJGZvcm0udmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICBjaGVja0NhcHRjaGEoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF2YWxpZGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQ2FwdGNoYSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNob3dPdmVybGF5KCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybU92ZXJsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoZm9ybU92ZXJsYXkpLmFkZENsYXNzKCdhY3RpdmUnKS5zcGluKCdsYXJnZScsICcjMDAwJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCdib2R5Jykuc3BpbignbGFyZ2UnLCAnIzAwMCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaGlkZU92ZXJsYXkoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JtT3ZlcmxheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJChmb3JtT3ZlcmxheSkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpLnNwaW4oZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnYm9keScpLnNwaW4oZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2tDYXB0Y2hhKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJGZvcm0uZmluZCgnW2RhdGEtcmVjYXB0Y2hhXScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gJGZvcm0uZmluZCgnW2RhdGEtcmVjYXB0Y2hhXScpLmRhdGEoJ3JlY2FwdGNoYScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZlcmlmeUNhbGxiYWNrID0gZnVuY3Rpb24odG9rZW4pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZy10b2tlbicsIHRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXRGb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FwdGNoYUlEID0gZ3JlY2FwdGNoYS5yZW5kZXIoJ3JlY2FwdGNoYS1wbGFjZWhvbGRlcicsIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdzaXRla2V5JyA6IGtleSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdjYWxsYmFjaycgOiB2ZXJpZnlDYWxsYmFjayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemUnIDogJ2ludmlzaWJsZSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JlY2FwdGNoYS5leGVjdXRlKGNhcHRjaGFJRCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXRGb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzdWJtaXRGb3JtKCkge1xuICAgICAgICAgICAgICAgICAgICBzaG93T3ZlcmxheSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGZvcm1EYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0RhdGE6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJ1xuICAgICAgICAgICAgICAgICAgICB9KS5kb25lKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZm9ybVswXS5yZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRTaWRlTW9kYWwoZGF0YS5tZXNzYWdlLCAnbWVzc2FnZS1tb2RhbCcsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEgJiYgZGF0YS5tZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGZvcm0uZmluZCgnLmpzLWZvcm0tbWVzc2FnZXMnKS5hZGRDbGFzcygnYWN0aXZlJykuaHRtbChkYXRhLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRmaWVsZCA9ICQoJ1tuYW1lPVwiJyArIGVycm9yLm5hbWUgKyAnXCJdJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGZpZWxkLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRmaWVsZC5hZGRDbGFzcygnZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZmllbGQuc2libGluZ3MoJy5mb3JtLWxhYmVsJykuYWRkQ2xhc3MoJ2Zvcm0tbGFiZWwtZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZmllbGQuc2libGluZ3MoJy5mb3JtLWNvbnRyb2wtZXJyb3JzJykuYWRkQ2xhc3MoJ2FjdGl2ZScpLmh0bWwoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5yZWRpcmVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gZGF0YS5yZWRpcmVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5yZWxvYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pLmZhaWwoZnVuY3Rpb24gKGpxWEhSLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ9Ce0YjQuNCx0LrQsCDQvtGC0L/RgNCw0LLQutC4INC00LDQvdC90YvRhS4g0J/QvtC20LDQu9GD0LnRgdGC0LAsINC/0L7Qv9GA0L7QsdGD0LnRgtC1INC10YnRkSDRgNCw0LcuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhqcVhIUik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvclRocm93bik7XG4gICAgICAgICAgICAgICAgICAgIH0pLmFsd2F5cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoaWRlT3ZlcmxheSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufSggalF1ZXJ5ICkpOyIsIihmdW5jdGlvbiggJCApIHtcbiAgICB2YXIgaXNfc3VwcG9ydGVkX2Jyb3dzZXIgPSAhIXdpbmRvdy5GaWxlO1xuXG4gICAgdmFyIGZpbGVTaXplVG9CeXRlcyA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB1bml0cyA9IFtcIkJcIiwgXCJLQlwiLCBcIk1CXCIsIFwiR0JcIiwgXCJUQlwiXTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNpemUsIHVuaXQpIHtcbiAgICAgICAgICAgIHZhciBpbmRleF9vZl91bml0ID0gdW5pdHMuaW5kZXhPZih1bml0KSxcbiAgICAgICAgICAgICAgICBjb3ZlcnRlZF9zaXplO1xuXG4gICAgICAgICAgICBpZiAoaW5kZXhfb2ZfdW5pdCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBjb3ZlcnRlZF9zaXplID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHdoaWxlIChpbmRleF9vZl91bml0ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBzaXplICo9IDEwMjQ7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4X29mX3VuaXQgLT0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY292ZXJ0ZWRfc2l6ZSA9IHNpemU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBjb3ZlcnRlZF9zaXplO1xuICAgICAgICB9O1xuICAgIH0oKSk7XG5cbiAgICB2YXIgZm9ybWF0dGVyID0gJC52YWxpZGF0b3IuZm9ybWF0O1xuXG4gICAgJC52YWxpZGF0b3IuYWRkTWV0aG9kKFwiZGF0ZVJhbmdlXCIsIGZ1bmN0aW9uKHZhbHVlLCBlbCwgcGFyYW1zKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgZGF0ZUZvcm1hdCA9ICdZWVlZLk1NLkREJyxcbiAgICAgICAgICAgICAgICBkYXRlUmFuZ2UgPSBwYXJhbXMuc3BsaXQoJywnKSxcbiAgICAgICAgICAgICAgICBkYXRlRnJvbSA9IGRhdGVSYW5nZVswXS5zcGxpdCgnLicpLnJldmVyc2UoKSxcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXBGcm9tID0gbW9tZW50KGRhdGVGcm9tLCBkYXRlRm9ybWF0KS51bml4KCksXG4gICAgICAgICAgICAgICAgZGF0ZVRvID0gZGF0ZVJhbmdlWzFdLnNwbGl0KCcuJykucmV2ZXJzZSgpLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcFRvID0gbW9tZW50KGRhdGVUbywgZGF0ZUZvcm1hdCkudW5peCgpLFxuICAgICAgICAgICAgICAgIGRhdGVWYWx1ZSA9IHZhbHVlLnNwbGl0KCcuJykucmV2ZXJzZSgpLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcFZhbHVlID0gbW9tZW50KGRhdGVWYWx1ZSwgZGF0ZUZvcm1hdCkudW5peCgpO1xuXG4gICAgICAgICAgICByZXR1cm4gKHRpbWVzdGFtcEZyb20gPD0gdGltZXN0YW1wVmFsdWUgJiYgdGltZXN0YW1wVmFsdWUgPD0gdGltZXN0YW1wVG8pO1xuICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coZSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgICQudmFsaWRhdG9yLmFkZE1ldGhvZChcIm1heEZpbGVTaXplXCIsIGZ1bmN0aW9uICh2YWx1ZSwgZWwsIHBhcmFtcykge1xuICAgICAgICAgICAgdmFyIGZpbGVzLFxuICAgICAgICAgICAgICAgIHVuaXQgPSBwYXJhbXMudW5pdCB8fCBcIktCXCIsXG4gICAgICAgICAgICAgICAgc2l6ZSA9IHBhcmFtcy5zaXplIHx8IDEwMCxcbiAgICAgICAgICAgICAgICBtYXhfZmlsZV9zaXplID0gZmlsZVNpemVUb0J5dGVzKHNpemUsIHVuaXQpLFxuICAgICAgICAgICAgICAgIGlzX3ZhbGlkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmICghaXNfc3VwcG9ydGVkX2Jyb3dzZXIgfHwgdGhpcy5vcHRpb25hbChlbCkpIHtcbiAgICAgICAgICAgICAgICBpc192YWxpZCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZpbGVzID0gZWwuZmlsZXM7XG5cbiAgICAgICAgICAgICAgICBpZiAoZmlsZXMubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgICAgICAgICBpc192YWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlzX3ZhbGlkID0gZmlsZXNbMF0uc2l6ZSA8PSBtYXhfZmlsZV9zaXplO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGlzX3ZhbGlkO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAocGFyYW1zLCBlbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdHRlcihcbiAgICAgICAgICAgICAgICBcIkZpbGUgY2Fubm90IGJlIGxhcmdlciB0aGFuIHswfXsxfS5cIixcbiAgICAgICAgICAgICAgICBbcGFyYW1zLnNpemUgfHwgMTAwLCBwYXJhbXMudW5pdCB8fCBcIktCXCJdXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgKTtcblxuICAgICQudmFsaWRhdG9yLm1ldGhvZHMuZW1haWwgPSBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbmFsKGVsZW1lbnQpIHx8IC8uK0AuK1xcLi57Mix9L2kudGVzdCh2YWx1ZSk7XG4gICAgfTtcblxuICAgICQuZm4uZm9ybVZhbGlkYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCh0aGlzKS52YWxpZGF0ZSh7XG4gICAgICAgICAgICAgICAgZXJyb3JQbGFjZW1lbnQ6IGZ1bmN0aW9uKGVycm9yLCBlbGVtZW50KSB7fSxcbiAgICAgICAgICAgICAgICBoaWdobGlnaHQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGVycm9yQ2xhc3MsIHZhbGlkQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgJChlbGVtZW50KS5jbG9zZXN0KCcuZm9ybS1ncm91cCcpLmZpbmQoJy5mb3JtLWxhYmVsJykuYWRkQ2xhc3MoJ2Zvcm0tbGFiZWwtZXJyb3InKS5yZW1vdmVDbGFzcygnZm9ybS1sYWJlbC12YWxpZCcpO1xuICAgICAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNsb3Nlc3QoJy5mb3JtLWNvbnRyb2wnKS5hZGRDbGFzcyhlcnJvckNsYXNzKS5yZW1vdmVDbGFzcyh2YWxpZENsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgJChlbGVtZW50KS5hZGRDbGFzcyhlcnJvckNsYXNzKS5yZW1vdmVDbGFzcyh2YWxpZENsYXNzKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVuaGlnaGxpZ2h0OiBmdW5jdGlvbihlbGVtZW50LCBlcnJvckNsYXNzLCB2YWxpZENsYXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICQoZWxlbWVudCkuY2xvc2VzdCgnLmZvcm0tZ3JvdXAnKS5maW5kKCcuZm9ybS1sYWJlbCcpLnJlbW92ZUNsYXNzKCdmb3JtLWxhYmVsLWVycm9yJykuYWRkQ2xhc3MoJ2Zvcm0tbGFiZWwtdmFsaWQnKTtcbiAgICAgICAgICAgICAgICAgICAgJChlbGVtZW50KS5jbG9zZXN0KCcuZm9ybS1jb250cm9sJykucmVtb3ZlQ2xhc3MoZXJyb3JDbGFzcykuYWRkQ2xhc3ModmFsaWRDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgICQoZWxlbWVudCkucmVtb3ZlQ2xhc3MoZXJyb3JDbGFzcykuYWRkQ2xhc3ModmFsaWRDbGFzcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG59KCBqUXVlcnkgKSk7IiwiKGZ1bmN0aW9uKCAkICkge1xuICAgICQuZm4ubWFza2VkaW5wdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIG1hc2sgPSAkKHRoaXMpLmRhdGEoJ21hc2tlZC1pbnB1dCcpLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyID0gJCh0aGlzKS5kYXRhKCdtYXNrZWQtaW5wdXQtcGxhY2Vob2xkZXInKSxcbiAgICAgICAgICAgICAgICBjbGVhcklmTm90TWF0Y2ggPSAkKHRoaXMpLmlzKCdbZGF0YS1tYXNrZWQtaW5wdXQtY2xlYXJpZm5vdG1hdGNoXScpO1xuXG4gICAgICAgICAgICAkKHRoaXMpLm1hc2sobWFzaywge1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICAgICAgICAgICAgICBjbGVhcklmTm90TWF0Y2g6IGNsZWFySWZOb3RNYXRjaFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG59KCBqUXVlcnkgKSk7IiwiKGZ1bmN0aW9uKCkge1xuICAgIHZhciAkc2xpZGVyID0gJChcIi5qcy1tZWRpYS1zbGlkZXJcIik7XG5cbiAgICAkc2xpZGVyLnNsaWNrKHtcbiAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgIHNsaWRlc1RvU2hvdzogNCxcbiAgICAgICAgcm93czogMixcbiAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDQsXG4gICAgICAgIGFwcGVuZEFycm93czogXCIubWVkaWEtYmxvY2staGVhZGVyLWFycm93c1wiLFxuICAgICAgICByZXNwb25zaXZlOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTA4MCxcbiAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDMsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBicmVha3BvaW50OiA3NjksXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgYXJyb3dzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZG90czogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcm93czogMSxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAyLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludDogNjAwLFxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgIGFycm93czogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGRvdHM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHJvd3M6IDEsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpIDwgNjAwKSB7XG4gICAgICAgICAgICAkc2xpZGVyLnNsaWNrKCdzbGlja0ZpbHRlcicsIGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaSA8IDEwO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXNpemUoKTtcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgIHZhciAkc2xpZGVyID0gJChcIi5qcy1uZXdzLXNsaWRlclwiKTtcblxuICAgICRzbGlkZXIuc2xpY2soe1xuICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgc2xpZGVzVG9TaG93OiA0LFxuICAgICAgICByb3dzOiAyLFxuICAgICAgICBzbGlkZXNUb1Njcm9sbDogNCxcbiAgICAgICAgYXBwZW5kQXJyb3dzOiBcIi5uZXdzLWJsb2NrLWhlYWRlci1hcnJvd3NcIixcbiAgICAgICAgcmVzcG9uc2l2ZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDEwODAsXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAzLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogM1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludDogOTAwLFxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgIGFycm93czogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGRvdHM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMixcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDUyMCxcbiAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICBhcnJvd3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBkb3RzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICByb3dzOiAxLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSA8IDUyMCkge1xuICAgICAgICAgICAgJHNsaWRlci5zbGljaygnc2xpY2tGaWx0ZXInLCBmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgPCAxMDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVzaXplKCk7XG59KSgpOyIsIihmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBoaWRlRXZlbnQoZSwgY2xvc2VzdEVsLCBoaWRlRnVuYykge1xuICAgICAgICBpZighJChlLnRhcmdldCkuY2xvc2VzdChjbG9zZXN0RWwpLmxlbmd0aCkge1xuICAgICAgICAgICAgaGlkZUZ1bmMoKTtcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9mZignY2xpY2snLCAnYm9keScsIGhpZGVFdmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgb2ZmY2FudmFzT3ZlcmxheSA9ICcjb2ZmY2FudmFzJyxcbiAgICAgICAgb2ZmY2FudmFzID0gJyNvZmZjYW52YXMgPiAubWFpbi1vZmZjYW52YXMnO1xuXG4gICAgZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgICAgJCgnLmpzLW9mZmNhbnZhcycpLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgJChvZmZjYW52YXNPdmVybGF5KS5hZGRDbGFzcygnYWN0aXZlJyk7XG5cbiAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJ2JvZHknLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgaGlkZUV2ZW50KGUsIG9mZmNhbnZhcywgaGlkZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICAgICQoJy5qcy1vZmZjYW52YXMsICcgKyBvZmZjYW52YXNPdmVybGF5KS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgfVxuXG4gICAgJCgnLmpzLW9mZmNhbnZhcycpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XG4gICAgICAgICAgICBoaWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaG93KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG5cbiAgICAvKmlmICggJChvZmZjYW52YXNPdmVybGF5KS5sZW5ndGggKSB7XG4gICAgICAgIHZhciBvZmZjYW52YXNIYW1tZXIgPSBuZXcgSGFtbWVyKCQob2ZmY2FudmFzT3ZlcmxheSlbMF0pO1xuICAgICAgICBvZmZjYW52YXNIYW1tZXIub24oXCJzd2lwZWxlZnRcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgaGlkZSgpO1xuICAgICAgICB9KTtcbiAgICB9Ki9cblxuICAgIGlmIChTd2lwZSAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm9mZmNhbnZhc1wiKSkge1xuICAgICAgICBuZXcgU3dpcGUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvZmZjYW52YXNcIiksIGZ1bmN0aW9uKGV2ZW50LCBkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG4gICAgdmFyICRzbGlkZXIgPSAkKFwiLmpzLXBhcnRuZXJzLXNsaWRlclwiKTtcbiAgICAkc2xpZGVyLnNsaWNrKHtcbiAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgIHNsaWRlc1RvU2hvdzogNCxcbiAgICAgICAgcm93czogMixcbiAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDQsXG4gICAgICAgIGFwcGVuZEFycm93czogXCIucGFydG5lcnMtYmxvY2staGVhZGVyLWFycm93c1wiLFxuICAgICAgICByZXNwb25zaXZlOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTA4MCxcbiAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDMsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBicmVha3BvaW50OiA3NjksXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgYXJyb3dzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZG90czogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAyLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludDogNTIwLFxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgIGFycm93czogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGRvdHM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMixcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpIDwgNTIwKSB7XG4gICAgICAgICAgICAkc2xpZGVyLnNsaWNrKCdzbGlja0ZpbHRlcicsIGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaSA8IDEwO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXNpemUoKTtcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICAgIHZhciAkc2xpZGVyID0gJChcIi5qcy1wcm9ncmFtcy1zbGlkZXJcIik7XG4gICAgJHNsaWRlci5zbGljayh7XG4gICAgICAgIGluZmluaXRlOiB0cnVlLFxuICAgICAgICBzbGlkZXNUb1Nob3c6IDMsXG4gICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAzLFxuICAgICAgICBhcnJvd3M6IGZhbHNlLFxuICAgICAgICBkb3RzOiB0cnVlLFxuICAgICAgICByZXNwb25zaXZlOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludDogNzY3LFxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMixcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDU4MCxcbiAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSA8IDU4MCkge1xuICAgICAgICAgICAgJHNsaWRlci5zbGljaygnc2xpY2tGaWx0ZXInLCBmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgPCAxMDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVzaXplKCk7XG59KSgpOyIsIihmdW5jdGlvbigpIHtcbiAgICB2YXIgJHNsaWRlciA9ICQoXCIuanMtc2Vzc2lvbnMtc2xpZGVyXCIpO1xuXG4gICAgJHNsaWRlci5zbGljayh7XG4gICAgICAgIGluZmluaXRlOiB0cnVlLFxuICAgICAgICBzbGlkZXNUb1Nob3c6IDMsXG4gICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAzLFxuICAgICAgICBhcHBlbmRBcnJvd3M6IFwiLnNlc3Npb25zLWJsb2NrLWhlYWRlci1hcnJvd3NcIixcbiAgICAgICAgcmVzcG9uc2l2ZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDkwMCxcbiAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICBhcnJvd3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBkb3RzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDIsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBicmVha3BvaW50OiA1MjAsXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgYXJyb3dzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZG90czogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gcmVzaXplKCkge1xuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPCA1MjApIHtcbiAgICAgICAgICAgICRzbGlkZXIuc2xpY2soJ3NsaWNrRmlsdGVyJywgZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpIDwgMTA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlc2l6ZSgpO1xufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG4gICAgdmFyICRzbGlkZXIgPSAkKFwiLmpzLXNwZWFrZXJzLXNsaWRlclwiKTtcblxuICAgICRzbGlkZXIuc2xpY2soe1xuICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgc2xpZGVzVG9TaG93OiA0LFxuICAgICAgICByb3dzOiAyLFxuICAgICAgICBzbGlkZXNUb1Njcm9sbDogNCxcbiAgICAgICAgYXBwZW5kQXJyb3dzOiBcIi5zcGVha2Vycy1ibG9jay1oZWFkZXItYXJyb3dzXCIsXG4gICAgICAgIHByZXZBcnJvdzogJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwic2xpY2stYXJyb3cgc2xpY2stYXJyb3ctd2hpdGUgc2xpY2stcHJldlwiPjwvYnV0dG9uPicsXG4gICAgICAgIG5leHRBcnJvdzogJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwic2xpY2stYXJyb3cgc2xpY2stYXJyb3ctd2hpdGUgc2xpY2stbmV4dFwiPjwvYnV0dG9uPicsXG4gICAgICAgIHJlc3BvbnNpdmU6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBicmVha3BvaW50OiAxMDgwLFxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgIHJvd3M6IDEsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMyxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDc2OSxcbiAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICByb3dzOiAxLFxuICAgICAgICAgICAgICAgICAgICBkb3RzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDIsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBicmVha3BvaW50OiA1MjAsXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgcm93czogMSxcbiAgICAgICAgICAgICAgICAgICAgZG90czogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gcmVzaXplKCkge1xuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPCA1MjApIHtcbiAgICAgICAgICAgICRzbGlkZXIuc2xpY2soJ3NsaWNrRmlsdGVyJywgZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpIDwgMTA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlc2l6ZSgpO1xufSkoKTsiLCIoZnVuY3Rpb24oKSB7XG4gICAgdmFyICRzbGlkZXIgPSAkKFwiLmpzLXN1bW1pdHMtc2xpZGVyXCIpO1xuXG4gICAgJHNsaWRlci5vbignaW5pdCcsIGZ1bmN0aW9uIChlLCBzbGljaykge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIExldCdzIGdvIHRvIGxhc3QgcG9zc2libGUgc2xpZGUg8J+SqVxuICAgICAgICAgICAgc2xpY2suc2xpY2tHb1RvKDk5OSwgZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgICRzbGlkZXIub24oJ2JlZm9yZUNoYW5nZScsIGZ1bmN0aW9uKGUsIHNsaWNrLCBjdXJyZW50U2xpZGUsIG5leHRTbGlkZSkge1xuICAgICAgICB2YXIgJG5leHRTbGlkZSA9ICQoc2xpY2suJHNsaWRlc1tuZXh0U2xpZGVdKS5maW5kKCdbZGF0YS1zdW1taXRzLXllYXJdJyk7XG5cbiAgICAgICAgdmFyIHllYXIgPSAkbmV4dFNsaWRlLmRhdGEoJ3N1bW1pdHMteWVhcicpO1xuXG4gICAgICAgIGlmICh5ZWFyKSB7XG4gICAgICAgICAgICAkKCcuanMtc3VtbWl0cy1zbGlkZXItY3VycmVudC15ZWFyJykuaHRtbCh5ZWFyKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNsaWRlci5zbGljayh7XG4gICAgICAgIGluZmluaXRlOiBmYWxzZSxcbiAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgICAgYXBwZW5kQXJyb3dzOiBcIi5zdW1taXRzLWJsb2NrLWhlYWRlci1hcnJvd3NcIlxuICAgIH0pO1xufSkoKTsiLCIkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICAkKFwiLmpzLXNsaWNrLXNsaWRlclwiKS5zbGljaygpO1xuICAgICQoJ1tkYXRhLW1hc2tlZC1pbnB1dF0nKS5tYXNrZWRpbnB1dCgpO1xuICAgICQoJ1tkYXRhLWZvcm0tYWpheF0nKS5mb3JtQWpheCgpO1xuICAgICQoJ1tkYXRhLXZhbGlkYXRlXScpLmZvcm1WYWxpZGF0aW9uKCk7XG5cbiAgICAkKCcuanMtc21vb3RoLXNjcm9sbCcpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCAkKHRoaXMpLmF0dHIoJ2hyZWYnKSk7XG4gICAgICAgIHZhciBlbGVtZW50SWQgPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcbiAgICAgICAgaWYgKCQoZWxlbWVudElkKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAkKCdodG1sLCBib2R5JykuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgc2Nyb2xsVG9wOiAkKCAkLmF0dHIodGhpcywgJ2hyZWYnKSApLm9mZnNldCgpLnRvcCAtIDEwXG4gICAgICAgICAgICB9LCA3MDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnbm8gZWxlbWVudCEnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG5cblxufSk7XG5cbnZhciBnQ2FwdGhhSW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgIFxufSJdfQ==
